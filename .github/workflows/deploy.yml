name: Deploy Portfolio

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: portfolio_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Setup environment variables
        run: |
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV
          echo "DB_USERNAME=postgres" >> $GITHUB_ENV
          echo "DB_PASSWORD=password" >> $GITHUB_ENV
          echo "DB_DATABASE=portfolio_test" >> $GITHUB_ENV
          echo "JWT_SECRET=test-secret-key" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=test-refresh-secret" >> $GITHUB_ENV
          echo "EMAIL_HOST=smtp.gmail.com" >> $GITHUB_ENV
          echo "EMAIL_PORT=587" >> $GITHUB_ENV
          echo "EMAIL_USER=test@example.com" >> $GITHUB_ENV
          echo "EMAIL_PASS=test-password" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Run backend tests
        run: |
          cd backend
          npm test

      - name: Build frontend
        run: npm run build

      - name: Run frontend tests
        run: npm test

      - name: Run production verification
        run: node verify-production.js --api-url http://localhost:3000

  deploy-frontend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  deploy-backend:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Build backend
        run: |
          cd backend
          npm run build

      - name: Deploy to Railway
        uses: railway/action@v1
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: portfolio-backend

  notify:
    needs: [deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-frontend.result }}" == "success" ] && [ "${{ needs.deploy-backend.result }}" == "success" ]; then
            echo "üéâ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi 