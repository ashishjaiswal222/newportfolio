{"version":3,"file":"blocknote.cjs","sources":["../src/extensions/UniqueID/UniqueID.ts","../src/schema/inlineContent/types.ts","../src/util/table.ts","../src/util/typescript.ts","../src/util/browser.ts","../src/blocks/defaultBlockHelpers.ts","../src/blocks/defaultProps.ts","../src/util/string.ts","../src/schema/blocks/internal.ts","../src/schema/blocks/createSpec.ts","../src/api/getBlockInfoFromPos.ts","../src/api/pmUtil.ts","../src/api/nodeConversions/nodeToBlock.ts","../src/schema/inlineContent/internal.ts","../src/schema/inlineContent/createSpec.ts","../src/schema/styles/internal.ts","../src/schema/styles/createSpec.ts","../src/api/blockManipulation/tables/tables.ts","../src/api/nodeConversions/blockToNode.ts","../src/api/nodeUtil.ts","../src/api/blockManipulation/commands/insertBlocks/insertBlocks.ts","../src/api/blockManipulation/commands/replaceBlocks/replaceBlocks.ts","../src/api/blockManipulation/commands/updateBlock/updateBlock.ts","../src/api/exporters/html/util/serializeBlocksExternalHTML.ts","../src/api/exporters/html/externalHTMLExporter.ts","../src/api/exporters/html/util/serializeBlocksInternalHTML.ts","../src/api/exporters/html/internalHTMLSerializer.ts","../src/blocks/FileBlockContent/helpers/parse/parseFigureElement.ts","../src/blocks/FileBlockContent/helpers/render/createAddFileButton.ts","../src/blocks/FileBlockContent/helpers/render/createFileNameWithIcon.ts","../src/blocks/FileBlockContent/helpers/render/createFileBlockWrapper.ts","../src/blocks/FileBlockContent/helpers/toExternalHTML/createFigureWithCaption.ts","../src/blocks/FileBlockContent/helpers/toExternalHTML/createLinkWithCaption.ts","../src/blocks/AudioBlockContent/parseAudioElement.ts","../src/blocks/AudioBlockContent/AudioBlockContent.ts","../src/blocks/CodeBlockContent/CodeBlockContent.ts","../src/extensions/BackgroundColor/BackgroundColorMark.ts","../src/extensions/TextColor/TextColorMark.ts","../src/blocks/FileBlockContent/helpers/parse/parseEmbedElement.ts","../src/blocks/FileBlockContent/FileBlockContent.ts","../src/blocks/ToggleWrapper/createToggleWrapper.ts","../src/blocks/HeadingBlockContent/HeadingBlockContent.ts","../src/blocks/FileBlockContent/helpers/render/createResizableFileBlockWrapper.ts","../src/blocks/ImageBlockContent/parseImageElement.ts","../src/blocks/ImageBlockContent/ImageBlockContent.ts","../src/api/blockManipulation/commands/splitBlock/splitBlock.ts","../src/blocks/ListItemBlockContent/ListItemKeyboardShortcuts.ts","../src/blocks/ListItemBlockContent/ToggleListItemBlockContent/ToggleListItemBlockContent.ts","../src/blocks/ListItemBlockContent/getListItemContent.ts","../src/blocks/ListItemBlockContent/BulletListItemBlockContent/BulletListItemBlockContent.ts","../src/blocks/ListItemBlockContent/CheckListItemBlockContent/CheckListItemBlockContent.ts","../src/blocks/ListItemBlockContent/NumberedListItemBlockContent/NumberedListIndexingPlugin.ts","../src/blocks/ListItemBlockContent/NumberedListItemBlockContent/NumberedListItemBlockContent.ts","../src/blocks/ParagraphBlockContent/ParagraphBlockContent.ts","../src/blocks/QuoteBlockContent/QuoteBlockContent.ts","../src/blocks/TableBlockContent/TableExtension.ts","../src/blocks/TableBlockContent/TableBlockContent.ts","../src/blocks/VideoBlockContent/parseVideoElement.ts","../src/blocks/VideoBlockContent/VideoBlockContent.ts","../src/blocks/defaultBlocks.ts","../src/blocks/defaultBlockTypeGuards.ts","../src/blocks/FileBlockContent/uploadToTmpFilesDotOrg_DEV_ONLY.ts","../src/extensions/SuggestionMenu/getDefaultSlashMenuItems.ts","../src/editor/BlockNoteSchema.ts","../src/blocks/PageBreakBlockContent/PageBreakBlockContent.ts","../src/blocks/PageBreakBlockContent/schema.ts","../src/blocks/PageBreakBlockContent/getPageBreakSlashMenuItems.ts","../src/api/blockManipulation/commands/moveBlocks/moveBlocks.ts","../src/api/blockManipulation/commands/nestBlock/nestBlock.ts","../src/api/blockManipulation/getBlock/getBlock.ts","../src/api/blockManipulation/insertContentAt.ts","../src/api/blockManipulation/selections/selection.ts","../src/api/blockManipulation/selections/textCursorPosition.ts","../src/util/esmDependencies.ts","../src/api/exporters/markdown/removeUnderlinesRehypePlugin.ts","../src/api/exporters/markdown/util/addSpacesToCheckboxesRehypePlugin.ts","../src/api/exporters/markdown/markdownExporter.ts","../src/api/parsers/html/util/nestedLists.ts","../src/api/parsers/html/parseHTML.ts","../src/api/parsers/markdown/parseMarkdown.ts","../src/api/clipboard/fromClipboard/acceptedMIMETypes.ts","../src/api/clipboard/fromClipboard/handleFileInsertion.ts","../src/api/clipboard/fromClipboard/fileDropExtension.ts","../src/api/parsers/markdown/detectMarkdown.ts","../src/api/clipboard/fromClipboard/handleVSCodePaste.ts","../src/api/clipboard/fromClipboard/pasteExtension.ts","../src/api/nodeConversions/fragmentToBlocks.ts","../src/api/clipboard/toClipboard/copyExtension.ts","../src/extensions/BackgroundColor/BackgroundColorExtension.ts","../src/util/EventEmitter.ts","../src/editor/BlockNoteExtension.ts","../src/extensions/BlockChange/BlockChangePlugin.ts","../src/extensions/Collaboration/CursorPlugin.ts","../src/extensions/Collaboration/SyncPlugin.ts","../src/extensions/Collaboration/UndoPlugin.ts","../src/extensions/Comments/CommentMark.ts","../src/extensions/Comments/userstore/UserStore.ts","../src/extensions/Comments/CommentsPlugin.ts","../src/extensions/FilePanel/FilePanelPlugin.ts","../src/extensions/FormattingToolbar/FormattingToolbarPlugin.ts","../src/extensions/HardBreak/HardBreak.ts","../src/api/blockManipulation/commands/mergeBlocks/mergeBlocks.ts","../src/extensions/KeyboardShortcuts/KeyboardShortcutsExtension.ts","../src/extensions/LinkToolbar/LinkToolbarPlugin.ts","../src/extensions/LinkToolbar/protocols.ts","../src/extensions/NodeSelectionKeyboard/NodeSelectionKeyboardPlugin.ts","../src/extensions/Placeholder/PlaceholderPlugin.ts","../src/extensions/PreviousBlockType/PreviousBlockTypePlugin.ts","../src/extensions/ShowSelection/ShowSelectionPlugin.ts","../src/extensions/getDraggableBlockFromElement.ts","../src/extensions/SideMenu/MultipleNodeSelection.ts","../src/extensions/SideMenu/dragging.ts","../src/extensions/SideMenu/SideMenuPlugin.ts","../src/api/positionMapping.ts","../src/extensions/SuggestionMenu/SuggestionPlugin.ts","../src/extensions/Suggestions/SuggestionMarks.ts","../src/extensions/TableHandles/TableHandlesPlugin.ts","../src/extensions/TextAlignment/TextAlignmentExtension.ts","../src/extensions/TextColor/TextColorExtension.ts","../src/extensions/TrailingNode/TrailingNodeExtension.ts","../src/pm-nodes/BlockContainer.ts","../src/pm-nodes/BlockGroup.ts","../src/pm-nodes/Doc.ts","../src/extensions/Collaboration/ForkYDocPlugin.ts","../src/editor/BlockNoteExtensions.ts","../src/editor/transformPasted.ts","../src/editor/BlockNoteTipTapEditor.ts","../src/editor/BlockNoteEditor.ts","../src/editor/defaultColors.ts","../src/exporter/Exporter.ts","../src/exporter/mapping.ts","../src/extensions/SuggestionMenu/getDefaultEmojiPickerItems.ts","../src/util/combineByGroup.ts"],"sourcesContent":["import {\n  combineTransactionSteps,\n  Extension,\n  findChildrenInRange,\n  getChangedRanges,\n} from \"@tiptap/core\";\nimport { Fragment, Slice } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { v4 } from \"uuid\";\n\n/**\n * Code from Tiptap UniqueID extension (https://tiptap.dev/api/extensions/unique-id)\n * This extension is licensed under MIT (even though it's part of Tiptap pro).\n *\n * If you're a user of BlockNote, we still recommend to support their awesome work and become a sponsor!\n * https://tiptap.dev/pro\n */\n\n/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nfunction removeDuplicates(array: any, by = JSON.stringify) {\n  const seen: any = {};\n  return array.filter((item: any) => {\n    const key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true);\n  });\n}\n\n/**\n * Returns a list of duplicated items within an array.\n */\nfunction findDuplicates(items: any) {\n  const filtered = items.filter(\n    (el: any, index: number) => items.indexOf(el) !== index,\n  );\n  const duplicates = removeDuplicates(filtered);\n  return duplicates;\n}\n\nconst UniqueID = Extension.create({\n  name: \"uniqueID\",\n  // weâ€™ll set a very high priority to make sure this runs first\n  // and is compatible with `appendTransaction` hooks of other extensions\n  priority: 10000,\n  addOptions() {\n    return {\n      attributeName: \"id\",\n      types: [],\n      setIdAttribute: false,\n      generateID: () => {\n        // Use mock ID if tests are running.\n        if (typeof window !== \"undefined\" && (window as any).__TEST_OPTIONS) {\n          const testOptions = (window as any).__TEST_OPTIONS;\n          if (testOptions.mockID === undefined) {\n            testOptions.mockID = 0;\n          } else {\n            testOptions.mockID++;\n          }\n\n          return testOptions.mockID.toString() as string;\n        }\n\n        return v4();\n      },\n      filterTransaction: null,\n    };\n  },\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          [this.options.attributeName]: {\n            default: null,\n            parseHTML: (element) =>\n              element.getAttribute(`data-${this.options.attributeName}`),\n            renderHTML: (attributes) => {\n              const defaultIdAttributes = {\n                [`data-${this.options.attributeName}`]:\n                  attributes[this.options.attributeName],\n              };\n              if (this.options.setIdAttribute) {\n                return {\n                  ...defaultIdAttributes,\n                  id: attributes[this.options.attributeName],\n                };\n              } else {\n                return defaultIdAttributes;\n              }\n            },\n          },\n        },\n      },\n    ];\n  },\n  // check initial content for missing ids\n  // onCreate() {\n  //   // Donâ€™t do this when the collaboration extension is active\n  //   // because this may update the content, so Y.js tries to merge these changes.\n  //   // This leads to empty block nodes.\n  //   // See: https://github.com/ueberdosis/tiptap/issues/2400\n  //   if (\n  //     this.editor.extensionManager.extensions.find(\n  //       (extension) => extension.name === \"collaboration\"\n  //     )\n  //   ) {\n  //     return;\n  //   }\n  //   const { view, state } = this.editor;\n  //   const { tr, doc } = state;\n  //   const { types, attributeName, generateID } = this.options;\n  //   const nodesWithoutId = findChildren(doc, (node) => {\n  //     return (\n  //       types.includes(node.type.name) && node.attrs[attributeName] === null\n  //     );\n  //   });\n  //   nodesWithoutId.forEach(({ node, pos }) => {\n  //     tr.setNodeMarkup(pos, undefined, {\n  //       ...node.attrs,\n  //       [attributeName]: generateID(),\n  //     });\n  //   });\n  //   tr.setMeta(\"addToHistory\", false);\n  //   view.dispatch(tr);\n  // },\n  addProseMirrorPlugins() {\n    let dragSourceElement: any = null;\n    let transformPasted = false;\n    return [\n      new Plugin({\n        key: new PluginKey(\"uniqueID\"),\n        appendTransaction: (transactions, oldState, newState) => {\n          // console.log(\"appendTransaction\");\n          const docChanges =\n            transactions.some((transaction) => transaction.docChanged) &&\n            !oldState.doc.eq(newState.doc);\n          const filterTransactions =\n            this.options.filterTransaction &&\n            transactions.some((tr) => {\n              let _a, _b;\n              return !((_b = (_a = this.options).filterTransaction) === null ||\n              _b === void 0\n                ? void 0\n                : _b.call(_a, tr));\n            });\n          if (!docChanges || filterTransactions) {\n            return;\n          }\n          const { tr } = newState;\n          const { types, attributeName, generateID } = this.options;\n          const transform = combineTransactionSteps(\n            oldState.doc,\n            transactions as any,\n          );\n          const { mapping } = transform;\n          // get changed ranges based on the old state\n          const changes = getChangedRanges(transform);\n\n          changes.forEach(({ newRange }) => {\n            const newNodes = findChildrenInRange(\n              newState.doc,\n              newRange,\n              (node) => {\n                return types.includes(node.type.name);\n              },\n            );\n            const newIds = newNodes\n              .map(({ node }) => node.attrs[attributeName])\n              .filter((id) => id !== null);\n            const duplicatedNewIds = findDuplicates(newIds);\n            newNodes.forEach(({ node, pos }) => {\n              let _a;\n              // instead of checking `node.attrs[attributeName]` directly\n              // we look at the current state of the node within `tr.doc`.\n              // this helps to prevent adding new ids to the same node\n              // if the node changed multiple times within one transaction\n              const id =\n                (_a = tr.doc.nodeAt(pos)) === null || _a === void 0\n                  ? void 0\n                  : _a.attrs[attributeName];\n              if (id === null) {\n                // edge case, when using collaboration, yjs will set the id to null in `_forceRerender`\n                // when loading the editor\n                // this checks for this case and keeps it at initialBlockId so there will be no change\n                const initialDoc = oldState.doc.type.createAndFill()!.content;\n                const wasInitial =\n                  oldState.doc.content.findDiffStart(initialDoc) === null;\n\n                if (wasInitial) {\n                  // the old state was the \"initial content\"\n                  const jsonNode = JSON.parse(\n                    JSON.stringify(newState.doc.toJSON()),\n                  );\n                  jsonNode.content[0].content[0].attrs.id = \"initialBlockId\";\n                  // would the new state with the fix also be the \"initial content\"?\n                  if (\n                    JSON.stringify(jsonNode.content) ===\n                    JSON.stringify(initialDoc.toJSON())\n                  ) {\n                    // yes, apply the fix\n                    tr.setNodeMarkup(pos, undefined, {\n                      ...node.attrs,\n                      [attributeName]: \"initialBlockId\",\n                    });\n                    return;\n                  }\n                }\n\n                tr.setNodeMarkup(pos, undefined, {\n                  ...node.attrs,\n                  [attributeName]: generateID(),\n                });\n                return;\n              }\n              // check if the node doesnâ€™t exist in the old state\n              const { deleted } = mapping.invert().mapResult(pos);\n              const newNode = deleted && duplicatedNewIds.includes(id);\n              if (newNode) {\n                tr.setNodeMarkup(pos, undefined, {\n                  ...node.attrs,\n                  [attributeName]: generateID(),\n                });\n              }\n            });\n          });\n          if (!tr.steps.length) {\n            return;\n          }\n          return tr;\n        },\n        // we register a global drag handler to track the current drag source element\n        view(view) {\n          const handleDragstart = (event: any) => {\n            let _a;\n            dragSourceElement = (\n              (_a = view.dom.parentElement) === null || _a === void 0\n                ? void 0\n                : _a.contains(event.target)\n            )\n              ? view.dom.parentElement\n              : null;\n          };\n          window.addEventListener(\"dragstart\", handleDragstart);\n          return {\n            destroy() {\n              window.removeEventListener(\"dragstart\", handleDragstart);\n            },\n          };\n        },\n        props: {\n          // `handleDOMEvents` is called before `transformPasted` so we can do\n          // some checks before. However, `transformPasted` only runs when\n          // editor content is pasted - not external content.\n          handleDOMEvents: {\n            // only create new ids for dropped content while holding `alt`\n            // or content is dragged from another editor\n            drop: (view, event: any) => {\n              let _a;\n              if (\n                dragSourceElement !== view.dom.parentElement ||\n                ((_a = event.dataTransfer) === null || _a === void 0\n                  ? void 0\n                  : _a.effectAllowed) === \"copy\"\n              ) {\n                transformPasted = true;\n              } else {\n                transformPasted = false;\n              }\n\n              dragSourceElement = null;\n\n              return false;\n            },\n            // always create new ids on pasted content\n            paste: () => {\n              transformPasted = true;\n              return false;\n            },\n          },\n          // weâ€™ll remove ids for every pasted node\n          // so we can create a new one within `appendTransaction`\n          transformPasted: (slice) => {\n            if (!transformPasted) {\n              return slice;\n            }\n            const { types, attributeName } = this.options;\n            const removeId = (fragment: any) => {\n              const list: any[] = [];\n              fragment.forEach((node: any) => {\n                // donâ€™t touch text nodes\n                if (node.isText) {\n                  list.push(node);\n                  return;\n                }\n                // check for any other child nodes\n                if (!types.includes(node.type.name)) {\n                  list.push(node.copy(removeId(node.content)));\n                  return;\n                }\n                // remove id\n                const nodeWithoutId = node.type.create(\n                  {\n                    ...node.attrs,\n                    [attributeName]: null,\n                  },\n                  removeId(node.content),\n                  node.marks,\n                );\n                list.push(nodeWithoutId);\n              });\n              return Fragment.from(list);\n            };\n            // reset check\n            transformPasted = false;\n            return new Slice(\n              removeId(slice.content),\n              slice.openStart,\n              slice.openEnd,\n            );\n          },\n        },\n      }),\n    ];\n  },\n});\n\nexport { UniqueID as default, UniqueID };\n","import { Node } from \"@tiptap/core\";\nimport { PropSchema, Props } from \"../propTypes.js\";\nimport { StyleSchema, Styles } from \"../styles/types.js\";\n\nexport type CustomInlineContentConfig = {\n  type: string;\n  content: \"styled\" | \"none\"; // | \"plain\"\n  draggable?: boolean;\n  readonly propSchema: PropSchema;\n  // content: \"inline\" | \"none\" | \"table\";\n};\n// InlineContentConfig contains the \"schema\" info about an InlineContent type\n// i.e. what props it supports, what content it supports, etc.\nexport type InlineContentConfig = CustomInlineContentConfig | \"text\" | \"link\";\n\n// InlineContentImplementation contains the \"implementation\" info about an InlineContent element\n// such as the functions / Nodes required to render and / or serialize it\n// @ts-ignore\nexport type InlineContentImplementation<T extends InlineContentConfig> =\n  T extends \"link\" | \"text\"\n    ? undefined\n    : {\n        node: Node;\n      };\n\nexport type InlineContentSchemaWithInlineContent<\n  IType extends string,\n  C extends InlineContentConfig,\n> = {\n  [k in IType]: C;\n};\n\n// Container for both the config and implementation of InlineContent,\n// and the type of `implementation` is based on that of the config\nexport type InlineContentSpec<T extends InlineContentConfig> = {\n  config: T;\n  implementation: InlineContentImplementation<T>;\n};\n\n// A Schema contains all the types (Configs) supported in an editor\n// The keys are the \"type\" of InlineContent elements\nexport type InlineContentSchema = Record<string, InlineContentConfig>;\n\nexport type InlineContentSpecs = {\n  text: { config: \"text\"; implementation: undefined };\n  link: { config: \"link\"; implementation: undefined };\n} & Record<string, InlineContentSpec<InlineContentConfig>>;\n\nexport type InlineContentSchemaFromSpecs<T extends InlineContentSpecs> = {\n  [K in keyof T]: T[K][\"config\"];\n};\n\nexport type CustomInlineContentFromConfig<\n  I extends CustomInlineContentConfig,\n  S extends StyleSchema,\n> = {\n  type: I[\"type\"];\n  props: Props<I[\"propSchema\"]>;\n  content: I[\"content\"] extends \"styled\"\n    ? StyledText<S>[]\n    : I[\"content\"] extends \"plain\"\n      ? string\n      : I[\"content\"] extends \"none\"\n        ? undefined\n        : never;\n};\n\nexport type InlineContentFromConfig<\n  I extends InlineContentConfig,\n  S extends StyleSchema,\n> = I extends \"text\"\n  ? StyledText<S>\n  : I extends \"link\"\n    ? Link<S>\n    : I extends CustomInlineContentConfig\n      ? CustomInlineContentFromConfig<I, S>\n      : never;\n\nexport type PartialCustomInlineContentFromConfig<\n  I extends CustomInlineContentConfig,\n  S extends StyleSchema,\n> = {\n  type: I[\"type\"];\n  props?: Props<I[\"propSchema\"]>;\n  content?: I[\"content\"] extends \"styled\"\n    ? StyledText<S>[] | string\n    : I[\"content\"] extends \"plain\"\n      ? string\n      : I[\"content\"] extends \"none\"\n        ? undefined\n        : never;\n};\n\nexport type PartialInlineContentFromConfig<\n  I extends InlineContentConfig,\n  S extends StyleSchema,\n> = I extends \"text\"\n  ? string | StyledText<S>\n  : I extends \"link\"\n    ? PartialLink<S>\n    : I extends CustomInlineContentConfig\n      ? PartialCustomInlineContentFromConfig<I, S>\n      : never;\n\nexport type StyledText<T extends StyleSchema> = {\n  type: \"text\";\n  text: string;\n  styles: Styles<T>;\n};\n\nexport type Link<T extends StyleSchema> = {\n  type: \"link\";\n  href: string;\n  content: StyledText<T>[];\n};\n\nexport type PartialLink<T extends StyleSchema> = Omit<Link<T>, \"content\"> & {\n  content: string | Link<T>[\"content\"];\n};\n\nexport type InlineContent<\n  I extends InlineContentSchema,\n  T extends StyleSchema,\n> = InlineContentFromConfig<I[keyof I], T>;\n\ntype PartialInlineContentElement<\n  I extends InlineContentSchema,\n  T extends StyleSchema,\n> = PartialInlineContentFromConfig<I[keyof I], T>;\n\nexport type PartialInlineContent<\n  I extends InlineContentSchema,\n  T extends StyleSchema,\n> = PartialInlineContentElement<I, T>[] | string;\n\nexport function isLinkInlineContent<T extends StyleSchema>(\n  content: InlineContent<any, T>,\n): content is Link<T> {\n  return content.type === \"link\";\n}\n\nexport function isPartialLinkInlineContent<T extends StyleSchema>(\n  content: PartialInlineContentElement<any, T>,\n): content is PartialLink<T> {\n  return typeof content !== \"string\" && content.type === \"link\";\n}\n\nexport function isStyledTextInlineContent<T extends StyleSchema>(\n  content: PartialInlineContentElement<any, T>,\n): content is StyledText<T> {\n  return typeof content !== \"string\" && content.type === \"text\";\n}\n","import type {\n  InlineContentSchema,\n  StyleSchema,\n  PartialInlineContent,\n  InlineContent,\n} from \"../schema\";\nimport { PartialTableCell, TableCell } from \"../schema/blocks/types.js\";\n\n/**\n * This will map a table cell to a TableCell object.\n * This is useful for when we want to get the full table cell object from a partial table cell.\n * It is guaranteed to return a new TableCell object.\n */\nexport function mapTableCell<\n  T extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  content:\n    | PartialInlineContent<T, S>\n    | PartialTableCell<T, S>\n    | TableCell<T, S>,\n): TableCell<T, S> {\n  return isTableCell(content)\n    ? { ...content }\n    : isPartialTableCell(content)\n      ? {\n          type: \"tableCell\",\n          content: ([] as InlineContent<T, S>[]).concat(content.content as any),\n          props: {\n            backgroundColor: content.props?.backgroundColor ?? \"default\",\n            textColor: content.props?.textColor ?? \"default\",\n            textAlignment: content.props?.textAlignment ?? \"left\",\n            colspan: content.props?.colspan ?? 1,\n            rowspan: content.props?.rowspan ?? 1,\n          },\n        }\n      : {\n          type: \"tableCell\",\n          content: ([] as InlineContent<T, S>[]).concat(content as any),\n          props: {\n            backgroundColor: \"default\",\n            textColor: \"default\",\n            textAlignment: \"left\",\n            colspan: 1,\n            rowspan: 1,\n          },\n        };\n}\n\nexport function isPartialTableCell<\n  T extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  content:\n    | TableCell<T, S>\n    | PartialInlineContent<T, S>\n    | PartialTableCell<T, S>\n    | undefined\n    | null,\n): content is PartialTableCell<T, S> {\n  return (\n    content !== undefined &&\n    content !== null &&\n    typeof content !== \"string\" &&\n    !Array.isArray(content) &&\n    content.type === \"tableCell\"\n  );\n}\n\nexport function isTableCell<\n  T extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  content:\n    | TableCell<T, S>\n    | PartialInlineContent<T, S>\n    | PartialTableCell<T, S>\n    | undefined\n    | null,\n): content is TableCell<T, S> {\n  return (\n    isPartialTableCell(content) &&\n    content.props !== undefined &&\n    content.content !== undefined\n  );\n}\n\nexport function getColspan(\n  cell:\n    | TableCell<any, any>\n    | PartialTableCell<any, any>\n    | PartialInlineContent<any, any>,\n): number {\n  if (isTableCell(cell)) {\n    return cell.props.colspan ?? 1;\n  }\n  return 1;\n}\n\nexport function getRowspan(\n  cell:\n    | TableCell<any, any>\n    | PartialTableCell<any, any>\n    | PartialInlineContent<any, any>,\n): number {\n  if (isTableCell(cell)) {\n    return cell.props.rowspan ?? 1;\n  }\n  return 1;\n}\n","export class UnreachableCaseError extends Error {\n  constructor(val: never) {\n    super(`Unreachable case: ${val}`);\n  }\n}\n\nexport function assertEmpty(obj: Record<string, never>, throwError = true) {\n  const { \"data-test\": dataTest, ...rest } = obj; // exclude data-test\n\n  if (Object.keys(rest).length > 0 && throwError) {\n    throw new Error(\"Object must be empty \" + JSON.stringify(obj));\n  }\n}\n\n// TODO: change for built-in version of typescript 5.4 after upgrade\nexport type NoInfer<T> = [T][T extends any ? 0 : never];\n","export const isAppleOS = () =>\n  typeof navigator !== \"undefined\" &&\n  (/Mac/.test(navigator.platform) ||\n    (/AppleWebKit/.test(navigator.userAgent) &&\n      /Mobile\\/\\w+/.test(navigator.userAgent)));\n\nexport function formatKeyboardShortcut(shortcut: string, ctrlText = \"Ctrl\") {\n  if (isAppleOS()) {\n    return shortcut.replace(\"Mod\", \"âŒ˜\");\n  } else {\n    return shortcut.replace(\"Mod\", ctrlText);\n  }\n}\n\nexport function mergeCSSClasses(...classes: (string | false | undefined)[]) {\n  return [\n    // Converts to & from set to remove duplicates.\n    ...new Set(\n      classes\n        .filter((c) => c)\n        // Ensures that if multiple classes are passed as a single string, they\n        // are split.\n        .join(\" \")\n        .split(\" \"),\n    ),\n  ].join(\" \");\n}\n\nexport const isSafari = () =>\n  /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n","import { blockToNode } from \"../api/nodeConversions/blockToNode.js\";\nimport type { BlockNoteEditor } from \"../editor/BlockNoteEditor.js\";\nimport type {\n  BlockNoDefaults,\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../schema/index.js\";\nimport { mergeCSSClasses } from \"../util/browser.js\";\n\n// Function that creates a ProseMirror `DOMOutputSpec` for a default block.\n// Since all default blocks have the same structure (`blockContent` div with a\n// `inlineContent` element inside), this function only needs the block's name\n// for the `data-content-type` attribute of the `blockContent` element and the\n// HTML tag of the `inlineContent` element, as well as any HTML attributes to\n// add to those.\nexport function createDefaultBlockDOMOutputSpec(\n  blockName: string,\n  htmlTag: string,\n  blockContentHTMLAttributes: Record<string, string>,\n  inlineContentHTMLAttributes: Record<string, string>,\n) {\n  const blockContent = document.createElement(\"div\");\n  blockContent.className = mergeCSSClasses(\n    \"bn-block-content\",\n    blockContentHTMLAttributes.class,\n  );\n  blockContent.setAttribute(\"data-content-type\", blockName);\n  for (const [attribute, value] of Object.entries(blockContentHTMLAttributes)) {\n    if (attribute !== \"class\") {\n      blockContent.setAttribute(attribute, value);\n    }\n  }\n\n  const inlineContent = document.createElement(htmlTag);\n  inlineContent.className = mergeCSSClasses(\n    \"bn-inline-content\",\n    inlineContentHTMLAttributes.class,\n  );\n  for (const [attribute, value] of Object.entries(\n    inlineContentHTMLAttributes,\n  )) {\n    if (attribute !== \"class\") {\n      inlineContent.setAttribute(attribute, value);\n    }\n  }\n\n  blockContent.appendChild(inlineContent);\n\n  return {\n    dom: blockContent,\n    contentDOM: inlineContent,\n  };\n}\n\n// Function used to convert default blocks to HTML. It uses the corresponding\n// node's `renderHTML` method to do the conversion by using a default\n// `DOMSerializer`.\nexport const defaultBlockToHTML = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  block: BlockNoDefaults<BSchema, I, S>,\n  editor: BlockNoteEditor<BSchema, I, S>,\n): {\n  dom: HTMLElement;\n  contentDOM?: HTMLElement;\n} => {\n  let node = blockToNode(block, editor.pmSchema);\n\n  if (node.type.name === \"blockContainer\") {\n    // for regular blocks, get the toDOM spec from the blockContent node\n    node = node.firstChild!;\n  }\n\n  const toDOM = editor.pmSchema.nodes[node.type.name].spec.toDOM;\n\n  if (toDOM === undefined) {\n    throw new Error(\n      \"This block has no default HTML serialization as its corresponding TipTap node doesn't implement `renderHTML`.\",\n    );\n  }\n\n  const renderSpec = toDOM(node);\n\n  if (typeof renderSpec !== \"object\" || !(\"dom\" in renderSpec)) {\n    throw new Error(\n      \"Cannot use this block's default HTML serialization as its corresponding TipTap node's `renderHTML` function does not return an object with the `dom` property.\",\n    );\n  }\n\n  return renderSpec as {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n  };\n};\n\n// Function that merges all paragraphs into a single one separated by line breaks.\n// This is used when parsing blocks like list items and table cells, as they may\n// contain multiple paragraphs that ProseMirror will not be able to handle\n// properly.\nexport function mergeParagraphs(element: HTMLElement) {\n  const paragraphs = element.querySelectorAll(\"p\");\n  if (paragraphs.length > 1) {\n    const firstParagraph = paragraphs[0];\n    for (let i = 1; i < paragraphs.length; i++) {\n      const paragraph = paragraphs[i];\n      firstParagraph.innerHTML += \"<br>\" + paragraph.innerHTML;\n      paragraph.remove();\n    }\n  }\n}\n","import type { Props, PropSchema } from \"../schema/index.js\";\n\n// TODO: this system should probably be moved / refactored.\n// The dependency from schema on this file doesn't make sense\n\nexport const defaultProps = {\n  backgroundColor: {\n    default: \"default\" as const,\n  },\n  textColor: {\n    default: \"default\" as const,\n  },\n  textAlignment: {\n    default: \"left\" as const,\n    values: [\"left\", \"center\", \"right\", \"justify\"] as const,\n  },\n} satisfies PropSchema;\n\nexport type DefaultProps = Props<typeof defaultProps>;\n\n// Default props which are set on `blockContainer` nodes rather than\n// `blockContent` nodes. Ensures that they are not redundantly added to\n// a custom block's TipTap node attributes.\nexport const inheritedProps = [\"backgroundColor\", \"textColor\"];\n","export function camelToDataKebab(str: string): string {\n  return \"data-\" + str.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\n\nexport function filenameFromURL(url: string): string {\n  const parts = url.split(\"/\");\n  if (\n    !parts.length || // invalid?\n    parts[parts.length - 1] === \"\" // for example, URL ends in a directory-like trailing slash\n  ) {\n    // in this case just return the original url\n    return url;\n  }\n  return parts[parts.length - 1];\n}\n","import {\n  Attribute,\n  Attributes,\n  Editor,\n  Extension,\n  Node,\n  NodeConfig,\n} from \"@tiptap/core\";\nimport { defaultBlockToHTML } from \"../../blocks/defaultBlockHelpers.js\";\nimport { inheritedProps } from \"../../blocks/defaultProps.js\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { mergeCSSClasses } from \"../../util/browser.js\";\nimport { camelToDataKebab } from \"../../util/string.js\";\nimport { InlineContentSchema } from \"../inlineContent/types.js\";\nimport { PropSchema, Props } from \"../propTypes.js\";\nimport { StyleSchema } from \"../styles/types.js\";\nimport {\n  BlockConfig,\n  BlockSchemaFromSpecs,\n  BlockSchemaWithBlock,\n  BlockSpec,\n  BlockSpecs,\n  SpecificBlock,\n  TiptapBlockImplementation,\n} from \"./types.js\";\n\n// Function that uses the 'propSchema' of a blockConfig to create a TipTap\n// node's `addAttributes` property.\n// TODO: extract function\nexport function propsToAttributes(propSchema: PropSchema): Attributes {\n  const tiptapAttributes: Record<string, Attribute> = {};\n\n  Object.entries(propSchema)\n    .filter(([name, _spec]) => !inheritedProps.includes(name))\n    .forEach(([name, spec]) => {\n      tiptapAttributes[name] = {\n        default: spec.default,\n        keepOnSplit: true,\n        // Props are displayed in kebab-case as HTML attributes. If a prop's\n        // value is the same as its default, we don't display an HTML\n        // attribute for it.\n        parseHTML: (element) => {\n          const value = element.getAttribute(camelToDataKebab(name));\n\n          if (value === null) {\n            return null;\n          }\n\n          if (\n            (spec.default === undefined && spec.type === \"boolean\") ||\n            (spec.default !== undefined && typeof spec.default === \"boolean\")\n          ) {\n            if (value === \"true\") {\n              return true;\n            }\n\n            if (value === \"false\") {\n              return false;\n            }\n\n            return null;\n          }\n\n          if (\n            (spec.default === undefined && spec.type === \"number\") ||\n            (spec.default !== undefined && typeof spec.default === \"number\")\n          ) {\n            const asNumber = parseFloat(value);\n            const isNumeric =\n              !Number.isNaN(asNumber) && Number.isFinite(asNumber);\n\n            if (isNumeric) {\n              return asNumber;\n            }\n\n            return null;\n          }\n\n          return value;\n        },\n        renderHTML: (attributes) => {\n          // don't render to html if the value is the same as the default\n          return attributes[name] !== spec.default\n            ? {\n                [camelToDataKebab(name)]: attributes[name],\n              }\n            : {};\n        },\n      };\n    });\n\n  return tiptapAttributes;\n}\n\n// Used to figure out which block should be rendered. This block is then used to\n// create the node view.\nexport function getBlockFromPos<\n  BType extends string,\n  Config extends BlockConfig,\n  BSchema extends BlockSchemaWithBlock<BType, Config>,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  getPos: (() => number) | boolean,\n  editor: BlockNoteEditor<BSchema, I, S>,\n  tipTapEditor: Editor,\n  type: BType,\n) {\n  // Gets position of the node\n  if (typeof getPos === \"boolean\") {\n    throw new Error(\n      \"Cannot find node position as getPos is a boolean, not a function.\",\n    );\n  }\n  const pos = getPos();\n  // Gets parent blockContainer node\n  const blockContainer = tipTapEditor.state.doc.resolve(pos!).node();\n  // Gets block identifier\n  const blockIdentifier = blockContainer.attrs.id;\n\n  if (!blockIdentifier) {\n    throw new Error(\"Block doesn't have id\");\n  }\n\n  // Gets the block\n  const block = editor.getBlock(blockIdentifier)! as SpecificBlock<\n    BSchema,\n    BType,\n    I,\n    S\n  >;\n  if (block.type !== type) {\n    throw new Error(\"Block type does not match\");\n  }\n\n  return block;\n}\n\n// Function that wraps the `dom` element returned from 'blockConfig.render' in a\n// `blockContent` div, which contains the block type and props as HTML\n// attributes. If `blockConfig.render` also returns a `contentDOM`, it also adds\n// an `inlineContent` class to it.\nexport function wrapInBlockStructure<\n  BType extends string,\n  PSchema extends PropSchema,\n>(\n  element: {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n    destroy?: () => void;\n  },\n  blockType: BType,\n  blockProps: Props<PSchema>,\n  propSchema: PSchema,\n  isFileBlock = false,\n  domAttributes?: Record<string, string>,\n): {\n  dom: HTMLElement;\n  contentDOM?: HTMLElement;\n  destroy?: () => void;\n} {\n  // Creates `blockContent` element\n  const blockContent = document.createElement(\"div\");\n\n  // Adds custom HTML attributes\n  if (domAttributes !== undefined) {\n    for (const [attr, value] of Object.entries(domAttributes)) {\n      if (attr !== \"class\") {\n        blockContent.setAttribute(attr, value);\n      }\n    }\n  }\n  // Sets blockContent class\n  blockContent.className = mergeCSSClasses(\n    \"bn-block-content\",\n    domAttributes?.class || \"\",\n  );\n  // Sets content type attribute\n  blockContent.setAttribute(\"data-content-type\", blockType);\n  // Adds props as HTML attributes in kebab-case with \"data-\" prefix. Skips props\n  // which are already added as HTML attributes to the parent `blockContent`\n  // element (inheritedProps) and props set to their default values.\n  for (const [prop, value] of Object.entries(blockProps)) {\n    const spec = propSchema[prop];\n    const defaultValue = spec.default;\n    if (!inheritedProps.includes(prop) && value !== defaultValue) {\n      blockContent.setAttribute(camelToDataKebab(prop), value);\n    }\n  }\n  // Adds file block attribute\n  if (isFileBlock) {\n    blockContent.setAttribute(\"data-file-block\", \"\");\n  }\n\n  blockContent.appendChild(element.dom);\n\n  if (element.contentDOM !== undefined) {\n    element.contentDOM.className = mergeCSSClasses(\n      \"bn-inline-content\",\n      element.contentDOM.className,\n    );\n  }\n\n  return {\n    ...element,\n    dom: blockContent,\n  };\n}\n\n// Helper type to keep track of the `name` and `content` properties after calling Node.create.\ntype StronglyTypedTipTapNode<\n  Name extends string,\n  Content extends\n    | \"inline*\"\n    | \"tableRow+\"\n    | \"blockContainer+\"\n    | \"column column+\"\n    | \"\",\n> = Node & { name: Name; config: { content: Content } };\n\nexport function createStronglyTypedTiptapNode<\n  Name extends string,\n  Content extends\n    | \"inline*\"\n    | \"tableRow+\"\n    | \"blockContainer+\"\n    | \"column column+\"\n    | \"\",\n>(config: NodeConfig & { name: Name; content: Content }) {\n  return Node.create(config) as StronglyTypedTipTapNode<Name, Content>; // force re-typing (should be safe as it's type-checked from the config)\n}\n\n// This helper function helps to instantiate a blockspec with a\n// config and implementation that conform to the type of Config\nexport function createInternalBlockSpec<T extends BlockConfig>(\n  config: T,\n  implementation: TiptapBlockImplementation<\n    T,\n    any,\n    InlineContentSchema,\n    StyleSchema\n  >,\n) {\n  return {\n    config,\n    implementation,\n  } satisfies BlockSpec<T, any, InlineContentSchema, StyleSchema>;\n}\n\nexport function createBlockSpecFromStronglyTypedTiptapNode<\n  T extends Node,\n  P extends PropSchema,\n>(node: T, propSchema: P, requiredExtensions?: Array<Extension | Node>) {\n  return createInternalBlockSpec(\n    {\n      type: node.name as T[\"name\"],\n      content: (node.config.content === \"inline*\"\n        ? \"inline\"\n        : node.config.content === \"tableRow+\"\n          ? \"table\"\n          : \"none\") as T[\"config\"][\"content\"] extends \"inline*\"\n        ? \"inline\"\n        : T[\"config\"][\"content\"] extends \"tableRow+\"\n          ? \"table\"\n          : \"none\",\n      propSchema,\n    },\n    {\n      node,\n      requiredExtensions,\n      toInternalHTML: defaultBlockToHTML,\n      toExternalHTML: defaultBlockToHTML,\n      // parse: () => undefined, // parse rules are in node already\n    },\n  );\n}\n\nexport function getBlockSchemaFromSpecs<T extends BlockSpecs>(specs: T) {\n  return Object.fromEntries(\n    Object.entries(specs).map(([key, value]) => [key, value.config]),\n  ) as BlockSchemaFromSpecs<T>;\n}\n","import { Editor } from \"@tiptap/core\";\nimport { TagParseRule } from \"@tiptap/pm/model\";\nimport { NodeView, ViewMutationRecord } from \"@tiptap/pm/view\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { InlineContentSchema } from \"../inlineContent/types.js\";\nimport { StyleSchema } from \"../styles/types.js\";\nimport {\n  createInternalBlockSpec,\n  createStronglyTypedTiptapNode,\n  getBlockFromPos,\n  propsToAttributes,\n  wrapInBlockStructure,\n} from \"./internal.js\";\nimport {\n  BlockConfig,\n  BlockFromConfig,\n  BlockSchemaWithBlock,\n  PartialBlockFromConfig,\n} from \"./types.js\";\n\n// restrict content to \"inline\" and \"none\" only\nexport type CustomBlockConfig = BlockConfig & {\n  content: \"inline\" | \"none\";\n};\n\nexport type CustomBlockImplementation<\n  T extends CustomBlockConfig,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> = {\n  render: (\n    /**\n     * The custom block to render\n     */\n    block: BlockFromConfig<T, I, S>,\n    /**\n     * The BlockNote editor instance\n     * This is typed generically. If you want an editor with your custom schema, you need to\n     * cast it manually, e.g.: `const e = editor as BlockNoteEditor<typeof mySchema>;`\n     */\n    editor: BlockNoteEditor<BlockSchemaWithBlock<T[\"type\"], T>, I, S>,\n    // (note) if we want to fix the manual cast, we need to prevent circular references and separate block definition and render implementations\n    // or allow manually passing <BSchema>, but that's not possible without passing the other generics because Typescript doesn't support partial inferred generics\n  ) => {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n    ignoreMutation?: (mutation: ViewMutationRecord) => boolean;\n    destroy?: () => void;\n  };\n  // Exports block to external HTML. If not defined, the output will be the same\n  // as `render(...).dom`. Used to create clipboard data when pasting outside\n  // BlockNote.\n  // TODO: Maybe can return undefined to ignore when serializing?\n  toExternalHTML?: (\n    block: BlockFromConfig<T, I, S>,\n    editor: BlockNoteEditor<BlockSchemaWithBlock<T[\"type\"], T>, I, S>,\n  ) => {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n  };\n\n  parse?: (\n    el: HTMLElement,\n  ) => PartialBlockFromConfig<T, I, S>[\"props\"] | undefined;\n};\n\n// Function that causes events within non-selectable blocks to be handled by the\n// browser instead of the editor.\nexport function applyNonSelectableBlockFix(nodeView: NodeView, editor: Editor) {\n  nodeView.stopEvent = (event) => {\n    // Blurs the editor on mouse down as the block is non-selectable. This is\n    // mainly done to prevent UI elements like the formatting toolbar from being\n    // visible while content within a non-selectable block is selected.\n    if (event.type === \"mousedown\") {\n      setTimeout(() => {\n        editor.view.dom.blur();\n      }, 10);\n    }\n\n    return true;\n  };\n}\n\n// Function that uses the 'parse' function of a blockConfig to create a\n// TipTap node's `parseHTML` property. This is only used for parsing content\n// from the clipboard.\nexport function getParseRules(\n  config: BlockConfig,\n  customParseFunction: CustomBlockImplementation<any, any, any>[\"parse\"],\n) {\n  const rules: TagParseRule[] = [\n    {\n      tag: \"[data-content-type=\" + config.type + \"]\",\n      contentElement: \".bn-inline-content\",\n    },\n  ];\n\n  if (customParseFunction) {\n    rules.push({\n      tag: \"*\",\n      getAttrs(node: string | HTMLElement) {\n        if (typeof node === \"string\") {\n          return false;\n        }\n\n        const props = customParseFunction?.(node);\n\n        if (props === undefined) {\n          return false;\n        }\n\n        return props;\n      },\n    });\n  }\n  //     getContent(node, schema) {\n  //       const block = blockConfig.parse?.(node as HTMLElement);\n  //\n  //       if (block !== undefined && block.content !== undefined) {\n  //         return Fragment.from(\n  //           typeof block.content === \"string\"\n  //             ? schema.text(block.content)\n  //             : inlineContentToNodes(block.content, schema)\n  //         );\n  //       }\n  //\n  //       return Fragment.empty;\n  //     },\n  //   });\n  // }\n\n  return rules;\n}\n\n// A function to create custom block for API consumers\n// we want to hide the tiptap node from API consumers and provide a simpler API surface instead\nexport function createBlockSpec<\n  T extends CustomBlockConfig,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  blockConfig: T,\n  blockImplementation: CustomBlockImplementation<NoInfer<T>, I, S>,\n) {\n  const node = createStronglyTypedTiptapNode({\n    name: blockConfig.type as T[\"type\"],\n    content: (blockConfig.content === \"inline\"\n      ? \"inline*\"\n      : \"\") as T[\"content\"] extends \"inline\" ? \"inline*\" : \"\",\n    group: \"blockContent\",\n    selectable: blockConfig.isSelectable ?? true,\n    isolating: true,\n    addAttributes() {\n      return propsToAttributes(blockConfig.propSchema);\n    },\n\n    parseHTML() {\n      return getParseRules(blockConfig, blockImplementation.parse);\n    },\n\n    renderHTML({ HTMLAttributes }) {\n      // renderHTML is used for copy/pasting content from the editor back into\n      // the editor, so we need to make sure the `blockContent` element is\n      // structured correctly as this is what's used for parsing blocks. We\n      // just render a placeholder div inside as the `blockContent` element\n      // already has all the information needed for proper parsing.\n      const div = document.createElement(\"div\");\n      return wrapInBlockStructure(\n        {\n          dom: div,\n          contentDOM: blockConfig.content === \"inline\" ? div : undefined,\n        },\n        blockConfig.type,\n        {},\n        blockConfig.propSchema,\n        blockConfig.isFileBlock,\n        HTMLAttributes,\n      );\n    },\n\n    addNodeView() {\n      return ({ getPos }) => {\n        // Gets the BlockNote editor instance\n        const editor = this.options.editor;\n        // Gets the block\n        const block = getBlockFromPos(\n          getPos,\n          editor,\n          this.editor,\n          blockConfig.type,\n        );\n        // Gets the custom HTML attributes for `blockContent` nodes\n        const blockContentDOMAttributes =\n          this.options.domAttributes?.blockContent || {};\n\n        const output = blockImplementation.render(block as any, editor);\n\n        const nodeView: NodeView = wrapInBlockStructure(\n          output,\n          block.type,\n          block.props,\n          blockConfig.propSchema,\n          blockConfig.isFileBlock,\n          blockContentDOMAttributes,\n        );\n\n        if (blockConfig.isSelectable === false) {\n          applyNonSelectableBlockFix(nodeView, this.editor);\n        }\n\n        return nodeView;\n      };\n    },\n  });\n\n  if (node.name !== blockConfig.type) {\n    throw new Error(\n      \"Node name does not match block type. This is a bug in BlockNote.\",\n    );\n  }\n\n  return createInternalBlockSpec(blockConfig, {\n    node,\n    toInternalHTML: (block, editor) => {\n      const blockContentDOMAttributes =\n        node.options.domAttributes?.blockContent || {};\n\n      const output = blockImplementation.render(block as any, editor as any);\n\n      return wrapInBlockStructure(\n        output,\n        block.type,\n        block.props,\n        blockConfig.propSchema,\n        blockConfig.isFileBlock,\n        blockContentDOMAttributes,\n      );\n    },\n    // TODO: this should not have wrapInBlockStructure and generally be a lot simpler\n    // post-processing in externalHTMLExporter should not be necessary\n    toExternalHTML: (block, editor) => {\n      const blockContentDOMAttributes =\n        node.options.domAttributes?.blockContent || {};\n\n      let output = blockImplementation.toExternalHTML?.(\n        block as any,\n        editor as any,\n      );\n      if (output === undefined) {\n        output = blockImplementation.render(block as any, editor as any);\n      }\n      return wrapInBlockStructure(\n        output,\n        block.type,\n        block.props,\n        blockConfig.propSchema,\n        blockContentDOMAttributes,\n      );\n    },\n  });\n}\n","import { Node, ResolvedPos } from \"prosemirror-model\";\nimport { EditorState, Transaction } from \"prosemirror-state\";\n\ntype SingleBlockInfo = {\n  node: Node;\n  beforePos: number;\n  afterPos: number;\n};\n\nexport type BlockInfo = {\n  /**\n   * The outer node that represents a BlockNote block. This is the node that has the ID.\n   * Most of the time, this will be a blockContainer node, but it could also be a Column or ColumnList\n   */\n  bnBlock: SingleBlockInfo;\n  /**\n   * The type of BlockNote block that this node represents.\n   * When dealing with a blockContainer, this is retrieved from the blockContent node, otherwise it's retrieved from the bnBlock node.\n   */\n  blockNoteType: string;\n} & (\n  | {\n      // In case we're not dealing with a BlockContainer, we're dealing with a \"wrapper node\" (like a Column or ColumnList), so it will always have children\n\n      /**\n       * The Prosemirror node that holds block.children. For non-blockContainer, this node will be the same as bnBlock.\n       */\n      childContainer: SingleBlockInfo;\n      isBlockContainer: false;\n    }\n  | {\n      /**\n       * The Prosemirror node that holds block.children. For blockContainers, this is the blockGroup node, if it exists.\n       */\n      childContainer?: SingleBlockInfo;\n      /**\n       * The Prosemirror node that wraps block.content and has most of the props\n       */\n      blockContent: SingleBlockInfo;\n      /**\n       * Whether bnBlock is a blockContainer node\n       */\n      isBlockContainer: true;\n    }\n);\n\n/**\n * Retrieves the position just before the nearest block node in a ProseMirror\n * doc, relative to a position. If the position is within a block node or its\n * descendants, the position just before it is returned. If the position is not\n * within a block node or its descendants, the position just before the next\n * closest block node is returned. If the position is beyond the last block, the\n * position just before the last block is returned.\n * @param doc The ProseMirror doc.\n * @param pos An integer position in the document.\n * @returns The position just before the nearest blockContainer node.\n */\nexport function getNearestBlockPos(doc: Node, pos: number) {\n  const $pos = doc.resolve(pos);\n\n  // Checks if the position provided is already just before a block node, in\n  // which case we return the position.\n  if ($pos.nodeAfter && $pos.nodeAfter.type.isInGroup(\"bnBlock\")) {\n    return {\n      posBeforeNode: $pos.pos,\n      node: $pos.nodeAfter,\n    };\n  }\n\n  // Checks the node containing the position and its ancestors until a\n  // block node is found and returned.\n  let depth = $pos.depth;\n  let node = $pos.node(depth);\n  while (depth > 0) {\n    if (node.type.isInGroup(\"bnBlock\")) {\n      return {\n        posBeforeNode: $pos.before(depth),\n        node: node,\n      };\n    }\n\n    depth--;\n    node = $pos.node(depth);\n  }\n\n  // If the position doesn't lie within a block node, we instead find the\n  // position of the next closest one. If the position is beyond the last block,\n  // we return the position of the last block. While running `doc.descendants`\n  // is expensive, this case should be very rarely triggered. However, it's\n  // possible for the position to sometimes be beyond the last block node. This\n  // is a problem specifically when using the collaboration plugin.\n  const allBlockContainerPositions: number[] = [];\n  doc.descendants((node, pos) => {\n    if (node.type.isInGroup(\"bnBlock\")) {\n      allBlockContainerPositions.push(pos);\n    }\n  });\n\n  // eslint-disable-next-line no-console\n  console.warn(`Position ${pos} is not within a blockContainer node.`);\n\n  const resolvedPos = doc.resolve(\n    allBlockContainerPositions.find((position) => position >= pos) ||\n      allBlockContainerPositions[allBlockContainerPositions.length - 1],\n  );\n  return {\n    posBeforeNode: resolvedPos.pos,\n    node: resolvedPos.nodeAfter!,\n  };\n}\n\n/**\n * Gets information regarding the ProseMirror nodes that make up a block in a\n * BlockNote document. This includes the main `blockContainer` node, the\n * `blockContent` node with the block's main body, and the optional `blockGroup`\n * node which contains the block's children. As well as the nodes, also returns\n * the ProseMirror positions just before & after each node.\n * @param node The main `blockContainer` node that the block information should\n * be retrieved from,\n * @param bnBlockBeforePosOffset the position just before the\n * `blockContainer` node in the document.\n */\nexport function getBlockInfoWithManualOffset(\n  node: Node,\n  bnBlockBeforePosOffset: number,\n): BlockInfo {\n  if (!node.type.isInGroup(\"bnBlock\")) {\n    throw new Error(\n      `Attempted to get bnBlock node at position but found node of different type ${node.type.name}`,\n    );\n  }\n\n  const bnBlockNode = node;\n  const bnBlockBeforePos = bnBlockBeforePosOffset;\n  const bnBlockAfterPos = bnBlockBeforePos + bnBlockNode.nodeSize;\n\n  const bnBlock: SingleBlockInfo = {\n    node: bnBlockNode,\n    beforePos: bnBlockBeforePos,\n    afterPos: bnBlockAfterPos,\n  };\n\n  if (bnBlockNode.type.name === \"blockContainer\") {\n    let blockContent: SingleBlockInfo | undefined;\n    let blockGroup: SingleBlockInfo | undefined;\n\n    bnBlockNode.forEach((node, offset) => {\n      if (node.type.spec.group === \"blockContent\") {\n        // console.log(beforePos, offset);\n        const blockContentNode = node;\n        const blockContentBeforePos = bnBlockBeforePos + offset + 1;\n        const blockContentAfterPos = blockContentBeforePos + node.nodeSize;\n\n        blockContent = {\n          node: blockContentNode,\n          beforePos: blockContentBeforePos,\n          afterPos: blockContentAfterPos,\n        };\n      } else if (node.type.name === \"blockGroup\") {\n        const blockGroupNode = node;\n        const blockGroupBeforePos = bnBlockBeforePos + offset + 1;\n        const blockGroupAfterPos = blockGroupBeforePos + node.nodeSize;\n\n        blockGroup = {\n          node: blockGroupNode,\n          beforePos: blockGroupBeforePos,\n          afterPos: blockGroupAfterPos,\n        };\n      }\n    });\n\n    if (!blockContent) {\n      throw new Error(\n        `blockContainer node does not contain a blockContent node in its children: ${bnBlockNode}`,\n      );\n    }\n\n    return {\n      isBlockContainer: true,\n      bnBlock,\n      blockContent,\n      childContainer: blockGroup,\n      blockNoteType: blockContent.node.type.name,\n    };\n  } else {\n    if (!bnBlock.node.type.isInGroup(\"childContainer\")) {\n      throw new Error(\n        `bnBlock node is not in the childContainer group: ${bnBlock.node}`,\n      );\n    }\n\n    return {\n      isBlockContainer: false,\n      bnBlock: bnBlock,\n      childContainer: bnBlock,\n      blockNoteType: bnBlock.node.type.name,\n    };\n  }\n}\n\n/**\n * Gets information regarding the ProseMirror nodes that make up a block in a\n * BlockNote document. This includes the main `blockContainer` node, the\n * `blockContent` node with the block's main body, and the optional `blockGroup`\n * node which contains the block's children. As well as the nodes, also returns\n * the ProseMirror positions just before & after each node.\n * @param posInfo An object with the main `blockContainer` node that the block\n * information should be retrieved from, and the position just before it in the\n * document.\n */\nexport function getBlockInfo(posInfo: { posBeforeNode: number; node: Node }) {\n  return getBlockInfoWithManualOffset(posInfo.node, posInfo.posBeforeNode);\n}\n\n/**\n * Gets information regarding the ProseMirror nodes that make up a block from a\n * resolved position just before the `blockContainer` node in the document that\n * corresponds to it.\n * @param resolvedPos The resolved position just before the `blockContainer`\n * node.\n */\nexport function getBlockInfoFromResolvedPos(resolvedPos: ResolvedPos) {\n  if (!resolvedPos.nodeAfter) {\n    throw new Error(\n      `Attempted to get blockContainer node at position ${resolvedPos.pos} but a node at this position does not exist`,\n    );\n  }\n  return getBlockInfoWithManualOffset(resolvedPos.nodeAfter, resolvedPos.pos);\n}\n\n/**\n * Gets information regarding the ProseMirror nodes that make up a block. The\n * block chosen is the one currently containing the current ProseMirror\n * selection.\n * @param state The ProseMirror editor state.\n */\nexport function getBlockInfoFromSelection(state: EditorState) {\n  const posInfo = getNearestBlockPos(state.doc, state.selection.anchor);\n\n  return getBlockInfo(posInfo);\n}\n\n/**\n * Gets information regarding the ProseMirror nodes that make up a block. The\n * block chosen is the one currently containing the current ProseMirror\n * selection.\n * @param tr The ProseMirror transaction.\n */\nexport function getBlockInfoFromTransaction(tr: Transaction) {\n  const posInfo = getNearestBlockPos(tr.doc, tr.selection.anchor);\n\n  return getBlockInfo(posInfo);\n}\n","import type { Node, Schema } from \"prosemirror-model\";\nimport { Transform } from \"prosemirror-transform\";\nimport type { BlockNoteEditor } from \"../editor/BlockNoteEditor.js\";\nimport { BlockNoteSchema } from \"../editor/BlockNoteSchema.js\";\nimport type { BlockSchema } from \"../schema/blocks/types.js\";\nimport type { InlineContentSchema } from \"../schema/inlineContent/types.js\";\nimport type { StyleSchema } from \"../schema/styles/types.js\";\n\nexport function getPmSchema(trOrNode: Transform | Node) {\n  if (\"doc\" in trOrNode) {\n    return trOrNode.doc.type.schema;\n  }\n  return trOrNode.type.schema;\n}\n\nfunction getBlockNoteEditor<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(schema: Schema): BlockNoteEditor<BSchema, I, S> {\n  return schema.cached.blockNoteEditor as BlockNoteEditor<BSchema, I, S>;\n}\n\nexport function getBlockNoteSchema<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(schema: Schema): BlockNoteSchema<BSchema, I, S> {\n  return getBlockNoteEditor(schema).schema as unknown as BlockNoteSchema<\n    BSchema,\n    I,\n    S\n  >;\n}\n\nexport function getBlockSchema<BSchema extends BlockSchema>(\n  schema: Schema,\n): BSchema {\n  return getBlockNoteSchema(schema).blockSchema as BSchema;\n}\n\nexport function getInlineContentSchema<I extends InlineContentSchema>(\n  schema: Schema,\n): I {\n  return getBlockNoteSchema(schema).inlineContentSchema as I;\n}\n\nexport function getStyleSchema<S extends StyleSchema>(schema: Schema): S {\n  return getBlockNoteSchema(schema).styleSchema as S;\n}\n\nexport function getBlockCache(schema: Schema) {\n  return getBlockNoteEditor(schema).blockCache;\n}\n","import { Mark, Node, Schema, Slice } from \"@tiptap/pm/model\";\nimport type { Block } from \"../../blocks/defaultBlocks.js\";\nimport UniqueID from \"../../extensions/UniqueID/UniqueID.js\";\nimport type {\n  BlockSchema,\n  CustomInlineContentConfig,\n  CustomInlineContentFromConfig,\n  InlineContent,\n  InlineContentFromConfig,\n  InlineContentSchema,\n  StyleSchema,\n  Styles,\n  TableCell,\n  TableContent,\n} from \"../../schema/index.js\";\nimport {\n  isLinkInlineContent,\n  isStyledTextInlineContent,\n} from \"../../schema/inlineContent/types.js\";\nimport { UnreachableCaseError } from \"../../util/typescript.js\";\nimport { getBlockInfoWithManualOffset } from \"../getBlockInfoFromPos.js\";\nimport {\n  getBlockCache,\n  getBlockSchema,\n  getInlineContentSchema,\n  getStyleSchema,\n} from \"../pmUtil.js\";\n\n/**\n * Converts an internal (prosemirror) table node contentto a BlockNote Tablecontent\n */\nexport function contentNodeToTableContent<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(contentNode: Node, inlineContentSchema: I, styleSchema: S) {\n  const ret: TableContent<I, S> = {\n    type: \"tableContent\",\n    columnWidths: [],\n    headerRows: undefined,\n    headerCols: undefined,\n    rows: [],\n  };\n\n  /**\n   * A matrix of boolean values indicating whether a cell is a header.\n   * The first index is the row index, the second index is the cell index.\n   */\n  const headerMatrix: boolean[][] = [];\n\n  contentNode.content.forEach((rowNode, _offset, rowIndex) => {\n    const row: TableContent<I, S>[\"rows\"][0] = {\n      cells: [],\n    };\n\n    if (rowIndex === 0) {\n      rowNode.content.forEach((cellNode) => {\n        let colWidth = cellNode.attrs.colwidth as null | undefined | number[];\n        if (colWidth === undefined || colWidth === null) {\n          colWidth = new Array(cellNode.attrs.colspan ?? 1).fill(undefined);\n        }\n        ret.columnWidths.push(...colWidth);\n      });\n    }\n\n    row.cells = rowNode.content.content.map((cellNode, cellIndex) => {\n      if (!headerMatrix[rowIndex]) {\n        headerMatrix[rowIndex] = [];\n      }\n      // Mark the cell as a header if it is a tableHeader node.\n      headerMatrix[rowIndex][cellIndex] = cellNode.type.name === \"tableHeader\";\n      // Convert cell content to inline content and merge adjacent styled text nodes\n      const content = cellNode.content.content\n        .map((child) =>\n          contentNodeToInlineContent(child, inlineContentSchema, styleSchema),\n        )\n        // The reason that we merge this content is that we allow table cells to contain multiple tableParagraph nodes\n        // So that we can leverage prosemirror-tables native merging\n        // If the schema only allowed a single tableParagraph node, then the merging would not work and cause prosemirror to fit the content into a new cell\n        .reduce(\n          (acc, contentPartial) => {\n            if (!acc.length) {\n              return contentPartial;\n            }\n\n            const last = acc[acc.length - 1];\n            const first = contentPartial[0];\n\n            // Only merge if the last and first content are both styled text nodes and have the same styles\n            if (\n              first &&\n              isStyledTextInlineContent(last) &&\n              isStyledTextInlineContent(first) &&\n              JSON.stringify(last.styles) === JSON.stringify(first.styles)\n            ) {\n              // Join them together if they have the same styles\n              last.text += \"\\n\" + first.text;\n              acc.push(...contentPartial.slice(1));\n              return acc;\n            }\n            acc.push(...contentPartial);\n            return acc;\n          },\n          [] as InlineContent<I, S>[],\n        );\n\n      return {\n        type: \"tableCell\",\n        content,\n        props: {\n          colspan: cellNode.attrs.colspan,\n          rowspan: cellNode.attrs.rowspan,\n          backgroundColor: cellNode.attrs.backgroundColor,\n          textColor: cellNode.attrs.textColor,\n          textAlignment: cellNode.attrs.textAlignment,\n        },\n      } satisfies TableCell<I, S>;\n    });\n\n    ret.rows.push(row);\n  });\n\n  for (let i = 0; i < headerMatrix.length; i++) {\n    if (headerMatrix[i]?.every((isHeader) => isHeader)) {\n      ret.headerRows = (ret.headerRows ?? 0) + 1;\n    }\n  }\n\n  for (let i = 0; i < headerMatrix[0]?.length; i++) {\n    if (headerMatrix?.every((row) => row[i])) {\n      ret.headerCols = (ret.headerCols ?? 0) + 1;\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Converts an internal (prosemirror) content node to a BlockNote InlineContent array.\n */\nexport function contentNodeToInlineContent<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(contentNode: Node, inlineContentSchema: I, styleSchema: S) {\n  const content: InlineContent<any, S>[] = [];\n  let currentContent: InlineContent<any, S> | undefined = undefined;\n\n  // Most of the logic below is for handling links because in ProseMirror links are marks\n  // while in BlockNote links are a type of inline content\n  contentNode.content.forEach((node) => {\n    // hardBreak nodes do not have an InlineContent equivalent, instead we\n    // add a newline to the previous node.\n    if (node.type.name === \"hardBreak\") {\n      if (currentContent) {\n        // Current content exists.\n        if (isStyledTextInlineContent(currentContent)) {\n          // Current content is text.\n          currentContent.text += \"\\n\";\n        } else if (isLinkInlineContent(currentContent)) {\n          // Current content is a link.\n          currentContent.content[currentContent.content.length - 1].text +=\n            \"\\n\";\n        } else {\n          throw new Error(\"unexpected\");\n        }\n      } else {\n        // Current content does not exist.\n        currentContent = {\n          type: \"text\",\n          text: \"\\n\",\n          styles: {},\n        };\n      }\n\n      return;\n    }\n\n    if (node.type.name !== \"link\" && node.type.name !== \"text\") {\n      if (!inlineContentSchema[node.type.name]) {\n        // eslint-disable-next-line no-console\n        console.warn(\"unrecognized inline content type\", node.type.name);\n        return;\n      }\n      if (currentContent) {\n        content.push(currentContent);\n        currentContent = undefined;\n      }\n\n      content.push(\n        nodeToCustomInlineContent(node, inlineContentSchema, styleSchema),\n      );\n\n      return;\n    }\n\n    const styles: Styles<S> = {};\n    let linkMark: Mark | undefined;\n\n    for (const mark of node.marks) {\n      if (mark.type.name === \"link\") {\n        linkMark = mark;\n      } else {\n        const config = styleSchema[mark.type.name];\n        if (!config) {\n          if (mark.type.spec.blocknoteIgnore) {\n            // at this point, we don't want to show certain marks (such as comments)\n            // in the BlockNote JSON output. These marks should be tagged with \"blocknoteIgnore\" in the spec\n            continue;\n          }\n          throw new Error(`style ${mark.type.name} not found in styleSchema`);\n        }\n        if (config.propSchema === \"boolean\") {\n          (styles as any)[config.type] = true;\n        } else if (config.propSchema === \"string\") {\n          (styles as any)[config.type] = mark.attrs.stringValue;\n        } else {\n          throw new UnreachableCaseError(config.propSchema);\n        }\n      }\n    }\n\n    // Parsing links and text.\n    // Current content exists.\n    if (currentContent) {\n      // Current content is text.\n      if (isStyledTextInlineContent(currentContent)) {\n        if (!linkMark) {\n          // Node is text (same type as current content).\n          if (\n            JSON.stringify(currentContent.styles) === JSON.stringify(styles)\n          ) {\n            // Styles are the same.\n            currentContent.text += node.textContent;\n          } else {\n            // Styles are different.\n            content.push(currentContent);\n            currentContent = {\n              type: \"text\",\n              text: node.textContent,\n              styles,\n            };\n          }\n        } else {\n          // Node is a link (different type to current content).\n          content.push(currentContent);\n          currentContent = {\n            type: \"link\",\n            href: linkMark.attrs.href,\n            content: [\n              {\n                type: \"text\",\n                text: node.textContent,\n                styles,\n              },\n            ],\n          };\n        }\n      } else if (isLinkInlineContent(currentContent)) {\n        // Current content is a link.\n        if (linkMark) {\n          // Node is a link (same type as current content).\n          // Link URLs are the same.\n          if (currentContent.href === linkMark.attrs.href) {\n            // Styles are the same.\n            if (\n              JSON.stringify(\n                currentContent.content[currentContent.content.length - 1]\n                  .styles,\n              ) === JSON.stringify(styles)\n            ) {\n              currentContent.content[currentContent.content.length - 1].text +=\n                node.textContent;\n            } else {\n              // Styles are different.\n              currentContent.content.push({\n                type: \"text\",\n                text: node.textContent,\n                styles,\n              });\n            }\n          } else {\n            // Link URLs are different.\n            content.push(currentContent);\n            currentContent = {\n              type: \"link\",\n              href: linkMark.attrs.href,\n              content: [\n                {\n                  type: \"text\",\n                  text: node.textContent,\n                  styles,\n                },\n              ],\n            };\n          }\n        } else {\n          // Node is text (different type to current content).\n          content.push(currentContent);\n          currentContent = {\n            type: \"text\",\n            text: node.textContent,\n            styles,\n          };\n        }\n      } else {\n        // TODO\n      }\n    }\n    // Current content does not exist.\n    else {\n      // Node is text.\n      if (!linkMark) {\n        currentContent = {\n          type: \"text\",\n          text: node.textContent,\n          styles,\n        };\n      }\n      // Node is a link.\n      else {\n        currentContent = {\n          type: \"link\",\n          href: linkMark.attrs.href,\n          content: [\n            {\n              type: \"text\",\n              text: node.textContent,\n              styles,\n            },\n          ],\n        };\n      }\n    }\n  });\n\n  if (currentContent) {\n    content.push(currentContent);\n  }\n\n  return content as InlineContent<I, S>[];\n}\n\nexport function nodeToCustomInlineContent<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(node: Node, inlineContentSchema: I, styleSchema: S): InlineContent<I, S> {\n  if (node.type.name === \"text\" || node.type.name === \"link\") {\n    throw new Error(\"unexpected\");\n  }\n  const props: any = {};\n  const icConfig = inlineContentSchema[\n    node.type.name\n  ] as CustomInlineContentConfig;\n  for (const [attr, value] of Object.entries(node.attrs)) {\n    if (!icConfig) {\n      throw Error(\"ic node is of an unrecognized type: \" + node.type.name);\n    }\n\n    const propSchema = icConfig.propSchema;\n\n    if (attr in propSchema) {\n      props[attr] = value;\n    }\n  }\n\n  let content: CustomInlineContentFromConfig<any, any>[\"content\"];\n\n  if (icConfig.content === \"styled\") {\n    content = contentNodeToInlineContent(\n      node,\n      inlineContentSchema,\n      styleSchema,\n    ) as any; // TODO: is this safe? could we have Links here that are undesired?\n  } else {\n    content = undefined;\n  }\n\n  const ic = {\n    type: node.type.name,\n    props,\n    content,\n  } as InlineContentFromConfig<I[keyof I], S>;\n  return ic;\n}\n\n/**\n * Convert a Prosemirror node to a BlockNote block.\n *\n * TODO: test changes\n */\nexport function nodeToBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  node: Node,\n  schema: Schema,\n  blockSchema: BSchema = getBlockSchema(schema) as BSchema,\n  inlineContentSchema: I = getInlineContentSchema(schema) as I,\n  styleSchema: S = getStyleSchema(schema) as S,\n  blockCache = getBlockCache(schema),\n): Block<BSchema, I, S> {\n  if (!node.type.isInGroup(\"bnBlock\")) {\n    throw Error(\"Node should be a bnBlock, but is instead: \" + node.type.name);\n  }\n\n  const cachedBlock = blockCache?.get(node);\n\n  if (cachedBlock) {\n    return cachedBlock;\n  }\n\n  const blockInfo = getBlockInfoWithManualOffset(node, 0);\n\n  let id = blockInfo.bnBlock.node.attrs.id;\n\n  // Only used for blocks converted from other formats.\n  if (id === null) {\n    id = UniqueID.options.generateID();\n  }\n\n  const blockSpec = blockSchema[blockInfo.blockNoteType];\n\n  if (!blockSpec) {\n    throw Error(\"Block is of an unrecognized type: \" + blockInfo.blockNoteType);\n  }\n\n  const props: any = {};\n  for (const [attr, value] of Object.entries({\n    ...node.attrs,\n    ...(blockInfo.isBlockContainer ? blockInfo.blockContent.node.attrs : {}),\n  })) {\n    const propSchema = blockSpec.propSchema;\n\n    if (\n      attr in propSchema &&\n      !(propSchema[attr].default === undefined && value === undefined)\n    ) {\n      props[attr] = value;\n    }\n  }\n\n  const blockConfig = blockSchema[blockInfo.blockNoteType];\n\n  const children: Block<BSchema, I, S>[] = [];\n  blockInfo.childContainer?.node.forEach((child) => {\n    children.push(\n      nodeToBlock(\n        child,\n        schema,\n        blockSchema,\n        inlineContentSchema,\n        styleSchema,\n        blockCache,\n      ),\n    );\n  });\n\n  let content: Block<any, any, any>[\"content\"];\n\n  if (blockConfig.content === \"inline\") {\n    if (!blockInfo.isBlockContainer) {\n      throw new Error(\"impossible\");\n    }\n    content = contentNodeToInlineContent(\n      blockInfo.blockContent.node,\n      inlineContentSchema,\n      styleSchema,\n    );\n  } else if (blockConfig.content === \"table\") {\n    if (!blockInfo.isBlockContainer) {\n      throw new Error(\"impossible\");\n    }\n    content = contentNodeToTableContent(\n      blockInfo.blockContent.node,\n      inlineContentSchema,\n      styleSchema,\n    );\n  } else if (blockConfig.content === \"none\") {\n    content = undefined;\n  } else {\n    throw new UnreachableCaseError(blockConfig.content);\n  }\n\n  const block = {\n    id,\n    type: blockConfig.type,\n    props,\n    content,\n    children,\n  } as Block<BSchema, I, S>;\n\n  blockCache?.set(node, block);\n\n  return block;\n}\n\n/**\n * Convert a Prosemirror document to a BlockNote document (array of blocks)\n */\nexport function docToBlocks<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  doc: Node,\n  schema: Schema,\n  blockSchema: BSchema = getBlockSchema(schema) as BSchema,\n  inlineContentSchema: I = getInlineContentSchema(schema) as I,\n  styleSchema: S = getStyleSchema(schema) as S,\n  blockCache = getBlockCache(schema),\n) {\n  const blocks: Block<BSchema, I, S>[] = [];\n  doc.firstChild!.descendants((node) => {\n    blocks.push(\n      nodeToBlock(\n        node,\n        schema,\n        blockSchema,\n        inlineContentSchema,\n        styleSchema,\n        blockCache,\n      ),\n    );\n    return false;\n  });\n  return blocks;\n}\n\n/**\n *\n * Parse a Prosemirror Slice into a BlockNote selection. The prosemirror schema looks like this:\n *\n * <blockGroup>\n *   <blockContainer> (main content of block)\n *       <p, heading, etc.>\n *   <blockGroup> (only if blocks has children)\n *     <blockContainer> (child block)\n *       <p, heading, etc.>\n *     </blockContainer>\n *    <blockContainer> (child block 2)\n *       <p, heading, etc.>\n *     </blockContainer>\n *   </blockContainer>\n *  </blockGroup>\n * </blockGroup>\n *\n */\nexport function prosemirrorSliceToSlicedBlocks<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  slice: Slice,\n  schema: Schema,\n  blockSchema: BSchema = getBlockSchema(schema) as BSchema,\n  inlineContentSchema: I = getInlineContentSchema(schema) as I,\n  styleSchema: S = getStyleSchema(schema) as S,\n  blockCache: WeakMap<Node, Block<BSchema, I, S>> = getBlockCache(schema),\n): {\n  /**\n   * The blocks that are included in the selection.\n   */\n  blocks: Block<BSchema, I, S>[];\n  /**\n   * If a block was \"cut\" at the start of the selection, this will be the id of the block that was cut.\n   */\n  blockCutAtStart: string | undefined;\n  /**\n   * If a block was \"cut\" at the end of the selection, this will be the id of the block that was cut.\n   */\n  blockCutAtEnd: string | undefined;\n} {\n  // console.log(JSON.stringify(slice.toJSON()));\n  function processNode(\n    node: Node,\n    openStart: number,\n    openEnd: number,\n  ): {\n    blocks: Block<BSchema, I, S>[];\n    blockCutAtStart: string | undefined;\n    blockCutAtEnd: string | undefined;\n  } {\n    if (node.type.name !== \"blockGroup\") {\n      throw new Error(\"unexpected\");\n    }\n    const blocks: Block<BSchema, I, S>[] = [];\n    let blockCutAtStart: string | undefined;\n    let blockCutAtEnd: string | undefined;\n\n    node.forEach((blockContainer, _offset, index) => {\n      if (blockContainer.type.name !== \"blockContainer\") {\n        throw new Error(\"unexpected\");\n      }\n      if (blockContainer.childCount === 0) {\n        return;\n      }\n      if (blockContainer.childCount === 0 || blockContainer.childCount > 2) {\n        throw new Error(\n          \"unexpected, blockContainer.childCount: \" + blockContainer.childCount,\n        );\n      }\n\n      const isFirstBlock = index === 0;\n      const isLastBlock = index === node.childCount - 1;\n\n      if (blockContainer.firstChild!.type.name === \"blockGroup\") {\n        // this is the parent where a selection starts within one of its children,\n        // e.g.:\n        // A\n        // â”œâ”€â”€ B\n        // selection starts within B, then this blockContainer is A, but we don't care about A\n        // so let's descend into B and continue processing\n        if (!isFirstBlock) {\n          throw new Error(\"unexpected\");\n        }\n        const ret = processNode(\n          blockContainer.firstChild!,\n          Math.max(0, openStart - 1),\n          isLastBlock ? Math.max(0, openEnd - 1) : 0,\n        );\n        blockCutAtStart = ret.blockCutAtStart;\n        if (isLastBlock) {\n          blockCutAtEnd = ret.blockCutAtEnd;\n        }\n        blocks.push(...ret.blocks);\n        return;\n      }\n\n      const block = nodeToBlock(\n        blockContainer,\n        schema,\n        blockSchema,\n        inlineContentSchema,\n        styleSchema,\n        blockCache,\n      );\n      const childGroup =\n        blockContainer.childCount > 1 ? blockContainer.child(1) : undefined;\n\n      let childBlocks: Block<BSchema, I, S>[] = [];\n      if (childGroup) {\n        const ret = processNode(\n          childGroup,\n          0, // TODO: can this be anything other than 0?\n          isLastBlock ? Math.max(0, openEnd - 1) : 0,\n        );\n        childBlocks = ret.blocks;\n        if (isLastBlock) {\n          blockCutAtEnd = ret.blockCutAtEnd;\n        }\n      }\n\n      if (isLastBlock && !childGroup && openEnd > 1) {\n        blockCutAtEnd = block.id;\n      }\n\n      if (isFirstBlock && openStart > 1) {\n        blockCutAtStart = block.id;\n      }\n\n      blocks.push({\n        ...(block as any),\n        children: childBlocks,\n      });\n    });\n\n    return { blocks, blockCutAtStart, blockCutAtEnd };\n  }\n\n  if (slice.content.childCount === 0) {\n    return {\n      blocks: [],\n      blockCutAtStart: undefined,\n      blockCutAtEnd: undefined,\n    };\n  }\n\n  if (slice.content.childCount !== 1) {\n    throw new Error(\n      \"slice must be a single block, did you forget includeParents=true?\",\n    );\n  }\n\n  return processNode(\n    slice.content.firstChild!,\n    Math.max(slice.openStart - 1, 0),\n    Math.max(slice.openEnd - 1, 0),\n  );\n}\n","import { KeyboardShortcutCommand, Node } from \"@tiptap/core\";\n\nimport { camelToDataKebab } from \"../../util/string.js\";\nimport { PropSchema, Props } from \"../propTypes.js\";\nimport {\n  CustomInlineContentConfig,\n  InlineContentConfig,\n  InlineContentImplementation,\n  InlineContentSchemaFromSpecs,\n  InlineContentSpec,\n  InlineContentSpecs,\n} from \"./types.js\";\n\n// Function that adds necessary classes and attributes to the `dom` element\n// returned from a custom inline content's 'render' function, to ensure no data\n// is lost on internal copy & paste.\nexport function addInlineContentAttributes<\n  IType extends string,\n  PSchema extends PropSchema,\n>(\n  element: {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n  },\n  inlineContentType: IType,\n  inlineContentProps: Props<PSchema>,\n  propSchema: PSchema,\n): {\n  dom: HTMLElement;\n  contentDOM?: HTMLElement;\n} {\n  // Sets content type attribute\n  element.dom.setAttribute(\"data-inline-content-type\", inlineContentType);\n  // Adds props as HTML attributes in kebab-case with \"data-\" prefix. Skips props\n  // set to their default values.\n  Object.entries(inlineContentProps)\n    .filter(([prop, value]) => {\n      const spec = propSchema[prop];\n      return value !== spec.default;\n    })\n    .map(([prop, value]) => {\n      return [camelToDataKebab(prop), value];\n    })\n    .forEach(([prop, value]) => element.dom.setAttribute(prop, value));\n\n  if (element.contentDOM !== undefined) {\n    element.contentDOM.setAttribute(\"data-editable\", \"\");\n  }\n\n  return element;\n}\n\n// see https://github.com/TypeCellOS/BlockNote/pull/435\nexport function addInlineContentKeyboardShortcuts<\n  T extends CustomInlineContentConfig,\n>(\n  config: T,\n): {\n  [p: string]: KeyboardShortcutCommand;\n} {\n  return {\n    Backspace: ({ editor }) => {\n      const resolvedPos = editor.state.selection.$from;\n\n      return (\n        editor.state.selection.empty &&\n        resolvedPos.node().type.name === config.type &&\n        resolvedPos.parentOffset === 0\n      );\n    },\n  };\n}\n\n// This helper function helps to instantiate a InlineContentSpec with a\n// config and implementation that conform to the type of Config\nexport function createInternalInlineContentSpec<T extends InlineContentConfig>(\n  config: T,\n  implementation: InlineContentImplementation<T>,\n) {\n  return {\n    config,\n    implementation,\n  } satisfies InlineContentSpec<T>;\n}\n\nexport function createInlineContentSpecFromTipTapNode<\n  T extends Node,\n  P extends PropSchema,\n>(node: T, propSchema: P) {\n  return createInternalInlineContentSpec(\n    {\n      type: node.name as T[\"name\"],\n      propSchema,\n      content: node.config.content === \"inline*\" ? \"styled\" : \"none\",\n    },\n    {\n      node,\n    },\n  );\n}\n\nexport function getInlineContentSchemaFromSpecs<T extends InlineContentSpecs>(\n  specs: T,\n) {\n  return Object.fromEntries(\n    Object.entries(specs).map(([key, value]) => [key, value.config]),\n  ) as InlineContentSchemaFromSpecs<T>;\n}\n","import { Node } from \"@tiptap/core\";\n\nimport { TagParseRule } from \"@tiptap/pm/model\";\nimport { inlineContentToNodes } from \"../../api/nodeConversions/blockToNode.js\";\nimport { nodeToCustomInlineContent } from \"../../api/nodeConversions/nodeToBlock.js\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { propsToAttributes } from \"../blocks/internal.js\";\nimport { Props } from \"../propTypes.js\";\nimport { StyleSchema } from \"../styles/types.js\";\nimport {\n  addInlineContentAttributes,\n  addInlineContentKeyboardShortcuts,\n  createInlineContentSpecFromTipTapNode,\n} from \"./internal.js\";\nimport {\n  CustomInlineContentConfig,\n  InlineContentFromConfig,\n  InlineContentSpec,\n  PartialCustomInlineContentFromConfig,\n} from \"./types.js\";\n\n// TODO: support serialization\n\nexport type CustomInlineContentImplementation<\n  T extends CustomInlineContentConfig,\n  // B extends BlockSchema,\n  // I extends InlineContentSchema,\n  S extends StyleSchema,\n> = {\n  render: (\n    /**\n     * The custom inline content to render\n     */\n    inlineContent: InlineContentFromConfig<T, S>,\n    updateInlineContent: (\n      update: PartialCustomInlineContentFromConfig<T, S>,\n    ) => void,\n    /**\n     * The BlockNote editor instance\n     * This is typed generically. If you want an editor with your custom schema, you need to\n     * cast it manually, e.g.: `const e = editor as BlockNoteEditor<typeof mySchema>;`\n     */\n    editor: BlockNoteEditor<any, any, S>,\n    // (note) if we want to fix the manual cast, we need to prevent circular references and separate block definition and render implementations\n    // or allow manually passing <BSchema>, but that's not possible without passing the other generics because Typescript doesn't support partial inferred generics\n  ) => {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n    // destroy?: () => void;\n  };\n};\n\nexport function getInlineContentParseRules(\n  config: CustomInlineContentConfig,\n): TagParseRule[] {\n  return [\n    {\n      tag: `[data-inline-content-type=\"${config.type}\"]`,\n      contentElement: (element) => {\n        const htmlElement = element as HTMLElement;\n\n        if (htmlElement.matches(\"[data-editable]\")) {\n          return htmlElement;\n        }\n\n        return htmlElement.querySelector(\"[data-editable]\") || htmlElement;\n      },\n    },\n  ];\n}\n\nexport function createInlineContentSpec<\n  T extends CustomInlineContentConfig,\n  S extends StyleSchema,\n>(\n  inlineContentConfig: T,\n  inlineContentImplementation: CustomInlineContentImplementation<T, S>,\n): InlineContentSpec<T> {\n  const node = Node.create({\n    name: inlineContentConfig.type,\n    inline: true,\n    group: \"inline\",\n    selectable: inlineContentConfig.content === \"styled\",\n    atom: inlineContentConfig.content === \"none\",\n    content: (inlineContentConfig.content === \"styled\"\n      ? \"inline*\"\n      : \"\") as T[\"content\"] extends \"styled\" ? \"inline*\" : \"\",\n\n    addAttributes() {\n      return propsToAttributes(inlineContentConfig.propSchema);\n    },\n\n    addKeyboardShortcuts() {\n      return addInlineContentKeyboardShortcuts(inlineContentConfig);\n    },\n\n    parseHTML() {\n      return getInlineContentParseRules(inlineContentConfig);\n    },\n\n    renderHTML({ node }) {\n      const editor = this.options.editor;\n\n      const output = inlineContentImplementation.render(\n        nodeToCustomInlineContent(\n          node,\n          editor.schema.inlineContentSchema,\n          editor.schema.styleSchema,\n        ) as any as InlineContentFromConfig<T, S>, // TODO: fix cast\n        () => {\n          // No-op\n        },\n        editor,\n      );\n\n      return addInlineContentAttributes(\n        output,\n        inlineContentConfig.type,\n        node.attrs as Props<T[\"propSchema\"]>,\n        inlineContentConfig.propSchema,\n      );\n    },\n\n    addNodeView() {\n      return ({ node, getPos }) => {\n        const editor = this.options.editor as BlockNoteEditor<any, any, S>;\n\n        const output = inlineContentImplementation.render(\n          nodeToCustomInlineContent(\n            node,\n            editor.schema.inlineContentSchema,\n            editor.schema.styleSchema,\n          ) as any as InlineContentFromConfig<T, S>, // TODO: fix cast\n          (update) => {\n            if (typeof getPos === \"boolean\") {\n              return;\n            }\n\n            const content = inlineContentToNodes([update], editor.pmSchema);\n\n            editor.transact((tr) =>\n              tr.replaceWith(getPos(), getPos() + node.nodeSize, content),\n            );\n          },\n          editor,\n        );\n\n        return addInlineContentAttributes(\n          output,\n          inlineContentConfig.type,\n          node.attrs as Props<T[\"propSchema\"]>,\n          inlineContentConfig.propSchema,\n        );\n      };\n    },\n  });\n\n  return createInlineContentSpecFromTipTapNode(\n    node,\n    inlineContentConfig.propSchema,\n  ) as InlineContentSpec<T>; // TODO: fix cast\n}\n","import { Attributes, Mark } from \"@tiptap/core\";\nimport {\n  StyleConfig,\n  StyleImplementation,\n  StylePropSchema,\n  StyleSchemaFromSpecs,\n  StyleSpec,\n  StyleSpecs,\n} from \"./types.js\";\n\nexport function stylePropsToAttributes(\n  propSchema: StylePropSchema,\n): Attributes {\n  if (propSchema === \"boolean\") {\n    return {};\n  }\n  return {\n    stringValue: {\n      default: undefined,\n      keepOnSplit: true,\n      parseHTML: (element) => element.getAttribute(\"data-value\"),\n      renderHTML: (attributes) =>\n        attributes.stringValue !== undefined\n          ? {\n              \"data-value\": attributes.stringValue,\n            }\n          : {},\n    },\n  };\n}\n\n// Function that adds necessary classes and attributes to the `dom` element\n// returned from a custom style's 'render' function, to ensure no data is lost\n// on internal copy & paste.\nexport function addStyleAttributes<\n  SType extends string,\n  PSchema extends StylePropSchema,\n>(\n  element: {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n  },\n  styleType: SType,\n  styleValue: PSchema extends \"boolean\" ? undefined : string,\n  propSchema: PSchema,\n): {\n  dom: HTMLElement;\n  contentDOM?: HTMLElement;\n} {\n  // Sets content type attribute\n  element.dom.setAttribute(\"data-style-type\", styleType);\n  // Adds style value as an HTML attribute in kebab-case with \"data-\" prefix, if\n  // the style takes a string value.\n  if (propSchema === \"string\") {\n    element.dom.setAttribute(\"data-value\", styleValue as string);\n  }\n\n  if (element.contentDOM !== undefined) {\n    element.contentDOM.setAttribute(\"data-editable\", \"\");\n  }\n\n  return element;\n}\n\n// This helper function helps to instantiate a stylespec with a\n// config and implementation that conform to the type of Config\nexport function createInternalStyleSpec<T extends StyleConfig>(\n  config: T,\n  implementation: StyleImplementation,\n) {\n  return {\n    config,\n    implementation,\n  } satisfies StyleSpec<T>;\n}\n\nexport function createStyleSpecFromTipTapMark<\n  T extends Mark,\n  P extends StylePropSchema,\n>(mark: T, propSchema: P) {\n  return createInternalStyleSpec(\n    {\n      type: mark.name as T[\"name\"],\n      propSchema,\n    },\n    {\n      mark,\n    },\n  );\n}\n\nexport function getStyleSchemaFromSpecs<T extends StyleSpecs>(specs: T) {\n  return Object.fromEntries(\n    Object.entries(specs).map(([key, value]) => [key, value.config]),\n  ) as StyleSchemaFromSpecs<T>;\n}\n","import { Mark } from \"@tiptap/core\";\n\nimport { ParseRule } from \"@tiptap/pm/model\";\nimport { UnreachableCaseError } from \"../../util/typescript.js\";\nimport {\n  addStyleAttributes,\n  createInternalStyleSpec,\n  stylePropsToAttributes,\n} from \"./internal.js\";\nimport { StyleConfig, StyleSpec } from \"./types.js\";\n\nexport type CustomStyleImplementation<T extends StyleConfig> = {\n  render: T[\"propSchema\"] extends \"boolean\"\n    ? () => {\n        dom: HTMLElement;\n        contentDOM?: HTMLElement;\n      }\n    : (value: string) => {\n        dom: HTMLElement;\n        contentDOM?: HTMLElement;\n      };\n};\n\n// TODO: support serialization\n\nexport function getStyleParseRules(config: StyleConfig): ParseRule[] {\n  return [\n    {\n      tag: `[data-style-type=\"${config.type}\"]`,\n      contentElement: (element) => {\n        const htmlElement = element as HTMLElement;\n\n        if (htmlElement.matches(\"[data-editable]\")) {\n          return htmlElement;\n        }\n\n        return htmlElement.querySelector(\"[data-editable]\") || htmlElement;\n      },\n    },\n  ];\n}\n\nexport function createStyleSpec<T extends StyleConfig>(\n  styleConfig: T,\n  styleImplementation: CustomStyleImplementation<T>,\n): StyleSpec<T> {\n  const mark = Mark.create({\n    name: styleConfig.type,\n\n    addAttributes() {\n      return stylePropsToAttributes(styleConfig.propSchema);\n    },\n\n    parseHTML() {\n      return getStyleParseRules(styleConfig);\n    },\n\n    renderHTML({ mark }) {\n      let renderResult: {\n        dom: HTMLElement;\n        contentDOM?: HTMLElement;\n      };\n\n      if (styleConfig.propSchema === \"boolean\") {\n        // @ts-ignore not sure why this is complaining\n        renderResult = styleImplementation.render();\n      } else if (styleConfig.propSchema === \"string\") {\n        renderResult = styleImplementation.render(mark.attrs.stringValue);\n      } else {\n        throw new UnreachableCaseError(styleConfig.propSchema);\n      }\n\n      // const renderResult = styleImplementation.render();\n      return addStyleAttributes(\n        renderResult,\n        styleConfig.type,\n        mark.attrs.stringValue,\n        styleConfig.propSchema,\n      );\n    },\n  });\n\n  return createInternalStyleSpec(styleConfig, {\n    mark,\n  });\n}\n","import { DefaultBlockSchema } from \"../../../blocks/defaultBlocks.js\";\nimport {\n  BlockFromConfigNoChildren,\n  PartialTableContent,\n  TableCell,\n  TableContent,\n} from \"../../../schema/blocks/types.js\";\nimport {\n  isPartialLinkInlineContent,\n  isStyledTextInlineContent,\n} from \"../../../schema/index.js\";\nimport {\n  getColspan,\n  getRowspan,\n  isPartialTableCell,\n  mapTableCell,\n} from \"../../../util/table.js\";\n\n/**\n * Here be dragons.\n *\n * Tables are complex because of rowspan and colspan behavior.\n * The majority of this file is concerned with translating between \"relative\" and \"absolute\" indices.\n *\n * The following diagram may help explain the relationship between the different indices:\n *\n *  One-based indexing of rows and columns in a table:\n *  | 1-1 | 1-2 | 1-3 |\n *  | 2-1 | 2-2 | 2-3 |\n *  | 3-1 | 3-2 | 3-3 |\n *\n *  A complicated table with colspans and rowspans:\n *  | 1-1 | 1-2 | 1-2 |\n *  | 2-1 | 2-1 | 2-2 |\n *  | 2-1 | 2-1 | 3-1 |\n *\n * You can see here that we have:\n *  - two cells that contain the value \"1-2\", because it has a colspan of 2.\n *  - four cells that contain the value \"2-1\", because it has a rowspan of 2 and a colspan of 2.\n *\n * This would be represented in block note json (roughly) as:\n *  [\n *      {\n *       \"cells\": [\n *         {\n *           \"type\": \"tableCell\",\n *             \"content\": [\"1,1\"],\n *             \"props\": {\n *               \"colspan\": 1,\n *               \"rowspan\": 1\n *             },\n *           },\n *           {\n *             \"type\": \"tableCell\",\n *             \"content\": [\"1,2\"],\n *             \"props\": {\n *               \"colspan\": 2,\n *               \"rowspan\": 1\n *             }\n *           }\n *         ],\n *       },\n *       {\n *         \"cells\": [\n *           {\n *             \"type\": \"tableCell\",\n *             \"content\": [\"2,1\"],\n *             \"props\": {\n *                 \"colspan\": 2,\n *                 \"rowspan\": 2\n *               }\n *             },\n *           {\n *             \"type\": \"tableCell\",\n *             \"content\": [\"2,2\"],\n *             \"props\": {\n *               \"colspan\": 1,\n *               \"rowspan\": 1\n *            }\n *         ],\n *       },\n *       {\n *         \"cells\": [\n *           {\n *             \"type\": \"tableCell\",\n *             \"content\": [\"3,1\"],\n *             \"props\": {\n *               \"colspan\": 1,\n *               \"rowspan\": 1,\n *             }\n *           }\n *         ]\n *       }\n *     ]\n *\n * Which maps cleanly to the following HTML:\n *\n * <table>\n *   <tr>\n *     <td>1-1</td>\n *     <td colspan=\"2\">1-2</td>\n *   </tr>\n *   <tr>\n *     <td rowspan=\"2\" colspan=\"2\">2-1</td>\n *     <td>2-2</td>\n *   </tr>\n *   <tr>\n *     <td>3-1</td>\n *   </tr>\n * </table>\n *\n * We have a problem though, from the block json, there is no way to tell that the cell \"2-1\" is the second cell in the second row.\n * To resolve this, we created the occupancy grid, which is a grid of all the cells in the table, as though they were only 1x1 cells.\n * See {@link OccupancyGrid} for more information.\n *\n */\n\n/**\n * Relative cell indices are relative to the table block's content.\n *\n * This is a sparse representation of the table and is how HTML and BlockNote JSON represent tables.\n *\n * For example, if we have a table with a rowspan of 2, the second row may only have 1 element in a 2x2 table.\n *\n * ```\n * // Visual representation of the table\n *     | 1-1 | 1-2 | // has 2 cells\n *     | 1-1 | 2-2 | // has only 1 cell\n * // Relative cell indices\n *     [{ row: 1, col: 1, rowspan: 2 }, { row: 1, col: 2 }] // has 2 cells\n *     [{ row: 1, col: 2 }] // has only 1 cell\n * ```\n */\nexport type RelativeCellIndices = {\n  row: number;\n  col: number;\n};\n\n/**\n * Absolute cell indices are relative to the table's layout (it's {@link OccupancyGrid}).\n *\n * It is as though the table is a grid of 1x1 cells, and any colspan or rowspan results in multiple 1x1 cells being occupied.\n *\n * For example, if we have a table with a colspan of 2, it will occupy 2 cells in the layout grid.\n *\n * ```\n * // Visual representation of the table\n *     | 1-1 | 1-1 | // has 2 cells\n *     | 2-1 | 2-2 | // has 2 cell\n * // Absolute cell indices\n *     [{ row: 1, col: 1, colspan: 2 }, { row: 1, col: 2, colspan: 2 }] // has 2 cells\n *     [{ row: 1, col: 1 }, { row: 1, col: 2 }] // has 2 cells\n * ```\n */\nexport type AbsoluteCellIndices = {\n  row: number;\n  col: number;\n};\n\n/**\n * An occupancy grid is a grid of the occupied cells in the table.\n * It is used to track the occupied cells in the table to know where to place the next cell.\n *\n * Since it allows us to resolve cell indices both {@link RelativeCellIndices} and {@link AbsoluteCellIndices}, it is the core data structure for table operations.\n */\ntype OccupancyGrid = (RelativeCellIndices & {\n  /**\n   * The rowspan of the cell.\n   */\n  rowspan: number;\n  /**\n   * The colspan of the cell.\n   */\n  colspan: number;\n  /**\n   * The cell.\n   */\n  cell: TableCell<any, any>;\n})[][];\n\n/**\n * This will return the {@link OccupancyGrid} of the table.\n * By laying out the table as though it were a grid of 1x1 cells, we can easily track where the cells are located (both relatively and absolutely).\n *\n * @returns an {@link OccupancyGrid}\n */\nexport function getTableCellOccupancyGrid(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n): OccupancyGrid {\n  const { height, width } = getDimensionsOfTable(block);\n\n  /**\n   * Create a grid to track occupied cells\n   * This is used because rowspans and colspans take up multiple spaces\n   * So, we need to track the occupied cells in the grid to know where to place the next cell\n   */\n  const grid: OccupancyGrid = new Array(height)\n    .fill(false)\n    .map(() => new Array(width).fill(null));\n\n  // Find the next unoccupied cell in the table, row-major order\n  const findNextAvailable = (row: number, col: number) => {\n    for (let i = row; i < height; i++) {\n      for (let j = col; j < width; j++) {\n        if (!grid[i][j]) {\n          return { row: i, col: j };\n        }\n      }\n    }\n\n    throw new Error(\n      \"Unable to create occupancy grid for table, no more available cells\",\n    );\n  };\n\n  // Build up the grid, trying to fill in the cells with the correct relative row and column indices\n  for (let row = 0; row < block.content.rows.length; row++) {\n    for (let col = 0; col < block.content.rows[row].cells.length; col++) {\n      const cell = mapTableCell(block.content.rows[row].cells[col]);\n      const rowspan = getRowspan(cell);\n      const colspan = getColspan(cell);\n\n      // Rowspan and colspan complicate things, by taking up multiple cells in the grid\n      // We need to iterate over the cells that the rowspan and colspan take up\n      // and fill in the grid with the correct relative row and column indices\n      const { row: startRow, col: startCol } = findNextAvailable(row, col);\n\n      // Fill in the rowspan X colspan cells, starting from the next available cell, with the correct relative row and column indices\n      for (let i = startRow; i < startRow + rowspan; i++) {\n        for (let j = startCol; j < startCol + colspan; j++) {\n          if (grid[i][j]) {\n            // The cell is already occupied, the table is malformed\n            throw new Error(\n              `Unable to create occupancy grid for table, cell at ${i},${j} is already occupied`,\n            );\n          }\n\n          grid[i][j] = {\n            row,\n            col,\n            rowspan,\n            colspan,\n            cell,\n          };\n        }\n      }\n    }\n  }\n\n  // console.log(grid);\n\n  return grid;\n}\n\n/**\n * Given an {@link OccupancyGrid}, this will return the {@link TableContent} rows.\n *\n * @note This will remove duplicates from the occupancy grid. And does no bounds checking for validity of the occupancy grid.\n */\nexport function getTableRowsFromOccupancyGrid(\n  occupancyGrid: OccupancyGrid,\n): TableContent<any, any>[\"rows\"] {\n  // Because a cell can have a rowspan or colspan, it can occupy multiple cells in the occupancy grid\n  // So, we need to remove duplicates from the occupancy grid before we can return the table rows\n  const seen = new Set<string>();\n\n  return occupancyGrid.map((row) => {\n    // Just read out the cells in the occupancy grid, removing duplicates\n    return {\n      cells: row\n        .map((cell) => {\n          if (seen.has(cell.row + \":\" + cell.col)) {\n            return false;\n          }\n          seen.add(cell.row + \":\" + cell.col);\n          return cell.cell;\n        })\n        .filter((cell): cell is TableCell<any, any> => cell !== false),\n    };\n  });\n}\n\n/**\n * This will resolve the relative cell indices within the table block to the absolute cell indices within the table, accounting for colspan and rowspan.\n *\n * @note It will return only the first cell (i.e. top-left) that matches the relative cell indices. To find the other absolute cell indices this cell occupies, you can assume it is the rowspan and colspan number of cells away from the top-left cell.\n *\n * @returns The {@link AbsoluteCellIndices} and the {@link TableCell} at the absolute position.\n */\nexport function getAbsoluteTableCells(\n  /**\n   * The relative position of the cell in the table.\n   */\n  relativeCellIndices: RelativeCellIndices,\n  /**\n   * The table block containing the cell.\n   */\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  /**\n   * The occupancy grid of the table.\n   */\n  occupancyGrid: OccupancyGrid = getTableCellOccupancyGrid(block),\n): AbsoluteCellIndices & {\n  cell: TableCell<any, any>;\n} {\n  for (let r = 0; r < occupancyGrid.length; r++) {\n    for (let c = 0; c < occupancyGrid[r].length; c++) {\n      // console.log(r, c, occupancyGrid);\n      const cell = occupancyGrid[r][c];\n      if (\n        cell.row === relativeCellIndices.row &&\n        cell.col === relativeCellIndices.col\n      ) {\n        return { row: r, col: c, cell: cell.cell };\n      }\n    }\n  }\n\n  throw new Error(\n    `Unable to resolve relative table cell indices for table, cell at ${relativeCellIndices.row},${relativeCellIndices.col} is not occupied`,\n  );\n}\n\n/**\n * This will get the dimensions of the table block.\n *\n * @returns The height and width of the table.\n */\nexport function getDimensionsOfTable(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n): {\n  /**\n   * The number of rows in the table.\n   */\n  height: number;\n  /**\n   * The number of columns in the table.\n   */\n  width: number;\n} {\n  // Due to the way we store the table, the height is always the number of rows\n  const height = block.content.rows.length;\n\n  // Calculating the width is a bit more complex, as it is the maximum width of any row\n  let width = 0;\n  block.content.rows.forEach((row) => {\n    // Find the width of the row by summing the colspan of each cell\n    let rowWidth = 0;\n    row.cells.forEach((cell) => {\n      rowWidth += getColspan(cell);\n    });\n\n    // Update the width if the row is wider than the current width\n    width = Math.max(width, rowWidth);\n  });\n\n  return { height, width };\n}\n\n/**\n * This will resolve the absolute cell indices within the table block to the relative cell indices within the table, accounting for colspan and rowspan.\n *\n * @returns The {@link RelativeCellIndices} and the {@link TableCell} at the relative position.\n */\nexport function getRelativeTableCells(\n  /**\n   * The {@link AbsoluteCellIndices} of the cell in the table.\n   */\n  absoluteCellIndices: AbsoluteCellIndices,\n  /**\n   * The table block containing the cell.\n   */\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  /**\n   * The occupancy grid of the table.\n   */\n  occupancyGrid: OccupancyGrid = getTableCellOccupancyGrid(block),\n):\n  | (RelativeCellIndices & {\n      cell: TableContent<any, any>[\"rows\"][number][\"cells\"][number];\n    })\n  | undefined {\n  const occupancyCell =\n    occupancyGrid[absoluteCellIndices.row]?.[absoluteCellIndices.col];\n\n  // Double check that the cell can be accessed\n  if (!occupancyCell) {\n    // The cell is not occupied, so it is invalid\n    return undefined;\n  }\n\n  return {\n    row: occupancyCell.row,\n    col: occupancyCell.col,\n    cell: occupancyCell.cell,\n  };\n}\n\n/**\n * This will get all the cells within a relative row of a table block.\n *\n * This method always starts the search for the row at the first column of the table.\n *\n * ```\n * // Visual representation of a table\n * | A | B | C |\n * |   | D | E |\n * | F | G | H |\n * // \"A\" has a rowspan of 2\n *\n * // getCellsAtRowHandle(0)\n * // returns [\n *  { row: 0, col: 0, cell: \"A\" },\n *  { row: 0, col: 1, cell: \"B\" },\n *  { row: 0, col: 2, cell: \"C\" },\n * ]\n *\n * // getCellsAtColumnHandle(1)\n * // returns [\n *  { row: 1, col: 0, cell: \"F\" },\n *  { row: 1, col: 1, cell: \"G\" },\n *  { row: 1, col: 2, cell: \"H\" },\n * ]\n * ```\n *\n * As you can see, you may not be able to retrieve all nodes given a relative row index, as cells can span multiple rows.\n *\n * @returns All of the cells associated with the relative row of the table. (All cells that have the same relative row index)\n */\nexport function getCellsAtRowHandle(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  relativeRowIndex: RelativeCellIndices[\"row\"],\n) {\n  const occupancyGrid = getTableCellOccupancyGrid(block);\n\n  if (relativeRowIndex < 0 || relativeRowIndex >= occupancyGrid.length) {\n    return [];\n  }\n\n  // First need to resolve the relative row index to an absolute row index\n  let absoluteRow = 0;\n\n  // Jump through the occupied cells ${relativeCellIndices.row} times to find the absolute row position\n  for (let i = 0; i < relativeRowIndex; i++) {\n    const cell = occupancyGrid[absoluteRow]?.[0];\n\n    if (!cell) {\n      return [];\n    }\n\n    // Skip the cells that the rowspan takes up\n    absoluteRow += cell.rowspan;\n  }\n\n  // Then for each column, get the cell at the absolute row index as a relative cell index\n  const cells = new Array(occupancyGrid[0].length)\n    .fill(false)\n    .map((_v, col) => {\n      return getRelativeTableCells(\n        { row: absoluteRow, col },\n        block,\n        occupancyGrid,\n      );\n    })\n    .filter(\n      (a): a is RelativeCellIndices & { cell: TableCell<any, any> } =>\n        a !== undefined,\n    );\n\n  // Filter out duplicates based on row and col properties\n  return cells.filter((cell, index) => {\n    return (\n      cells.findIndex((c) => c.row === cell.row && c.col === cell.col) === index\n    );\n  });\n}\n\n/**\n * This will get all the cells within a relative column of a table block.\n *\n * This method always starts the search for the column at the first row of the table.\n *\n * ```\n * // Visual representation of a table\n * |   A   | B |\n * | C | D | E |\n * | F | G | H |\n * // \"A\" has a colspan of 2\n *\n * // getCellsAtColumnHandle(0)\n * // returns [\n *  { row: 0, col: 0, cell: \"A\" },\n *  { row: 1, col: 0, cell: \"C\" },\n *  { row: 2, col: 0, cell: \"F\" },\n * ]\n *\n * // getCellsAtColumnHandle(1)\n * // returns [\n *  { row: 0, col: 1, cell: \"B\" },\n *  { row: 1, col: 2, cell: \"E\" },\n *  { row: 2, col: 2, cell: \"F\" },\n * ]\n * ```\n *\n * As you can see, you may not be able to retrieve all nodes given a relative column index, as cells can span multiple columns.\n *\n * @returns All of the cells associated with the relative column of the table. (All cells that have the same relative column index)\n */\nexport function getCellsAtColumnHandle(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  relativeColumnIndex: RelativeCellIndices[\"col\"],\n) {\n  const occupancyGrid = getTableCellOccupancyGrid(block);\n\n  if (\n    relativeColumnIndex < 0 ||\n    relativeColumnIndex >= occupancyGrid[0].length\n  ) {\n    return [];\n  }\n\n  // First need to resolve the relative column index to an absolute column index\n  let absoluteCol = 0;\n\n  // Now that we've already resolved the absolute row position, we can jump through the occupied cells ${relativeCellIndices.col} times to find the absolute column position\n  for (let i = 0; i < relativeColumnIndex; i++) {\n    const cell = occupancyGrid[0]?.[absoluteCol];\n\n    if (!cell) {\n      return [];\n    }\n\n    // Skip the cells that the colspan takes up\n    absoluteCol += cell.colspan;\n  }\n\n  // Then for each row, get the cell at the absolute column index as a relative cell index\n  const cells = new Array(occupancyGrid.length)\n    .fill(false)\n    .map((_v, row) => {\n      return getRelativeTableCells(\n        { row, col: absoluteCol },\n        block,\n        occupancyGrid,\n      );\n    })\n    .filter(\n      (a): a is RelativeCellIndices & { cell: TableCell<any, any> } =>\n        a !== undefined,\n    );\n\n  // Filter out duplicates based on row and col properties\n  return cells.filter((cell, index) => {\n    return (\n      cells.findIndex((c) => c.row === cell.row && c.col === cell.col) === index\n    );\n  });\n}\n\n/**\n * This moves a column from one index to another.\n *\n * @note This is a destructive operation, it will modify the provided {@link OccupancyGrid} in place.\n */\nexport function moveColumn(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  fromColIndex: RelativeCellIndices[\"col\"],\n  toColIndex: RelativeCellIndices[\"col\"],\n  occupancyGrid: OccupancyGrid = getTableCellOccupancyGrid(block),\n): TableContent<any, any>[\"rows\"] {\n  // To move cells in a column, we need to layout the whole table\n  // and then move the cells accordingly.\n  const { col: absoluteSourceCol } = getAbsoluteTableCells(\n    {\n      row: 0,\n      col: fromColIndex,\n    },\n    block,\n    occupancyGrid,\n  );\n  const { col: absoluteTargetCol } = getAbsoluteTableCells(\n    {\n      row: 0,\n      col: toColIndex,\n    },\n    block,\n    occupancyGrid,\n  );\n\n  /**\n   * Currently, this function assumes that the caller has already checked that the source and target columns are valid.\n   * Such as by using {@link canColumnBeDraggedInto}. In the future, we may want to have the move logic be smarter\n   * and handle invalid column indices in some way.\n   */\n  occupancyGrid.forEach((row) => {\n    // Move the cell to the target column\n    const [sourceCell] = row.splice(absoluteSourceCol, 1);\n    row.splice(absoluteTargetCol, 0, sourceCell);\n  });\n\n  return getTableRowsFromOccupancyGrid(occupancyGrid);\n}\n\n/**\n * This moves a row from one index to another.\n *\n * @note This is a destructive operation, it will modify the {@link OccupancyGrid} in place.\n */\nexport function moveRow(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  fromRowIndex: RelativeCellIndices[\"row\"],\n  toRowIndex: RelativeCellIndices[\"row\"],\n  occupancyGrid: OccupancyGrid = getTableCellOccupancyGrid(block),\n): TableContent<any, any>[\"rows\"] {\n  // To move cells in a column, we need to layout the whole table\n  // and then move the cells accordingly.\n  const { row: absoluteSourceRow } = getAbsoluteTableCells(\n    {\n      row: fromRowIndex,\n      col: 0,\n    },\n    block,\n    occupancyGrid,\n  );\n  const { row: absoluteTargetRow } = getAbsoluteTableCells(\n    {\n      row: toRowIndex,\n      col: 0,\n    },\n    block,\n    occupancyGrid,\n  );\n\n  /**\n   * Currently, this function assumes that the caller has already checked that the source and target rows are valid.\n   * Such as by using {@link canRowBeDraggedInto}. In the future, we may want to have the move logic be smarter\n   * and handle invalid row indices in some way.\n   */\n  const [sourceRow] = occupancyGrid.splice(absoluteSourceRow, 1);\n  occupancyGrid.splice(absoluteTargetRow, 0, sourceRow);\n\n  return getTableRowsFromOccupancyGrid(occupancyGrid);\n}\n\n/**\n * This will check if a cell is empty.\n *\n * @returns True if the cell is empty, false otherwise.\n */\nfunction isCellEmpty(\n  cell:\n    | PartialTableContent<any, any>[\"rows\"][number][\"cells\"][number]\n    | undefined,\n): boolean {\n  if (!cell) {\n    return true;\n  }\n  if (isPartialTableCell(cell)) {\n    return isCellEmpty(cell.content);\n  } else if (typeof cell === \"string\") {\n    return cell.length === 0;\n  } else if (Array.isArray(cell)) {\n    return cell.every((c) =>\n      typeof c === \"string\"\n        ? c.length === 0\n        : isStyledTextInlineContent(c)\n          ? c.text.length === 0\n          : isPartialLinkInlineContent(c)\n            ? typeof c.content === \"string\"\n              ? c.content.length === 0\n              : c.content.every((s) => s.text.length === 0)\n            : false,\n    );\n  } else {\n    return false;\n  }\n}\n\n/**\n * This will remove empty rows or columns from the table.\n *\n * @note This is a destructive operation, it will modify the {@link OccupancyGrid} in place.\n */\nexport function cropEmptyRowsOrColumns(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  removeEmpty: \"columns\" | \"rows\",\n  occupancyGrid: OccupancyGrid = getTableCellOccupancyGrid(block),\n): TableContent<any, any>[\"rows\"] {\n  if (removeEmpty === \"columns\") {\n    // strips empty columns on the right\n    let emptyColsOnRight = 0;\n    for (\n      let cellIndex = occupancyGrid[0].length - 1;\n      cellIndex >= 0;\n      cellIndex--\n    ) {\n      const isEmpty = occupancyGrid.every(\n        (row) =>\n          isCellEmpty(row[cellIndex].cell) && row[cellIndex].colspan === 1,\n      );\n      if (!isEmpty) {\n        break;\n      }\n\n      emptyColsOnRight++;\n    }\n\n    for (let i = occupancyGrid.length - 1; i >= 0; i--) {\n      // We maintain at least one cell, even if all the cells are empty\n      const cellsToRemove = Math.max(\n        occupancyGrid[i].length - emptyColsOnRight,\n        1,\n      );\n      occupancyGrid[i] = occupancyGrid[i].slice(0, cellsToRemove);\n    }\n\n    return getTableRowsFromOccupancyGrid(occupancyGrid);\n  }\n\n  // strips empty rows at the bottom\n  let emptyRowsOnBottom = 0;\n  for (let rowIndex = occupancyGrid.length - 1; rowIndex >= 0; rowIndex--) {\n    const isEmpty = occupancyGrid[rowIndex].every(\n      (cell) => isCellEmpty(cell.cell) && cell.rowspan === 1,\n    );\n    if (!isEmpty) {\n      break;\n    }\n\n    emptyRowsOnBottom++;\n  }\n\n  // We maintain at least one row, even if all the rows are empty\n  const rowsToRemove = Math.min(emptyRowsOnBottom, occupancyGrid.length - 1);\n\n  occupancyGrid.splice(occupancyGrid.length - rowsToRemove, rowsToRemove);\n\n  return getTableRowsFromOccupancyGrid(occupancyGrid);\n}\n\n/**\n * This will add a specified number of rows or columns to the table (filling with empty cells).\n *\n * @note This is a destructive operation, it will modify the {@link OccupancyGrid} in place.\n */\nexport function addRowsOrColumns(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  addType: \"columns\" | \"rows\",\n  /**\n   * The number of rows or columns to add.\n   *\n   * @note if negative, it will remove rows or columns.\n   */\n  numToAdd: number,\n  occupancyGrid: OccupancyGrid = getTableCellOccupancyGrid(block),\n): TableContent<any, any>[\"rows\"] {\n  const { width, height } = getDimensionsOfTable(block);\n\n  if (addType === \"columns\") {\n    // Add empty columns to the right\n    occupancyGrid.forEach((row, rowIndex) => {\n      if (numToAdd >= 0) {\n        for (let i = 0; i < numToAdd; i++) {\n          row.push({\n            row: rowIndex,\n            col: Math.max(...row.map((r) => r.col)) + 1,\n            rowspan: 1,\n            colspan: 1,\n            cell: mapTableCell(\"\"),\n          });\n        }\n      } else {\n        // Remove columns on the right\n        row.splice(width + numToAdd, -1 * numToAdd);\n      }\n    });\n  } else {\n    if (numToAdd > 0) {\n      // Add empty rows to the bottom\n      for (let i = 0; i < numToAdd; i++) {\n        const newRow = new Array(width).fill(null).map((_, colIndex) => ({\n          row: height + i,\n          col: colIndex,\n          rowspan: 1,\n          colspan: 1,\n          cell: mapTableCell(\"\"),\n        }));\n        occupancyGrid.push(newRow);\n      }\n    } else if (numToAdd < 0) {\n      // Remove rows at the bottom\n      occupancyGrid.splice(height + numToAdd, -1 * numToAdd);\n    }\n  }\n\n  return getTableRowsFromOccupancyGrid(occupancyGrid);\n}\n\n/**\n * Checks if a row can be safely dropped at the target row index without splitting merged cells.\n */\nexport function canRowBeDraggedInto(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  draggingIndex: RelativeCellIndices[\"row\"],\n  targetRowIndex: RelativeCellIndices[\"row\"],\n) {\n  // Check cells at the target row\n  const targetCells = getCellsAtRowHandle(block, targetRowIndex);\n\n  // If no cells have rowspans > 1, dragging is always allowed\n  const hasMergedCells = targetCells.some((cell) => getRowspan(cell.cell) > 1);\n  if (!hasMergedCells) {\n    return true;\n  }\n\n  let endRowIndex = targetRowIndex;\n  let startRowIndex = targetRowIndex;\n  targetCells.forEach((cell) => {\n    const rowspan = getRowspan(cell.cell);\n    endRowIndex = Math.max(endRowIndex, cell.row + rowspan - 1);\n    startRowIndex = Math.min(startRowIndex, cell.row);\n  });\n\n  // Check the direction of the drag\n  const isDraggingDown = draggingIndex < targetRowIndex;\n\n  // Allow dragging only at the start/end of merged cells\n  // Otherwise, the target row was within a merged cell which we don't allow\n  return isDraggingDown\n    ? targetRowIndex === endRowIndex\n    : targetRowIndex === startRowIndex;\n}\n\n/**\n * Checks if a column can be safely dropped at the target column index without splitting merged cells.\n */\nexport function canColumnBeDraggedInto(\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n  draggingIndex: RelativeCellIndices[\"col\"],\n  targetColumnIndex: RelativeCellIndices[\"col\"],\n) {\n  // Check cells at the target column\n  const targetCells = getCellsAtColumnHandle(block, targetColumnIndex);\n\n  // If no cells have colspans > 1, dragging is always allowed\n  const hasMergedCells = targetCells.some((cell) => getColspan(cell.cell) > 1);\n  if (!hasMergedCells) {\n    return true;\n  }\n\n  let endColumnIndex = targetColumnIndex;\n  let startColumnIndex = targetColumnIndex;\n  targetCells.forEach((cell) => {\n    const colspan = getColspan(cell.cell);\n    endColumnIndex = Math.max(endColumnIndex, cell.col + colspan - 1);\n    startColumnIndex = Math.min(startColumnIndex, cell.col);\n  });\n\n  // Check the direction of the drag\n  const isDraggingRight = draggingIndex < targetColumnIndex;\n\n  // Allow dragging only at the start/end of merged cells\n  // Otherwise, the target column was within a merged cell which we don't allow\n  return isDraggingRight\n    ? targetColumnIndex === endColumnIndex\n    : targetColumnIndex === startColumnIndex;\n}\n\n/**\n * Checks if two cells are in the same column.\n *\n * @returns True if the cells are in the same column, false otherwise.\n */\nexport function areInSameColumn(\n  from: RelativeCellIndices,\n  to: RelativeCellIndices,\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n) {\n  // Table indices are relative to the table, so we need to resolve the absolute cell indices\n  const anchorAbsoluteCellIndices = getAbsoluteTableCells(from, block);\n\n  // Table indices are relative to the table, so we need to resolve the absolute cell indices\n  const headAbsoluteCellIndices = getAbsoluteTableCells(to, block);\n\n  // Compare the column indices to determine the merge direction\n  return anchorAbsoluteCellIndices.col === headAbsoluteCellIndices.col;\n}\n","import { Attrs, Fragment, Mark, Node, Schema } from \"@tiptap/pm/model\";\n\nimport UniqueID from \"../../extensions/UniqueID/UniqueID.js\";\nimport type {\n  InlineContentSchema,\n  PartialCustomInlineContentFromConfig,\n  PartialInlineContent,\n  PartialLink,\n  PartialTableContent,\n  StyleSchema,\n  StyledText,\n} from \"../../schema\";\n\nimport type { PartialBlock } from \"../../blocks/defaultBlocks\";\nimport {\n  isPartialLinkInlineContent,\n  isStyledTextInlineContent,\n} from \"../../schema/inlineContent/types.js\";\nimport { getColspan, isPartialTableCell } from \"../../util/table.js\";\nimport { UnreachableCaseError } from \"../../util/typescript.js\";\nimport { getAbsoluteTableCells } from \"../blockManipulation/tables/tables.js\";\nimport { getStyleSchema } from \"../pmUtil.js\";\n\n/**\n * Convert a StyledText inline element to a\n * prosemirror text node with the appropriate marks\n */\nfunction styledTextToNodes<T extends StyleSchema>(\n  styledText: StyledText<T>,\n  schema: Schema,\n  styleSchema: T,\n  blockType?: string,\n): Node[] {\n  const marks: Mark[] = [];\n\n  for (const [style, value] of Object.entries(styledText.styles || {})) {\n    const config = styleSchema[style];\n    if (!config) {\n      throw new Error(`style ${style} not found in styleSchema`);\n    }\n\n    if (config.propSchema === \"boolean\") {\n      if (value) {\n        marks.push(schema.mark(style));\n      }\n    } else if (config.propSchema === \"string\") {\n      if (value) {\n        marks.push(schema.mark(style, { stringValue: value }));\n      }\n    } else {\n      throw new UnreachableCaseError(config.propSchema);\n    }\n  }\n\n  const parseHardBreaks = !blockType || !schema.nodes[blockType].spec.code;\n\n  if (!parseHardBreaks) {\n    return styledText.text.length > 0\n      ? [schema.text(styledText.text, marks)]\n      : [];\n  }\n\n  return (\n    styledText.text\n      // Splits text & line breaks.\n      .split(/(\\n)/g)\n      // If the content ends with a line break, an empty string is added to the\n      // end, which this removes.\n      .filter((text) => text.length > 0)\n      // Converts text & line breaks to nodes.\n      .map((text) => {\n        if (text === \"\\n\") {\n          return schema.nodes[\"hardBreak\"].createChecked();\n        } else {\n          return schema.text(text, marks);\n        }\n      })\n  );\n}\n\n/**\n * Converts a Link inline content element to\n * prosemirror text nodes with the appropriate marks\n */\nfunction linkToNodes(\n  link: PartialLink<StyleSchema>,\n  schema: Schema,\n  styleSchema: StyleSchema,\n): Node[] {\n  const linkMark = schema.marks.link.create({\n    href: link.href,\n  });\n\n  return styledTextArrayToNodes(link.content, schema, styleSchema).map(\n    (node) => {\n      if (node.type.name === \"text\") {\n        return node.mark([...node.marks, linkMark]);\n      }\n\n      if (node.type.name === \"hardBreak\") {\n        return node;\n      }\n      throw new Error(\"unexpected node type\");\n    },\n  );\n}\n\n/**\n * Converts an array of StyledText inline content elements to\n * prosemirror text nodes with the appropriate marks\n */\nfunction styledTextArrayToNodes<S extends StyleSchema>(\n  content: string | StyledText<S>[],\n  schema: Schema,\n  styleSchema: S,\n  blockType?: string,\n): Node[] {\n  const nodes: Node[] = [];\n\n  if (typeof content === \"string\") {\n    nodes.push(\n      ...styledTextToNodes(\n        { type: \"text\", text: content, styles: {} },\n        schema,\n        styleSchema,\n        blockType,\n      ),\n    );\n    return nodes;\n  }\n\n  for (const styledText of content) {\n    nodes.push(\n      ...styledTextToNodes(styledText, schema, styleSchema, blockType),\n    );\n  }\n  return nodes;\n}\n\n/**\n * converts an array of inline content elements to prosemirror nodes\n */\nexport function inlineContentToNodes<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  blockContent: PartialInlineContent<I, S>,\n  schema: Schema,\n  blockType?: string,\n  styleSchema: S = getStyleSchema(schema),\n): Node[] {\n  const nodes: Node[] = [];\n\n  for (const content of blockContent) {\n    if (typeof content === \"string\") {\n      nodes.push(\n        ...styledTextArrayToNodes(content, schema, styleSchema, blockType),\n      );\n    } else if (isPartialLinkInlineContent(content)) {\n      nodes.push(...linkToNodes(content, schema, styleSchema));\n    } else if (isStyledTextInlineContent(content)) {\n      nodes.push(\n        ...styledTextArrayToNodes([content], schema, styleSchema, blockType),\n      );\n    } else {\n      nodes.push(\n        blockOrInlineContentToContentNode(content, schema, styleSchema),\n      );\n    }\n  }\n  return nodes;\n}\n\n/**\n * converts an array of inline content elements to prosemirror nodes\n */\nexport function tableContentToNodes<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  tableContent: PartialTableContent<I, S>,\n  schema: Schema,\n  styleSchema: StyleSchema = getStyleSchema(schema),\n): Node[] {\n  const rowNodes: Node[] = [];\n  // Header rows and columns are used to determine the type of the cell\n  // If headerRows is 1, then the first row is a header row\n  const headerRows = new Array(tableContent.headerRows ?? 0).fill(true);\n  // If headerCols is 1, then the first column is a header column\n  const headerCols = new Array(tableContent.headerCols ?? 0).fill(true);\n\n  const columnWidths: (number | undefined)[] = tableContent.columnWidths ?? [];\n\n  for (let rowIndex = 0; rowIndex < tableContent.rows.length; rowIndex++) {\n    const row = tableContent.rows[rowIndex];\n    const columnNodes: Node[] = [];\n    const isHeaderRow = headerRows[rowIndex];\n    for (let cellIndex = 0; cellIndex < row.cells.length; cellIndex++) {\n      const cell = row.cells[cellIndex];\n      const isHeaderCol = headerCols[cellIndex];\n      /**\n       * The attributes of the cell to apply to the node\n       */\n      const attrs: Attrs | undefined = undefined;\n      /**\n       * The content of the cell to apply to the node\n       */\n      let content: Fragment | Node | readonly Node[] | null = null;\n\n      // Colwidths are absolutely referenced to the table, so we need to resolve the relative cell index to the absolute cell index\n      const absoluteCellIndex = getAbsoluteTableCells(\n        {\n          row: rowIndex,\n          col: cellIndex,\n        },\n        { type: \"table\", content: tableContent } as any,\n      );\n\n      // Assume the column width is the width of the cell at the absolute cell index\n      let colwidth: (number | undefined)[] | null = columnWidths[\n        absoluteCellIndex.col\n      ]\n        ? [columnWidths[absoluteCellIndex.col]]\n        : null;\n\n      if (!cell) {\n        // No-op\n      } else if (typeof cell === \"string\") {\n        content = schema.text(cell);\n      } else if (isPartialTableCell(cell)) {\n        if (cell.content) {\n          content = inlineContentToNodes(\n            cell.content,\n            schema,\n            \"tableParagraph\",\n            styleSchema,\n          );\n        }\n        const colspan = getColspan(cell);\n\n        if (colspan > 1) {\n          // If the cell has a > 1 colspan, we need to get the column width for each cell in the span\n          colwidth = new Array(colspan).fill(false).map((_, i) => {\n            // Starting from the absolute column index, get the column width for each cell in the span\n            return columnWidths[absoluteCellIndex.col + i] ?? undefined;\n          });\n        }\n      } else {\n        content = inlineContentToNodes(\n          cell,\n          schema,\n          \"tableParagraph\",\n          styleSchema,\n        );\n      }\n\n      const cellNode = schema.nodes[\n        isHeaderCol || isHeaderRow ? \"tableHeader\" : \"tableCell\"\n      ].createChecked(\n        {\n          ...(isPartialTableCell(cell) ? cell.props : {}),\n          colwidth,\n        },\n        schema.nodes[\"tableParagraph\"].createChecked(attrs, content),\n      );\n      columnNodes.push(cellNode);\n    }\n\n    const rowNode = schema.nodes[\"tableRow\"].createChecked({}, columnNodes);\n    rowNodes.push(rowNode);\n  }\n  return rowNodes;\n}\n\nfunction blockOrInlineContentToContentNode(\n  block:\n    | PartialBlock<any, any, any>\n    | PartialCustomInlineContentFromConfig<any, any>,\n  schema: Schema,\n  styleSchema: StyleSchema,\n) {\n  let contentNode: Node;\n  let type = block.type;\n\n  // TODO: needed? came from previous code\n  if (type === undefined) {\n    type = \"paragraph\";\n  }\n\n  if (!schema.nodes[type]) {\n    throw new Error(`node type ${type} not found in schema`);\n  }\n\n  if (!block.content) {\n    contentNode = schema.nodes[type].createChecked(block.props);\n  } else if (typeof block.content === \"string\") {\n    const nodes = inlineContentToNodes(\n      [block.content],\n      schema,\n      type,\n      styleSchema,\n    );\n    contentNode = schema.nodes[type].createChecked(block.props, nodes);\n  } else if (Array.isArray(block.content)) {\n    const nodes = inlineContentToNodes(\n      block.content,\n      schema,\n      type,\n      styleSchema,\n    );\n    contentNode = schema.nodes[type].createChecked(block.props, nodes);\n  } else if (block.content.type === \"tableContent\") {\n    const nodes = tableContentToNodes(block.content, schema, styleSchema);\n    contentNode = schema.nodes[type].createChecked(block.props, nodes);\n  } else {\n    throw new UnreachableCaseError(block.content.type);\n  }\n  return contentNode;\n}\n\n/**\n * Converts a BlockNote block to a Prosemirror node.\n */\nexport function blockToNode(\n  block: PartialBlock<any, any, any>,\n  schema: Schema,\n  styleSchema: StyleSchema = getStyleSchema(schema),\n) {\n  let id = block.id;\n\n  if (id === undefined) {\n    id = UniqueID.options.generateID();\n  }\n\n  const children: Node[] = [];\n\n  if (block.children) {\n    for (const child of block.children) {\n      children.push(blockToNode(child, schema, styleSchema));\n    }\n  }\n\n  const isBlockContent =\n    !block.type || // can happen if block.type is not defined (this should create the default node)\n    schema.nodes[block.type].isInGroup(\"blockContent\");\n\n  if (isBlockContent) {\n    // Blocks with a type that matches \"blockContent\" group always need to be wrapped in a blockContainer\n\n    const contentNode = blockOrInlineContentToContentNode(\n      block,\n      schema,\n      styleSchema,\n    );\n\n    const groupNode =\n      children.length > 0\n        ? schema.nodes[\"blockGroup\"].createChecked({}, children)\n        : undefined;\n\n    return schema.nodes[\"blockContainer\"].createChecked(\n      {\n        id: id,\n        ...block.props,\n      },\n      groupNode ? [contentNode, groupNode] : contentNode,\n    );\n  } else if (schema.nodes[block.type].isInGroup(\"bnBlock\")) {\n    // this is a bnBlock node like Column or ColumnList that directly translates to a prosemirror node\n    return schema.nodes[block.type].createChecked(\n      {\n        id: id,\n        ...block.props,\n      },\n      children,\n    );\n  } else {\n    throw new Error(\n      `block type ${block.type} doesn't match blockContent or bnBlock group`,\n    );\n  }\n}\n","import { combineTransactionSteps } from \"@tiptap/core\";\nimport type { Node } from \"prosemirror-model\";\nimport type { Transaction } from \"prosemirror-state\";\nimport {\n  Block,\n  DefaultBlockSchema,\n  DefaultInlineContentSchema,\n  DefaultStyleSchema,\n} from \"../blocks/defaultBlocks.js\";\nimport type { BlockSchema } from \"../schema/index.js\";\nimport type { InlineContentSchema } from \"../schema/inlineContent/types.js\";\nimport type { StyleSchema } from \"../schema/styles/types.js\";\nimport { nodeToBlock } from \"./nodeConversions/nodeToBlock.js\";\nimport { getPmSchema } from \"./pmUtil.js\";\n\n/**\n * Gets the parent block of a node, if it has one.\n */\nfunction getParentBlockId(doc: Node, pos: number): string | undefined {\n  if (pos === 0) {\n    return undefined;\n  }\n  const resolvedPos = doc.resolve(pos);\n  for (let i = resolvedPos.depth; i > 0; i--) {\n    const parent = resolvedPos.node(i);\n    if (isNodeBlock(parent)) {\n      return parent.attrs.id;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Get a TipTap node by id\n */\nexport function getNodeById(\n  id: string,\n  doc: Node,\n): { node: Node; posBeforeNode: number } | undefined {\n  let targetNode: Node | undefined = undefined;\n  let posBeforeNode: number | undefined = undefined;\n\n  doc.firstChild!.descendants((node, pos) => {\n    // Skips traversing nodes after node with target ID has been found.\n    if (targetNode) {\n      return false;\n    }\n\n    // Keeps traversing nodes if block with target ID has not been found.\n    if (!isNodeBlock(node) || node.attrs.id !== id) {\n      return true;\n    }\n\n    targetNode = node;\n    posBeforeNode = pos + 1;\n\n    return false;\n  });\n\n  if (targetNode === undefined || posBeforeNode === undefined) {\n    return undefined;\n  }\n\n  return {\n    node: targetNode,\n    posBeforeNode: posBeforeNode,\n  };\n}\n\nexport function isNodeBlock(node: Node): boolean {\n  return node.type.isInGroup(\"bnBlock\");\n}\n\n/**\n * This attributes the changes to a specific source.\n */\nexport type BlockChangeSource =\n  | { type: \"local\" }\n  | { type: \"paste\" }\n  | { type: \"drop\" }\n  | { type: \"undo\" | \"redo\" | \"undo-redo\" }\n  | { type: \"yjs-remote\" };\n\nexport type BlocksChanged<\n  BSchema extends BlockSchema = DefaultBlockSchema,\n  ISchema extends InlineContentSchema = DefaultInlineContentSchema,\n  SSchema extends StyleSchema = DefaultStyleSchema,\n> = Array<\n  {\n    /**\n     * The affected block.\n     */\n    block: Block<BSchema, ISchema, SSchema>;\n    /**\n     * The source of the change.\n     */\n    source: BlockChangeSource;\n  } & (\n    | {\n        type: \"insert\" | \"delete\";\n        /**\n         * Insert and delete changes don't have a previous block.\n         */\n        prevBlock: undefined;\n      }\n    | {\n        type: \"update\";\n        /**\n         * The previous block.\n         */\n        prevBlock: Block<BSchema, ISchema, SSchema>;\n      }\n    | {\n        type: \"move\";\n        /**\n         * The affected block.\n         */\n        block: Block<BSchema, ISchema, SSchema>;\n        /**\n         * The block before the move.\n         */\n        prevBlock: Block<BSchema, ISchema, SSchema>;\n        /**\n         * The previous parent block (if it existed).\n         */\n        prevParent?: Block<BSchema, ISchema, SSchema>;\n        /**\n         * The current parent block (if it exists).\n         */\n        currentParent?: Block<BSchema, ISchema, SSchema>;\n      }\n  )\n>;\n\n/**\n * Compares two blocks, ignoring their children.\n * Returns true if the blocks are different (excluding children).\n */\nfunction areBlocksDifferentExcludingChildren<\n  BSchema extends BlockSchema,\n  ISchema extends InlineContentSchema,\n  SSchema extends StyleSchema,\n>(\n  block1: Block<BSchema, ISchema, SSchema>,\n  block2: Block<BSchema, ISchema, SSchema>,\n): boolean {\n  return (\n    block1.id !== block2.id ||\n    block1.type !== block2.type ||\n    JSON.stringify(block1.props) !== JSON.stringify(block2.props) ||\n    JSON.stringify(block1.content) !== JSON.stringify(block2.content)\n  );\n}\n\nfunction determineChangeSource(transaction: Transaction): BlockChangeSource {\n  if (transaction.getMeta(\"paste\")) {\n    return { type: \"paste\" };\n  }\n  if (transaction.getMeta(\"uiEvent\") === \"drop\") {\n    return { type: \"drop\" };\n  }\n  if (transaction.getMeta(\"history$\")) {\n    return {\n      type: transaction.getMeta(\"history$\").redo ? \"redo\" : \"undo\",\n    };\n  }\n  if (transaction.getMeta(\"y-sync$\")) {\n    if (transaction.getMeta(\"y-sync$\").isUndoRedoOperation) {\n      return { type: \"undo-redo\" };\n    }\n    return { type: \"yjs-remote\" };\n  }\n  return { type: \"local\" };\n}\n\nfunction collectAllBlocks<\n  BSchema extends BlockSchema,\n  ISchema extends InlineContentSchema,\n  SSchema extends StyleSchema,\n>(\n  doc: Node,\n): Record<\n  string,\n  {\n    block: Block<BSchema, ISchema, SSchema>;\n    parentId: string | undefined;\n  }\n> {\n  const blocks: Record<\n    string,\n    {\n      block: Block<BSchema, ISchema, SSchema>;\n      parentId: string | undefined;\n    }\n  > = {};\n  const pmSchema = getPmSchema(doc);\n  doc.descendants((node, pos) => {\n    if (isNodeBlock(node)) {\n      const parentId = getParentBlockId(doc, pos);\n      blocks[node.attrs.id] = {\n        block: nodeToBlock(node, pmSchema),\n        parentId,\n      };\n    }\n    return true;\n  });\n  return blocks;\n}\n\n/**\n * Get the blocks that were changed by a transaction.\n */\nexport function getBlocksChangedByTransaction<\n  BSchema extends BlockSchema = DefaultBlockSchema,\n  ISchema extends InlineContentSchema = DefaultInlineContentSchema,\n  SSchema extends StyleSchema = DefaultStyleSchema,\n>(\n  transaction: Transaction,\n  appendedTransactions: Transaction[] = [],\n): BlocksChanged<BSchema, ISchema, SSchema> {\n  const source = determineChangeSource(transaction);\n  const combinedTransaction = combineTransactionSteps(transaction.before, [\n    transaction,\n    ...appendedTransactions,\n  ]);\n\n  const prevBlocks = collectAllBlocks<BSchema, ISchema, SSchema>(\n    combinedTransaction.before,\n  );\n  const nextBlocks = collectAllBlocks<BSchema, ISchema, SSchema>(\n    combinedTransaction.doc,\n  );\n\n  const changes: BlocksChanged<BSchema, ISchema, SSchema> = [];\n\n  // Handle inserted blocks\n  Object.keys(nextBlocks)\n    .filter((id) => !(id in prevBlocks))\n    .forEach((id) => {\n      changes.push({\n        type: \"insert\",\n        block: nextBlocks[id].block,\n        source,\n        prevBlock: undefined,\n      });\n    });\n\n  // Handle deleted blocks\n  Object.keys(prevBlocks)\n    .filter((id) => !(id in nextBlocks))\n    .forEach((id) => {\n      changes.push({\n        type: \"delete\",\n        block: prevBlocks[id].block,\n        source,\n        prevBlock: undefined,\n      });\n    });\n\n  // Handle updated, moved, indented, outdented blocks\n  Object.keys(nextBlocks)\n    .filter((id) => id in prevBlocks)\n    .forEach((id) => {\n      const prev = prevBlocks[id];\n      const next = nextBlocks[id];\n      const isParentDifferent = prev.parentId !== next.parentId;\n\n      if (isParentDifferent) {\n        changes.push({\n          type: \"move\",\n          block: next.block,\n          prevBlock: prev.block,\n          source,\n          prevParent: prev.parentId\n            ? prevBlocks[prev.parentId]?.block\n            : undefined,\n          currentParent: next.parentId\n            ? nextBlocks[next.parentId]?.block\n            : undefined,\n        });\n      } else if (areBlocksDifferentExcludingChildren(prev.block, next.block)) {\n        changes.push({\n          type: \"update\",\n          block: next.block,\n          prevBlock: prev.block,\n          source,\n        });\n      }\n    });\n\n  return changes;\n}\n","import { Fragment, Slice } from \"prosemirror-model\";\nimport type { Transaction } from \"prosemirror-state\";\nimport { ReplaceStep } from \"prosemirror-transform\";\nimport { Block, PartialBlock } from \"../../../../blocks/defaultBlocks.js\";\nimport {\n  BlockIdentifier,\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../../schema/index.js\";\nimport { blockToNode } from \"../../../nodeConversions/blockToNode.js\";\nimport { nodeToBlock } from \"../../../nodeConversions/nodeToBlock.js\";\nimport { getNodeById } from \"../../../nodeUtil.js\";\nimport { getPmSchema } from \"../../../pmUtil.js\";\n\nexport function insertBlocks<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  tr: Transaction,\n  blocksToInsert: PartialBlock<BSchema, I, S>[],\n  referenceBlock: BlockIdentifier,\n  placement: \"before\" | \"after\" = \"before\",\n): Block<BSchema, I, S>[] {\n  const id =\n    typeof referenceBlock === \"string\" ? referenceBlock : referenceBlock.id;\n  const pmSchema = getPmSchema(tr);\n  const nodesToInsert = blocksToInsert.map((block) =>\n    blockToNode(block, pmSchema),\n  );\n\n  const posInfo = getNodeById(id, tr.doc);\n  if (!posInfo) {\n    throw new Error(`Block with ID ${id} not found`);\n  }\n\n  let pos = posInfo.posBeforeNode;\n  if (placement === \"after\") {\n    pos += posInfo.node.nodeSize;\n  }\n\n  tr.step(\n    new ReplaceStep(pos, pos, new Slice(Fragment.from(nodesToInsert), 0, 0)),\n  );\n\n  // Now that the `PartialBlock`s have been converted to nodes, we can\n  // re-convert them into full `Block`s.\n  const insertedBlocks = nodesToInsert.map((node) =>\n    nodeToBlock(node, pmSchema),\n  );\n\n  return insertedBlocks;\n}\n","import type { Node } from \"prosemirror-model\";\nimport type { Transaction } from \"prosemirror-state\";\nimport type { Block, PartialBlock } from \"../../../../blocks/defaultBlocks.js\";\nimport type {\n  BlockIdentifier,\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../../schema/index.js\";\nimport { blockToNode } from \"../../../nodeConversions/blockToNode.js\";\nimport { nodeToBlock } from \"../../../nodeConversions/nodeToBlock.js\";\nimport { getPmSchema } from \"../../../pmUtil.js\";\n\nexport function removeAndInsertBlocks<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  tr: Transaction,\n  blocksToRemove: BlockIdentifier[],\n  blocksToInsert: PartialBlock<BSchema, I, S>[],\n): {\n  insertedBlocks: Block<BSchema, I, S>[];\n  removedBlocks: Block<BSchema, I, S>[];\n} {\n  const pmSchema = getPmSchema(tr);\n  // Converts the `PartialBlock`s to ProseMirror nodes to insert them into the\n  // document.\n  const nodesToInsert: Node[] = blocksToInsert.map((block) =>\n    blockToNode(block, pmSchema),\n  );\n\n  const idsOfBlocksToRemove = new Set<string>(\n    blocksToRemove.map((block) =>\n      typeof block === \"string\" ? block : block.id,\n    ),\n  );\n  const removedBlocks: Block<BSchema, I, S>[] = [];\n\n  const idOfFirstBlock =\n    typeof blocksToRemove[0] === \"string\"\n      ? blocksToRemove[0]\n      : blocksToRemove[0].id;\n  let removedSize = 0;\n\n  tr.doc.descendants((node, pos) => {\n    // Skips traversing nodes after all target blocks have been removed.\n    if (idsOfBlocksToRemove.size === 0) {\n      return false;\n    }\n\n    // Keeps traversing nodes if block with target ID has not been found.\n    if (\n      !node.type.isInGroup(\"bnBlock\") ||\n      !idsOfBlocksToRemove.has(node.attrs.id)\n    ) {\n      return true;\n    }\n\n    // Saves the block that is being deleted.\n    removedBlocks.push(nodeToBlock(node, pmSchema));\n    idsOfBlocksToRemove.delete(node.attrs.id);\n\n    if (blocksToInsert.length > 0 && node.attrs.id === idOfFirstBlock) {\n      const oldDocSize = tr.doc.nodeSize;\n      tr.insert(pos, nodesToInsert);\n      const newDocSize = tr.doc.nodeSize;\n\n      removedSize += oldDocSize - newDocSize;\n    }\n\n    const oldDocSize = tr.doc.nodeSize;\n    // Checks if the block is the only child of its parent. In this case, we\n    // need to delete the parent `blockGroup` node instead of just the\n    // `blockContainer`.\n    const $pos = tr.doc.resolve(pos - removedSize);\n    if (\n      $pos.node().type.name === \"blockGroup\" &&\n      $pos.node($pos.depth - 1).type.name !== \"doc\" &&\n      $pos.node().childCount === 1\n    ) {\n      tr.delete($pos.before(), $pos.after());\n    } else {\n      tr.delete(pos - removedSize, pos - removedSize + node.nodeSize);\n    }\n    const newDocSize = tr.doc.nodeSize;\n    removedSize += oldDocSize - newDocSize;\n\n    return false;\n  });\n\n  // Throws an error if now all blocks could be found.\n  if (idsOfBlocksToRemove.size > 0) {\n    const notFoundIds = [...idsOfBlocksToRemove].join(\"\\n\");\n\n    throw Error(\n      \"Blocks with the following IDs could not be found in the editor: \" +\n        notFoundIds,\n    );\n  }\n\n  // Converts the nodes created from `blocksToInsert` into full `Block`s.\n  const insertedBlocks = nodesToInsert.map((node) =>\n    nodeToBlock(node, pmSchema),\n  );\n\n  return { insertedBlocks, removedBlocks };\n}","import {\n  Fragment,\n  type NodeType,\n  type Node as PMNode,\n  Slice,\n} from \"prosemirror-model\";\nimport type { Transaction } from \"prosemirror-state\";\n\nimport { ReplaceStep, Transform } from \"prosemirror-transform\";\nimport type { Block, PartialBlock } from \"../../../../blocks/defaultBlocks.js\";\nimport type {\n  BlockIdentifier,\n  BlockSchema,\n} from \"../../../../schema/blocks/types.js\";\nimport type { InlineContentSchema } from \"../../../../schema/inlineContent/types.js\";\nimport type { StyleSchema } from \"../../../../schema/styles/types.js\";\nimport { UnreachableCaseError } from \"../../../../util/typescript.js\";\nimport {\n  type BlockInfo,\n  getBlockInfoFromResolvedPos,\n} from \"../../../getBlockInfoFromPos.js\";\nimport {\n  blockToNode,\n  inlineContentToNodes,\n  tableContentToNodes,\n} from \"../../../nodeConversions/blockToNode.js\";\nimport { nodeToBlock } from \"../../../nodeConversions/nodeToBlock.js\";\nimport { getNodeById } from \"../../../nodeUtil.js\";\nimport { getPmSchema } from \"../../../pmUtil.js\";\n\n// for compatibility with tiptap. TODO: remove as we want to remove dependency on tiptap command interface\nexport const updateBlockCommand = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  posBeforeBlock: number,\n  block: PartialBlock<BSchema, I, S>,\n) => {\n  return ({\n    tr,\n    dispatch,\n  }: {\n    tr: Transaction;\n    dispatch?: () => void;\n  }): boolean => {\n    if (dispatch) {\n      updateBlockTr(tr, posBeforeBlock, block);\n    }\n    return true;\n  };\n};\n\nexport function updateBlockTr<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  tr: Transform,\n  posBeforeBlock: number,\n  block: PartialBlock<BSchema, I, S>,\n  replaceFromPos?: number,\n  replaceToPos?: number,\n) {\n  const blockInfo = getBlockInfoFromResolvedPos(tr.doc.resolve(posBeforeBlock));\n\n  const pmSchema = getPmSchema(tr);\n\n  if (\n    replaceFromPos !== undefined &&\n    replaceToPos !== undefined &&\n    replaceFromPos > replaceToPos\n  ) {\n    throw new Error(\"Invalid replaceFromPos or replaceToPos\");\n  }\n\n  // Adds blockGroup node with child blocks if necessary.\n\n  const oldNodeType = pmSchema.nodes[blockInfo.blockNoteType];\n  const newNodeType = pmSchema.nodes[block.type || blockInfo.blockNoteType];\n  const newBnBlockNodeType = newNodeType.isInGroup(\"bnBlock\")\n    ? newNodeType\n    : pmSchema.nodes[\"blockContainer\"];\n\n  if (blockInfo.isBlockContainer && newNodeType.isInGroup(\"blockContent\")) {\n    const replaceFromOffset =\n      replaceFromPos !== undefined &&\n      replaceFromPos > blockInfo.blockContent.beforePos &&\n      replaceFromPos < blockInfo.blockContent.afterPos\n        ? replaceFromPos - blockInfo.blockContent.beforePos - 1\n        : undefined;\n\n    const replaceToOffset =\n      replaceToPos !== undefined &&\n      replaceToPos > blockInfo.blockContent.beforePos &&\n      replaceToPos < blockInfo.blockContent.afterPos\n        ? replaceToPos - blockInfo.blockContent.beforePos - 1\n        : undefined;\n\n    updateChildren(block, tr, blockInfo);\n    // The code below determines the new content of the block.\n    // or \"keep\" to keep as-is\n    updateBlockContentNode(\n      block,\n      tr,\n      oldNodeType,\n      newNodeType,\n      blockInfo,\n      replaceFromOffset,\n      replaceToOffset,\n    );\n  } else if (!blockInfo.isBlockContainer && newNodeType.isInGroup(\"bnBlock\")) {\n    updateChildren(block, tr, blockInfo);\n    // old node was a bnBlock type (like column or columnList) and new block as well\n    // No op, we just update the bnBlock below (at end of function) and have already updated the children\n  } else {\n    // switching from blockContainer to non-blockContainer or v.v.\n    // currently breaking for column slash menu items converting empty block\n    // to column.\n\n    // currently, we calculate the new node and replace the entire node with the desired new node.\n    // for this, we do a nodeToBlock on the existing block to get the children.\n    // it would be cleaner to use a ReplaceAroundStep, but this is a bit simpler and it's quite an edge case\n    const existingBlock = nodeToBlock(blockInfo.bnBlock.node, pmSchema);\n    tr.replaceWith(\n      blockInfo.bnBlock.beforePos,\n      blockInfo.bnBlock.afterPos,\n      blockToNode(\n        {\n          children: existingBlock.children, // if no children are passed in, use existing children\n          ...block,\n        },\n        pmSchema,\n      ),\n    );\n\n    return;\n  }\n\n  // Adds all provided props as attributes to the parent blockContainer node too, and also preserves existing\n  // attributes.\n  tr.setNodeMarkup(blockInfo.bnBlock.beforePos, newBnBlockNodeType, {\n    ...blockInfo.bnBlock.node.attrs,\n    ...block.props,\n  });\n}\n\nfunction updateBlockContentNode<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  block: PartialBlock<BSchema, I, S>,\n  tr: Transform,\n  oldNodeType: NodeType,\n  newNodeType: NodeType,\n  blockInfo: {\n    childContainer?:\n      | { node: PMNode; beforePos: number; afterPos: number }\n      | undefined;\n    blockContent: { node: PMNode; beforePos: number; afterPos: number };\n  },\n  replaceFromOffset?: number,\n  replaceToOffset?: number,\n) {\n  const pmSchema = getPmSchema(tr);\n  let content: PMNode[] | \"keep\" = \"keep\";\n\n  // Has there been any custom content provided?\n  if (block.content) {\n    if (typeof block.content === \"string\") {\n      // Adds a single text node with no marks to the content.\n      content = inlineContentToNodes(\n        [block.content],\n        pmSchema,\n        newNodeType.name,\n      );\n    } else if (Array.isArray(block.content)) {\n      // Adds a text node with the provided styles converted into marks to the content,\n      // for each InlineContent object.\n      content = inlineContentToNodes(block.content, pmSchema, newNodeType.name);\n    } else if (block.content.type === \"tableContent\") {\n      content = tableContentToNodes(block.content, pmSchema);\n    } else {\n      throw new UnreachableCaseError(block.content.type);\n    }\n  } else {\n    // no custom content has been provided, use existing content IF possible\n    // Since some block types contain inline content and others don't,\n    // we either need to call setNodeMarkup to just update type &\n    // attributes, or replaceWith to replace the whole blockContent.\n    if (oldNodeType.spec.content === \"\") {\n      // keep old content, because it's empty anyway and should be compatible with\n      // any newContentType\n    } else if (newNodeType.spec.content !== oldNodeType.spec.content) {\n      // the content type changed, replace the previous content\n      content = [];\n    } else {\n      // keep old content, because the content type is the same and should be compatible\n    }\n  }\n\n  // Now, changes the blockContent node type and adds the provided props\n  // as attributes. Also preserves all existing attributes that are\n  // compatible with the new type.\n  //\n  // Use either setNodeMarkup or replaceWith depending on whether the\n  // content is being replaced or not.\n  if (content === \"keep\") {\n    // use setNodeMarkup to only update the type and attributes\n    tr.setNodeMarkup(blockInfo.blockContent.beforePos, newNodeType, {\n      ...blockInfo.blockContent.node.attrs,\n      ...block.props,\n    });\n  } else if (replaceFromOffset !== undefined || replaceToOffset !== undefined) {\n    // first update markup of the containing node\n    tr.setNodeMarkup(blockInfo.blockContent.beforePos, newNodeType, {\n      ...blockInfo.blockContent.node.attrs,\n      ...block.props,\n    });\n\n    const start =\n      blockInfo.blockContent.beforePos + 1 + (replaceFromOffset ?? 0);\n    const end =\n      blockInfo.blockContent.beforePos +\n      1 +\n      (replaceToOffset ?? blockInfo.blockContent.node.content.size);\n\n    // for content like table cells (where the blockcontent has nested PM nodes),\n    // we need to figure out the correct openStart and openEnd for the slice when replacing\n\n    const contentDepth = tr.doc.resolve(blockInfo.blockContent.beforePos).depth;\n    const startDepth = tr.doc.resolve(start).depth;\n    const endDepth = tr.doc.resolve(end).depth;\n\n    tr.replace(\n      start,\n      end,\n      new Slice(\n        Fragment.from(content),\n        startDepth - contentDepth - 1,\n        endDepth - contentDepth - 1,\n      ),\n    );\n  } else {\n    // use replaceWith to replace the content and the block itself\n    // also reset the selection since replacing the block content\n    // sets it to the next block.\n    tr.replaceWith(\n      blockInfo.blockContent.beforePos,\n      blockInfo.blockContent.afterPos,\n      newNodeType.createChecked(\n        {\n          ...blockInfo.blockContent.node.attrs,\n          ...block.props,\n        },\n        content,\n      ),\n    );\n  }\n}\n\nfunction updateChildren<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(block: PartialBlock<BSchema, I, S>, tr: Transform, blockInfo: BlockInfo) {\n  const pmSchema = getPmSchema(tr);\n  if (block.children !== undefined && block.children.length > 0) {\n    const childNodes = block.children.map((child) => {\n      return blockToNode(child, pmSchema);\n    });\n\n    // Checks if a blockGroup node already exists.\n    if (blockInfo.childContainer) {\n      // Replaces all child nodes in the existing blockGroup with the ones created earlier.\n\n      // use a replacestep to avoid the fitting algorithm\n      tr.step(\n        new ReplaceStep(\n          blockInfo.childContainer.beforePos + 1,\n          blockInfo.childContainer.afterPos - 1,\n          new Slice(Fragment.from(childNodes), 0, 0),\n        ),\n      );\n    } else {\n      if (!blockInfo.isBlockContainer) {\n        throw new Error(\"impossible\");\n      }\n      // Inserts a new blockGroup containing the child nodes created earlier.\n      tr.insert(\n        blockInfo.blockContent.afterPos,\n        pmSchema.nodes[\"blockGroup\"].createChecked({}, childNodes),\n      );\n    }\n  }\n}\n\nexport function updateBlock<\n  BSchema extends BlockSchema = any,\n  I extends InlineContentSchema = any,\n  S extends StyleSchema = any,\n>(\n  tr: Transaction,\n  blockToUpdate: BlockIdentifier,\n  update: PartialBlock<BSchema, I, S>,\n  replaceFromPos?: number,\n  replaceToPos?: number,\n): Block<BSchema, I, S> {\n  const id =\n    typeof blockToUpdate === \"string\" ? blockToUpdate : blockToUpdate.id;\n  const posInfo = getNodeById(id, tr.doc);\n  if (!posInfo) {\n    throw new Error(`Block with ID ${id} not found`);\n  }\n\n  updateBlockTr(\n    tr,\n    posInfo.posBeforeNode,\n    update,\n    replaceFromPos,\n    replaceToPos,\n  );\n\n  const blockContainerNode = tr.doc\n    .resolve(posInfo.posBeforeNode + 1) // TODO: clean?\n    .node();\n\n  const pmSchema = getPmSchema(tr);\n  return nodeToBlock(blockContainerNode, pmSchema);\n}\n","import { DOMSerializer, Fragment } from \"prosemirror-model\";\n\nimport { PartialBlock } from \"../../../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../../../editor/BlockNoteEditor.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../../schema/index.js\";\nimport { UnreachableCaseError } from \"../../../../util/typescript.js\";\nimport {\n  inlineContentToNodes,\n  tableContentToNodes,\n} from \"../../../nodeConversions/blockToNode.js\";\n\nfunction addAttributesAndRemoveClasses(element: HTMLElement) {\n  // Removes all BlockNote specific class names.\n  const className =\n    Array.from(element.classList).filter(\n      (className) => !className.startsWith(\"bn-\"),\n    ) || [];\n\n  if (className.length > 0) {\n    element.className = className.join(\" \");\n  } else {\n    element.removeAttribute(\"class\");\n  }\n}\n\nexport function serializeInlineContentExternalHTML<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<any, I, S>,\n  blockContent: PartialBlock<BSchema, I, S>[\"content\"],\n  serializer: DOMSerializer,\n  options?: { document?: Document },\n) {\n  let nodes: any;\n\n  // TODO: reuse function from nodeconversions?\n  if (!blockContent) {\n    throw new Error(\"blockContent is required\");\n  } else if (typeof blockContent === \"string\") {\n    nodes = inlineContentToNodes([blockContent], editor.pmSchema);\n  } else if (Array.isArray(blockContent)) {\n    nodes = inlineContentToNodes(blockContent, editor.pmSchema);\n  } else if (blockContent.type === \"tableContent\") {\n    nodes = tableContentToNodes(blockContent, editor.pmSchema);\n  } else {\n    throw new UnreachableCaseError(blockContent.type);\n  }\n\n  // We call the prosemirror serializer here because it handles Marks and Inline Content nodes nicely.\n  // If we'd want to support custom serialization or externalHTML for Inline Content, we'd have to implement\n  // a custom serializer here.\n  const dom = serializer.serializeFragment(Fragment.from(nodes), options);\n\n  if (dom.nodeType === 1 /* Node.ELEMENT_NODE */) {\n    addAttributesAndRemoveClasses(dom as HTMLElement);\n  }\n\n  return dom;\n}\n\n/**\n * TODO: there's still quite some logic that handles getting and filtering properties,\n * we should make sure the `toExternalHTML` methods of default blocks actually handle this,\n * instead of the serializer.\n */\nfunction serializeBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  fragment: DocumentFragment,\n  editor: BlockNoteEditor<BSchema, I, S>,\n  block: PartialBlock<BSchema, I, S>,\n  serializer: DOMSerializer,\n  orderedListItemBlockTypes: Set<string>,\n  unorderedListItemBlockTypes: Set<string>,\n  options?: { document?: Document },\n) {\n  const doc = options?.document ?? document;\n  const BC_NODE = editor.pmSchema.nodes[\"blockContainer\"];\n\n  let props = block.props;\n  // set default props in case we were passed a partial block\n  if (!block.props) {\n    props = {};\n    for (const [name, spec] of Object.entries(\n      editor.schema.blockSchema[block.type as any].propSchema,\n    )) {\n      if (spec.default !== undefined) {\n        (props as any)[name] = spec.default;\n      }\n    }\n  }\n\n  const bc = BC_NODE.spec?.toDOM?.(\n    BC_NODE.create({\n      id: block.id,\n      ...props,\n    }),\n  ) as {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n  };\n\n  // the container node is just used as a workaround to get some block-level attributes.\n  // we should change toExternalHTML so that this is not necessary\n  const attrs = Array.from(bc.dom.attributes);\n\n  const ret = editor.blockImplementations[\n    block.type as any\n  ].implementation.toExternalHTML({ ...block, props } as any, editor as any);\n\n  const elementFragment = doc.createDocumentFragment();\n  if (ret.dom.classList.contains(\"bn-block-content\")) {\n    const blockContentDataAttributes = [\n      ...attrs,\n      ...Array.from(ret.dom.attributes),\n    ].filter(\n      (attr) =>\n        attr.name.startsWith(\"data\") &&\n        attr.name !== \"data-content-type\" &&\n        attr.name !== \"data-file-block\" &&\n        attr.name !== \"data-node-view-wrapper\" &&\n        attr.name !== \"data-node-type\" &&\n        attr.name !== \"data-id\" &&\n        attr.name !== \"data-index\" &&\n        attr.name !== \"data-editable\",\n    );\n\n    // ret.dom = ret.dom.firstChild! as any;\n    for (const attr of blockContentDataAttributes) {\n      (ret.dom.firstChild! as HTMLElement).setAttribute(attr.name, attr.value);\n    }\n\n    addAttributesAndRemoveClasses(ret.dom.firstChild! as HTMLElement);\n    elementFragment.append(...Array.from(ret.dom.childNodes));\n  } else {\n    elementFragment.append(ret.dom);\n  }\n\n  if (ret.contentDOM && block.content) {\n    const ic = serializeInlineContentExternalHTML(\n      editor,\n      block.content as any, // TODO\n      serializer,\n      options,\n    );\n\n    ret.contentDOM.appendChild(ic);\n  }\n\n  let listType = undefined;\n  if (orderedListItemBlockTypes.has(block.type!)) {\n    listType = \"OL\";\n  } else if (unorderedListItemBlockTypes.has(block.type!)) {\n    listType = \"UL\";\n  }\n\n  if (listType) {\n    if (fragment.lastChild?.nodeName !== listType) {\n      const list = doc.createElement(listType);\n\n      if (listType === \"OL\" && props?.start && props?.start !== 1) {\n        list.setAttribute(\"start\", props.start + \"\");\n      }\n      fragment.append(list);\n    }\n    const li = doc.createElement(\"li\");\n    li.append(elementFragment);\n    fragment.lastChild!.appendChild(li);\n  } else {\n    fragment.append(elementFragment);\n  }\n\n  if (block.children && block.children.length > 0) {\n    const childFragment = doc.createDocumentFragment();\n    serializeBlocksToFragment(\n      childFragment,\n      editor,\n      block.children,\n      serializer,\n      orderedListItemBlockTypes,\n      unorderedListItemBlockTypes,\n      options,\n    );\n    if (\n      fragment.lastChild?.nodeName === \"UL\" ||\n      fragment.lastChild?.nodeName === \"OL\"\n    ) {\n      // add nested lists to the last list item\n      while (\n        childFragment.firstChild?.nodeName === \"UL\" ||\n        childFragment.firstChild?.nodeName === \"OL\"\n      ) {\n        fragment.lastChild!.lastChild!.appendChild(childFragment.firstChild!);\n      }\n    }\n\n    if (editor.pmSchema.nodes[block.type as any].isInGroup(\"blockContent\")) {\n      // default \"blockContainer\" style blocks are flattened (no \"nested block\" support) for externalHTML, so append the child fragment to the outer fragment\n      fragment.append(childFragment);\n    } else {\n      // for columns / column lists, do use nesting\n      ret.contentDOM?.append(childFragment);\n    }\n  }\n}\n\nconst serializeBlocksToFragment = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  fragment: DocumentFragment,\n  editor: BlockNoteEditor<BSchema, I, S>,\n  blocks: PartialBlock<BSchema, I, S>[],\n  serializer: DOMSerializer,\n  orderedListItemBlockTypes: Set<string>,\n  unorderedListItemBlockTypes: Set<string>,\n  options?: { document?: Document },\n) => {\n  for (const block of blocks) {\n    serializeBlock(\n      fragment,\n      editor,\n      block,\n      serializer,\n      orderedListItemBlockTypes,\n      unorderedListItemBlockTypes,\n      options,\n    );\n  }\n};\n\nexport const serializeBlocksExternalHTML = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  blocks: PartialBlock<BSchema, I, S>[],\n  serializer: DOMSerializer,\n  orderedListItemBlockTypes: Set<string>,\n  unorderedListItemBlockTypes: Set<string>,\n  options?: { document?: Document },\n) => {\n  const doc = options?.document ?? document;\n  const fragment = doc.createDocumentFragment();\n\n  serializeBlocksToFragment(\n    fragment,\n    editor,\n    blocks,\n    serializer,\n    orderedListItemBlockTypes,\n    unorderedListItemBlockTypes,\n    options,\n  );\n  return fragment;\n};\n","import { DOMSerializer, Schema } from \"prosemirror-model\";\n\nimport { PartialBlock } from \"../../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../../editor/BlockNoteEditor.js\";\nimport {\n  BlockSchema,\n  InlineContent,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport {\n  serializeBlocksExternalHTML,\n  serializeInlineContentExternalHTML,\n} from \"./util/serializeBlocksExternalHTML.js\";\n\n// Used to export BlockNote blocks and ProseMirror nodes to HTML for use outside\n// the editor. Blocks are exported using the `toExternalHTML` method in their\n// `blockSpec`, or `toInternalHTML` if `toExternalHTML` is not defined.\n//\n// The HTML created by this serializer is different to what's rendered by the\n// editor to the DOM. This also means that data is likely to be lost when\n// converting back to original blocks. The differences in the output HTML are:\n// 1. It doesn't include the `blockGroup` and `blockContainer` wrappers meaning\n// that nesting is not preserved for non-list-item blocks.\n// 2. `li` items in the output HTML are wrapped in `ul` or `ol` elements.\n// 3. While nesting for list items is preserved, other types of blocks nested\n// inside a list are un-nested and a new list is created after them.\n// 4. The HTML is wrapped in a single `div` element.\n\n// Needs to be sync because it's used in drag handler event (SideMenuPlugin)\n// Ideally, call `await initializeESMDependencies()` before calling this function\nexport const createExternalHTMLExporter = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  schema: Schema,\n  editor: BlockNoteEditor<BSchema, I, S>,\n) => {\n  const serializer = DOMSerializer.fromSchema(schema);\n\n  return {\n    exportBlocks: (\n      blocks: PartialBlock<BSchema, I, S>[],\n      options: { document?: Document },\n    ) => {\n      const html = serializeBlocksExternalHTML(\n        editor,\n        blocks,\n        serializer,\n        new Set<string>([\"numberedListItem\"]),\n        new Set<string>([\"bulletListItem\", \"checkListItem\"]),\n        options,\n      );\n      const div = document.createElement(\"div\");\n      div.append(html);\n      return div.innerHTML;\n    },\n\n    exportInlineContent: (\n      inlineContent: InlineContent<I, S>[],\n      options: { document?: Document },\n    ) => {\n      const domFragment = serializeInlineContentExternalHTML(\n        editor,\n        inlineContent as any,\n        serializer,\n        options,\n      );\n\n      const parent = document.createElement(\"div\");\n      parent.append(domFragment.cloneNode(true));\n\n      return parent.innerHTML;\n    },\n  };\n};\n","import { DOMSerializer, Fragment } from \"prosemirror-model\";\n\nimport { PartialBlock } from \"../../../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../../../editor/BlockNoteEditor.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../../schema/index.js\";\nimport { UnreachableCaseError } from \"../../../../util/typescript.js\";\nimport {\n  inlineContentToNodes,\n  tableContentToNodes,\n} from \"../../../nodeConversions/blockToNode.js\";\n\nexport function serializeInlineContentInternalHTML<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<any, I, S>,\n  blockContent: PartialBlock<BSchema, I, S>[\"content\"],\n  serializer: DOMSerializer,\n  blockType?: string,\n  options?: { document?: Document },\n) {\n  let nodes: any;\n\n  // TODO: reuse function from nodeconversions?\n  if (!blockContent) {\n    throw new Error(\"blockContent is required\");\n  } else if (typeof blockContent === \"string\") {\n    nodes = inlineContentToNodes([blockContent], editor.pmSchema, blockType);\n  } else if (Array.isArray(blockContent)) {\n    nodes = inlineContentToNodes(blockContent, editor.pmSchema, blockType);\n  } else if (blockContent.type === \"tableContent\") {\n    nodes = tableContentToNodes(blockContent, editor.pmSchema);\n  } else {\n    throw new UnreachableCaseError(blockContent.type);\n  }\n\n  // We call the prosemirror serializer here because it handles Marks and Inline Content nodes nicely.\n  // If we'd want to support custom serialization or externalHTML for Inline Content, we'd have to implement\n  // a custom serializer here.\n  const dom = serializer.serializeFragment(Fragment.from(nodes), options);\n\n  return dom;\n}\n\nfunction serializeBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  block: PartialBlock<BSchema, I, S>,\n  serializer: DOMSerializer,\n  listIndex: number,\n  options?: { document?: Document },\n) {\n  const BC_NODE = editor.pmSchema.nodes[\"blockContainer\"];\n\n  let props = block.props;\n  // set default props in case we were passed a partial block\n  if (!block.props) {\n    props = {};\n    for (const [name, spec] of Object.entries(\n      editor.schema.blockSchema[block.type as any].propSchema,\n    )) {\n      if (spec.default !== undefined) {\n        (props as any)[name] = spec.default;\n      }\n    }\n  }\n\n  const impl = editor.blockImplementations[block.type as any].implementation;\n  const ret = impl.toInternalHTML({ ...block, props } as any, editor as any);\n\n  if (block.type === \"numberedListItem\") {\n    // This is a workaround to make sure there's a list index set.\n    // Normally, this is set on the internal prosemirror nodes by the NumberedListIndexingPlugin,\n    // but:\n    // - (a) this information is not available on the Blocks passed to the serializer. (we only have access to BlockNote Blocks)\n    // - (b) the NumberedListIndexingPlugin might not even have run, because we can manually call blocksToFullHTML\n    //       with blocks that are not part of the active document\n    ret.dom.setAttribute(\"data-index\", listIndex.toString());\n  }\n\n  if (ret.contentDOM && block.content) {\n    const ic = serializeInlineContentInternalHTML(\n      editor,\n      block.content as any, // TODO\n      serializer,\n      block.type,\n      options,\n    );\n    ret.contentDOM.appendChild(ic);\n  }\n\n  const pmType = editor.pmSchema.nodes[block.type as any];\n\n  if (pmType.isInGroup(\"bnBlock\")) {\n    if (block.children && block.children.length > 0) {\n      const fragment = serializeBlocks(\n        editor,\n        block.children,\n        serializer,\n        options,\n      );\n\n      ret.contentDOM?.append(fragment);\n    }\n    return ret.dom;\n  }\n\n  // wrap the block in a blockContainer\n  const bc = BC_NODE.spec?.toDOM?.(\n    BC_NODE.create({\n      id: block.id,\n      ...props,\n    }),\n  ) as {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n  };\n\n  bc.contentDOM?.appendChild(ret.dom);\n\n  if (block.children && block.children.length > 0) {\n    bc.contentDOM?.appendChild(\n      serializeBlocksInternalHTML(editor, block.children, serializer, options),\n    );\n  }\n  return bc.dom;\n}\n\nfunction serializeBlocks<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  blocks: PartialBlock<BSchema, I, S>[],\n  serializer: DOMSerializer,\n  options?: { document?: Document },\n) {\n  const doc = options?.document ?? document;\n  const fragment = doc.createDocumentFragment();\n\n  let listIndex = 0;\n  for (const block of blocks) {\n    if (block.type === \"numberedListItem\") {\n      listIndex++;\n    } else {\n      listIndex = 0;\n    }\n    const blockDOM = serializeBlock(\n      editor,\n      block,\n      serializer,\n      listIndex,\n      options,\n    );\n    fragment.appendChild(blockDOM);\n  }\n\n  return fragment;\n}\n\nexport const serializeBlocksInternalHTML = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  blocks: PartialBlock<BSchema, I, S>[],\n  serializer: DOMSerializer,\n  options?: { document?: Document },\n) => {\n  const BG_NODE = editor.pmSchema.nodes[\"blockGroup\"];\n\n  const bg = BG_NODE.spec!.toDOM!(BG_NODE.create({})) as {\n    dom: HTMLElement;\n    contentDOM?: HTMLElement;\n  };\n\n  const fragment = serializeBlocks(editor, blocks, serializer, options);\n\n  bg.contentDOM?.appendChild(fragment);\n\n  return bg.dom;\n};\n","import { DOMSerializer, Schema } from \"prosemirror-model\";\nimport { PartialBlock } from \"../../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../../editor/BlockNoteEditor.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { serializeBlocksInternalHTML } from \"./util/serializeBlocksInternalHTML.js\";\n// Used to serialize BlockNote blocks and ProseMirror nodes to HTML without\n// losing data. Blocks are exported using the `toInternalHTML` method in their\n// `blockSpec`.\n//\n// The HTML created by this serializer is the same as what's rendered by the\n// editor to the DOM. This means that it retains the same structure as the\n// editor, including the `blockGroup` and `blockContainer` wrappers. This also\n// means that it can be converted back to the original blocks without any data\n// loss.\nexport const createInternalHTMLSerializer = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  schema: Schema,\n  editor: BlockNoteEditor<BSchema, I, S>,\n) => {\n  const serializer = DOMSerializer.fromSchema(schema);\n\n  return {\n    serializeBlocks: (\n      blocks: PartialBlock<BSchema, I, S>[],\n      options: { document?: Document },\n    ) => {\n      return serializeBlocksInternalHTML(editor, blocks, serializer, options)\n        .outerHTML;\n    },\n  };\n};\n","export const parseFigureElement = (\n  figureElement: HTMLElement,\n  targetTag: string,\n) => {\n  const targetElement = figureElement.querySelector(\n    targetTag,\n  ) as HTMLElement | null;\n  if (!targetElement) {\n    return undefined;\n  }\n\n  const captionElement = figureElement.querySelector(\"figcaption\");\n  const caption = captionElement?.textContent ?? undefined;\n\n  return { targetElement, caption };\n};\n","import type { BlockNoteEditor } from \"../../../../editor/BlockNoteEditor.js\";\nimport { BlockFromConfig, FileBlockConfig } from \"../../../../schema/index.js\";\n\nexport const createAddFileButton = (\n  block: BlockFromConfig<FileBlockConfig, any, any>,\n  editor: BlockNoteEditor<any, any, any>,\n  buttonText?: string,\n  buttonIcon?: HTMLElement,\n) => {\n  const addFileButton = document.createElement(\"div\");\n  addFileButton.className = \"bn-add-file-button\";\n\n  const addFileButtonIcon = document.createElement(\"div\");\n  addFileButtonIcon.className = \"bn-add-file-button-icon\";\n  if (buttonIcon) {\n    addFileButtonIcon.appendChild(buttonIcon);\n  } else {\n    addFileButtonIcon.innerHTML =\n      '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M3 8L9.00319 2H19.9978C20.5513 2 21 2.45531 21 2.9918V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5501 3 20.9932V8ZM10 4V9H5V20H19V4H10Z\"></path></svg>';\n  }\n  addFileButton.appendChild(addFileButtonIcon);\n\n  const addFileButtonText = document.createElement(\"p\");\n  addFileButtonText.className = \"bn-add-file-button-text\";\n  addFileButtonText.innerHTML =\n    buttonText || editor.dictionary.file_blocks.file.add_button_text;\n  addFileButton.appendChild(addFileButtonText);\n\n  // Prevents focus from moving to the button.\n  const addFileButtonMouseDownHandler = (event: MouseEvent) => {\n    event.preventDefault();\n  };\n  // Opens the file toolbar.\n  const addFileButtonClickHandler = () => {\n    editor.transact((tr) =>\n      tr.setMeta(editor.filePanel!.plugins[0], {\n        block: block,\n      }),\n    );\n  };\n  addFileButton.addEventListener(\n    \"mousedown\",\n    addFileButtonMouseDownHandler,\n    true,\n  );\n  addFileButton.addEventListener(\"click\", addFileButtonClickHandler, true);\n\n  return {\n    dom: addFileButton,\n    destroy: () => {\n      addFileButton.removeEventListener(\n        \"mousedown\",\n        addFileButtonMouseDownHandler,\n        true,\n      );\n      addFileButton.removeEventListener(\n        \"click\",\n        addFileButtonClickHandler,\n        true,\n      );\n    },\n  };\n};\n","import { BlockFromConfig, FileBlockConfig } from \"../../../../schema/index.js\";\n\nexport const FILE_ICON_SVG = `<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M3 8L9.00319 2H19.9978C20.5513 2 21 2.45531 21 2.9918V21.0082C21 21.556 20.5551 22 20.0066 22H3.9934C3.44476 22 3 21.5501 3 20.9932V8ZM10 4V9H5V20H19V4H10Z\"></path></svg>`;\n\nexport const createFileNameWithIcon = (\n  block: BlockFromConfig<FileBlockConfig, any, any>,\n): { dom: HTMLElement; destroy?: () => void } => {\n  const file = document.createElement(\"div\");\n  file.className = \"bn-file-name-with-icon\";\n\n  const icon = document.createElement(\"div\");\n  icon.className = \"bn-file-icon\";\n  icon.innerHTML = FILE_ICON_SVG;\n  file.appendChild(icon);\n\n  const fileName = document.createElement(\"p\");\n  fileName.className = \"bn-file-name\";\n  fileName.textContent = block.props.name;\n  file.appendChild(fileName);\n\n  return {\n    dom: file,\n  };\n};\n","import type { BlockNoteEditor } from \"../../../../editor/BlockNoteEditor.js\";\nimport {\n  BlockFromConfig,\n  BlockSchemaWithBlock,\n  FileBlockConfig,\n} from \"../../../../schema/index.js\";\nimport { createAddFileButton } from \"./createAddFileButton.js\";\nimport { createFileNameWithIcon } from \"./createFileNameWithIcon.js\";\n\nexport const createFileBlockWrapper = (\n  block: BlockFromConfig<FileBlockConfig, any, any>,\n  editor: BlockNoteEditor<\n    BlockSchemaWithBlock<FileBlockConfig[\"type\"], FileBlockConfig>,\n    any,\n    any\n  >,\n  element?: { dom: HTMLElement; destroy?: () => void },\n  buttonText?: string,\n  buttonIcon?: HTMLElement,\n) => {\n  const wrapper = document.createElement(\"div\");\n  wrapper.className = \"bn-file-block-content-wrapper\";\n\n  // Show the add file button if the file has not been uploaded yet. Change to\n  // show a loader if a file upload for the block begins.\n  if (block.props.url === \"\") {\n    const addFileButton = createAddFileButton(\n      block,\n      editor,\n      buttonText,\n      buttonIcon,\n    );\n    wrapper.appendChild(addFileButton.dom);\n\n    const destroyUploadStartHandler = editor.onUploadStart((blockId) => {\n      if (blockId === block.id) {\n        wrapper.removeChild(addFileButton.dom);\n\n        const loading = document.createElement(\"div\");\n        loading.className = \"bn-file-loading-preview\";\n        loading.textContent = \"Loading...\";\n        wrapper.appendChild(loading);\n      }\n    });\n\n    return {\n      dom: wrapper,\n      destroy: () => {\n        destroyUploadStartHandler();\n        addFileButton.destroy();\n      },\n    };\n  }\n\n  const ret: { dom: HTMLElement; destroy?: () => void } = { dom: wrapper };\n\n  // Show the file preview, or the file name and icon.\n  if (block.props.showPreview === false || !element) {\n    // Show file name and icon.\n    const fileNameWithIcon = createFileNameWithIcon(block);\n    wrapper.appendChild(fileNameWithIcon.dom);\n\n    ret.destroy = () => {\n      fileNameWithIcon.destroy?.();\n    };\n  } else {\n    // Show file preview.\n    wrapper.appendChild(element.dom);\n  }\n\n  // Show the caption if there is one.\n  if (block.props.caption) {\n    const caption = document.createElement(\"p\");\n    caption.className = \"bn-file-caption\";\n    caption.textContent = block.props.caption;\n    wrapper.appendChild(caption);\n  }\n\n  return ret;\n};\n","export const createFigureWithCaption = (\n  element: HTMLElement,\n  caption: string,\n) => {\n  const figure = document.createElement(\"figure\");\n  const captionElement = document.createElement(\"figcaption\");\n  captionElement.textContent = caption;\n\n  figure.appendChild(element);\n  figure.appendChild(captionElement);\n\n  return { dom: figure };\n};\n","export const createLinkWithCaption = (\n  element: HTMLElement,\n  caption: string,\n) => {\n  const wrapper = document.createElement(\"div\");\n  const fileCaption = document.createElement(\"p\");\n  fileCaption.textContent = caption;\n\n  wrapper.appendChild(element);\n  wrapper.appendChild(fileCaption);\n\n  return {\n    dom: wrapper,\n  };\n};\n","export const parseAudioElement = (audioElement: HTMLAudioElement) => {\n  const url = audioElement.src || undefined;\n\n  return { url };\n};\n","import type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport {\n  BlockFromConfig,\n  createBlockSpec,\n  FileBlockConfig,\n  Props,\n  PropSchema,\n} from \"../../schema/index.js\";\nimport { defaultProps } from \"../defaultProps.js\";\n\nimport { parseFigureElement } from \"../FileBlockContent/helpers/parse/parseFigureElement.js\";\nimport { createFileBlockWrapper } from \"../FileBlockContent/helpers/render/createFileBlockWrapper.js\";\nimport { createFigureWithCaption } from \"../FileBlockContent/helpers/toExternalHTML/createFigureWithCaption.js\";\nimport { createLinkWithCaption } from \"../FileBlockContent/helpers/toExternalHTML/createLinkWithCaption.js\";\nimport { parseAudioElement } from \"./parseAudioElement.js\";\n\nexport const FILE_AUDIO_ICON_SVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M2 16.0001H5.88889L11.1834 20.3319C11.2727 20.405 11.3846 20.4449 11.5 20.4449C11.7761 20.4449 12 20.2211 12 19.9449V4.05519C12 3.93977 11.9601 3.8279 11.887 3.73857C11.7121 3.52485 11.3971 3.49335 11.1834 3.66821L5.88889 8.00007H2C1.44772 8.00007 1 8.44778 1 9.00007V15.0001C1 15.5524 1.44772 16.0001 2 16.0001ZM23 12C23 15.292 21.5539 18.2463 19.2622 20.2622L17.8445 18.8444C19.7758 17.1937 21 14.7398 21 12C21 9.26016 19.7758 6.80629 17.8445 5.15557L19.2622 3.73779C21.5539 5.75368 23 8.70795 23 12ZM18 12C18 10.0883 17.106 8.38548 15.7133 7.28673L14.2842 8.71584C15.3213 9.43855 16 10.64 16 12C16 13.36 15.3213 14.5614 14.2842 15.2841L15.7133 16.7132C17.106 15.6145 18 13.9116 18 12Z\"></path></svg>';\n\nexport const audioPropSchema = {\n  backgroundColor: defaultProps.backgroundColor,\n  // File name.\n  name: {\n    default: \"\" as const,\n  },\n  // File url.\n  url: {\n    default: \"\" as const,\n  },\n  // File caption.\n  caption: {\n    default: \"\" as const,\n  },\n\n  showPreview: {\n    default: true,\n  },\n} satisfies PropSchema;\n\nexport const audioBlockConfig = {\n  type: \"audio\" as const,\n  propSchema: audioPropSchema,\n  content: \"none\",\n  isFileBlock: true,\n  fileBlockAccept: [\"audio/*\"],\n} satisfies FileBlockConfig;\n\nexport const audioRender = (\n  block: BlockFromConfig<typeof audioBlockConfig, any, any>,\n  editor: BlockNoteEditor<any, any, any>,\n) => {\n  const icon = document.createElement(\"div\");\n  icon.innerHTML = FILE_AUDIO_ICON_SVG;\n\n  const audio = document.createElement(\"audio\");\n  audio.className = \"bn-audio\";\n  if (editor.resolveFileUrl) {\n    editor.resolveFileUrl(block.props.url).then((downloadUrl) => {\n      audio.src = downloadUrl;\n    });\n  } else {\n    audio.src = block.props.url;\n  }\n  audio.controls = true;\n  audio.contentEditable = \"false\";\n  audio.draggable = false;\n\n  return createFileBlockWrapper(\n    block,\n    editor,\n    { dom: audio },\n    editor.dictionary.file_blocks.audio.add_button_text,\n    icon.firstElementChild as HTMLElement,\n  );\n};\n\nexport const audioParse = (\n  element: HTMLElement,\n): Partial<Props<typeof audioBlockConfig.propSchema>> | undefined => {\n  if (element.tagName === \"AUDIO\") {\n    // Ignore if parent figure has already been parsed.\n    if (element.closest(\"figure\")) {\n      return undefined;\n    }\n\n    return parseAudioElement(element as HTMLAudioElement);\n  }\n\n  if (element.tagName === \"FIGURE\") {\n    const parsedFigure = parseFigureElement(element, \"audio\");\n    if (!parsedFigure) {\n      return undefined;\n    }\n\n    const { targetElement, caption } = parsedFigure;\n\n    return {\n      ...parseAudioElement(targetElement as HTMLAudioElement),\n      caption,\n    };\n  }\n\n  return undefined;\n};\n\nexport const audioToExternalHTML = (\n  block: BlockFromConfig<typeof audioBlockConfig, any, any>,\n) => {\n  if (!block.props.url) {\n    const div = document.createElement(\"p\");\n    div.textContent = \"Add audio\";\n\n    return {\n      dom: div,\n    };\n  }\n\n  let audio;\n  if (block.props.showPreview) {\n    audio = document.createElement(\"audio\");\n    audio.src = block.props.url;\n  } else {\n    audio = document.createElement(\"a\");\n    audio.href = block.props.url;\n    audio.textContent = block.props.name || block.props.url;\n  }\n\n  if (block.props.caption) {\n    if (block.props.showPreview) {\n      return createFigureWithCaption(audio, block.props.caption);\n    } else {\n      return createLinkWithCaption(audio, block.props.caption);\n    }\n  }\n\n  return {\n    dom: audio,\n  };\n};\n\nexport const AudioBlock = createBlockSpec(audioBlockConfig, {\n  render: audioRender,\n  parse: audioParse,\n  toExternalHTML: audioToExternalHTML,\n});\n","import type { HighlighterGeneric } from \"@shikijs/types\";\nimport { InputRule, isTextSelection } from \"@tiptap/core\";\nimport { TextSelection } from \"@tiptap/pm/state\";\nimport { Parser, createHighlightPlugin } from \"prosemirror-highlight\";\nimport { createParser } from \"prosemirror-highlight/shiki\";\nimport { BlockNoteEditor } from \"../../index.js\";\nimport {\n  PropSchema,\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n} from \"../../schema/index.js\";\nimport { createDefaultBlockDOMOutputSpec } from \"../defaultBlockHelpers.js\";\n\nexport type CodeBlockOptions = {\n  /**\n   * Whether to indent lines with a tab when the user presses `Tab` in a code block.\n   *\n   * @default true\n   */\n  indentLineWithTab?: boolean;\n  /**\n   * The default language to use for code blocks.\n   *\n   * @default \"text\"\n   */\n  defaultLanguage?: string;\n  /**\n   * The languages that are supported in the editor.\n   *\n   * @example\n   * {\n   *   javascript: {\n   *     name: \"JavaScript\",\n   *     aliases: [\"js\"],\n   *   },\n   *   typescript: {\n   *     name: \"TypeScript\",\n   *     aliases: [\"ts\"],\n   *   },\n   * }\n   */\n  supportedLanguages: Record<\n    string,\n    {\n      /**\n       * The display name of the language.\n       */\n      name: string;\n      /**\n       * Aliases for this language.\n       */\n      aliases?: string[];\n    }\n  >;\n  /**\n   * The highlighter to use for code blocks.\n   */\n  createHighlighter?: () => Promise<HighlighterGeneric<any, any>>;\n};\n\ntype CodeBlockConfigOptions = {\n  editor: BlockNoteEditor<any, any, any>;\n};\n\nexport const shikiParserSymbol = Symbol.for(\"blocknote.shikiParser\");\nexport const shikiHighlighterPromiseSymbol = Symbol.for(\n  \"blocknote.shikiHighlighterPromise\",\n);\nexport const defaultCodeBlockPropSchema = {\n  language: {\n    default: \"text\",\n  },\n} satisfies PropSchema;\n\nconst CodeBlockContent = createStronglyTypedTiptapNode({\n  name: \"codeBlock\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  marks: \"insertion deletion modification\",\n  code: true,\n  defining: true,\n  addOptions() {\n    return {\n      defaultLanguage: \"text\",\n      indentLineWithTab: true,\n      supportedLanguages: {},\n    };\n  },\n  addAttributes() {\n    const options = this.options as CodeBlockConfigOptions;\n\n    return {\n      language: {\n        default: options.editor.settings.codeBlock.defaultLanguage,\n        parseHTML: (inputElement) => {\n          let element = inputElement as HTMLElement | null;\n          let language: string | null = null;\n\n          if (\n            element?.tagName === \"DIV\" &&\n            element?.dataset.contentType === \"codeBlock\"\n          ) {\n            element = element.children[0] as HTMLElement | null;\n          }\n\n          if (element?.tagName === \"PRE\") {\n            element = element?.children[0] as HTMLElement | null;\n          }\n\n          const dataLanguage = element?.getAttribute(\"data-language\");\n\n          if (dataLanguage) {\n            language = dataLanguage.toLowerCase();\n          } else {\n            const classNames = [...(element?.className.split(\" \") || [])];\n            const languages = classNames\n              .filter((className) => className.startsWith(\"language-\"))\n              .map((className) => className.replace(\"language-\", \"\"));\n\n            if (languages.length > 0) {\n              language = languages[0].toLowerCase();\n            }\n          }\n\n          if (!language) {\n            return null;\n          }\n\n          return (\n            getLanguageId(options.editor.settings.codeBlock, language) ??\n            language\n          );\n        },\n        renderHTML: (attributes) => {\n          return attributes.language\n            ? {\n                class: `language-${attributes.language}`,\n                \"data-language\": attributes.language,\n              }\n            : {};\n        },\n      },\n    };\n  },\n  parseHTML() {\n    return [\n      // Parse from internal HTML.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \".bn-inline-content\",\n      },\n      // Parse from external HTML.\n      {\n        tag: \"pre\",\n        // contentElement: \"code\",\n        preserveWhitespace: \"full\",\n      },\n    ];\n  },\n  renderHTML({ HTMLAttributes }) {\n    const pre = document.createElement(\"pre\");\n    const { dom, contentDOM } = createDefaultBlockDOMOutputSpec(\n      this.name,\n      \"code\",\n      this.options.domAttributes?.blockContent || {},\n      {\n        ...(this.options.domAttributes?.inlineContent || {}),\n        ...HTMLAttributes,\n      },\n    );\n\n    dom.removeChild(contentDOM);\n    dom.appendChild(pre);\n    pre.appendChild(contentDOM);\n\n    return {\n      dom,\n      contentDOM,\n    };\n  },\n  addNodeView() {\n    const options = this.options as CodeBlockConfigOptions;\n\n    return ({ editor, node, getPos, HTMLAttributes }) => {\n      const pre = document.createElement(\"pre\");\n      const select = document.createElement(\"select\");\n      const selectWrapper = document.createElement(\"div\");\n      const { dom, contentDOM } = createDefaultBlockDOMOutputSpec(\n        this.name,\n        \"code\",\n        {\n          ...(this.options.domAttributes?.blockContent || {}),\n          ...HTMLAttributes,\n        },\n        this.options.domAttributes?.inlineContent || {},\n      );\n      const handleLanguageChange = (event: Event) => {\n        const language = (event.target as HTMLSelectElement).value;\n\n        editor.commands.command(({ tr }) => {\n          tr.setNodeAttribute(getPos(), \"language\", language);\n\n          return true;\n        });\n      };\n\n      Object.entries(\n        options.editor.settings.codeBlock.supportedLanguages,\n      ).forEach(([id, { name }]) => {\n        const option = document.createElement(\"option\");\n\n        option.value = id;\n        option.text = name;\n        select.appendChild(option);\n      });\n\n      selectWrapper.contentEditable = \"false\";\n      select.value =\n        node.attrs.language ||\n        options.editor.settings.codeBlock.defaultLanguage;\n      dom.removeChild(contentDOM);\n      dom.appendChild(selectWrapper);\n      dom.appendChild(pre);\n      pre.appendChild(contentDOM);\n      selectWrapper.appendChild(select);\n      select.addEventListener(\"change\", handleLanguageChange);\n\n      return {\n        dom,\n        contentDOM,\n        update: (newNode) => {\n          if (newNode.type !== this.type) {\n            return false;\n          }\n\n          return true;\n        },\n        destroy: () => {\n          select.removeEventListener(\"change\", handleLanguageChange);\n        },\n      };\n    };\n  },\n  addProseMirrorPlugins() {\n    const options = this.options as CodeBlockConfigOptions;\n    const globalThisForShiki = globalThis as {\n      [shikiHighlighterPromiseSymbol]?: Promise<HighlighterGeneric<any, any>>;\n      [shikiParserSymbol]?: Parser;\n    };\n\n    let highlighter: HighlighterGeneric<any, any> | undefined;\n    let parser: Parser | undefined;\n    let hasWarned = false;\n    const lazyParser: Parser = (parserOptions) => {\n      if (!options.editor.settings.codeBlock.createHighlighter) {\n        if (process.env.NODE_ENV === \"development\" && !hasWarned) {\n          // eslint-disable-next-line no-console\n          console.log(\n            \"For syntax highlighting of code blocks, you must provide a `codeBlock.createHighlighter` function\",\n          );\n          hasWarned = true;\n        }\n        return [];\n      }\n      if (!highlighter) {\n        globalThisForShiki[shikiHighlighterPromiseSymbol] =\n          globalThisForShiki[shikiHighlighterPromiseSymbol] ||\n          options.editor.settings.codeBlock.createHighlighter();\n\n        return globalThisForShiki[shikiHighlighterPromiseSymbol].then(\n          (createdHighlighter) => {\n            highlighter = createdHighlighter;\n          },\n        );\n      }\n      const language = getLanguageId(\n        options.editor.settings.codeBlock,\n        parserOptions.language!,\n      );\n\n      if (\n        !language ||\n        language === \"text\" ||\n        language === \"none\" ||\n        language === \"plaintext\" ||\n        language === \"txt\"\n      ) {\n        return [];\n      }\n\n      if (!highlighter.getLoadedLanguages().includes(language)) {\n        return highlighter.loadLanguage(language);\n      }\n\n      if (!parser) {\n        parser =\n          globalThisForShiki[shikiParserSymbol] ||\n          createParser(highlighter as any);\n        globalThisForShiki[shikiParserSymbol] = parser;\n      }\n\n      return parser(parserOptions);\n    };\n\n    const shikiLazyPlugin = createHighlightPlugin({\n      parser: lazyParser,\n      languageExtractor: (node) => node.attrs.language,\n      nodeTypes: [this.name],\n    });\n\n    return [shikiLazyPlugin];\n  },\n  addInputRules() {\n    const options = this.options as CodeBlockConfigOptions;\n\n    return [\n      new InputRule({\n        find: /^```(.*?)\\s$/,\n        handler: ({ state, range, match }) => {\n          const $start = state.doc.resolve(range.from);\n          const languageName = match[1].trim();\n          const attributes = {\n            language:\n              getLanguageId(options.editor.settings.codeBlock, languageName) ??\n              languageName,\n          };\n\n          if (\n            !$start\n              .node(-1)\n              .canReplaceWith(\n                $start.index(-1),\n                $start.indexAfter(-1),\n                this.type,\n              )\n          ) {\n            return null;\n          }\n\n          state.tr\n            .delete(range.from, range.to)\n            .setBlockType(range.from, range.from, this.type, attributes)\n            .setSelection(TextSelection.create(state.tr.doc, range.from));\n\n          return;\n        },\n      }),\n    ];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Delete: ({ editor }) => {\n        const { selection } = editor.state;\n        const { $from } = selection;\n\n        // When inside empty codeblock, on `DELETE` key press, delete the codeblock\n        if (\n          editor.isActive(this.name) &&\n          !$from.parent.textContent &&\n          isTextSelection(selection)\n        ) {\n          // Get the start position of the codeblock for node selection\n          const from = $from.pos - $from.parentOffset - 2;\n\n          editor.chain().setNodeSelection(from).deleteSelection().run();\n\n          return true;\n        }\n\n        return false;\n      },\n      Tab: ({ editor }) => {\n        if (!this.options.indentLineWithTab) {\n          return false;\n        }\n        if (editor.isActive(this.name)) {\n          editor.commands.insertContent(\"  \");\n          return true;\n        }\n\n        return false;\n      },\n      Enter: ({ editor }) => {\n        const { $from } = editor.state.selection;\n\n        if (!editor.isActive(this.name)) {\n          return false;\n        }\n\n        const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;\n        const endsWithDoubleNewline = $from.parent.textContent.endsWith(\"\\n\\n\");\n\n        if (!isAtEnd || !endsWithDoubleNewline) {\n          editor.commands.insertContent(\"\\n\");\n          return true;\n        }\n\n        return editor\n          .chain()\n          .command(({ tr }) => {\n            tr.delete($from.pos - 2, $from.pos);\n\n            return true;\n          })\n          .exitCode()\n          .run();\n      },\n      \"Shift-Enter\": ({ editor }) => {\n        const { $from } = editor.state.selection;\n\n        if (!editor.isActive(this.name)) {\n          return false;\n        }\n\n        editor\n          .chain()\n          .insertContentAt(\n            $from.pos - $from.parentOffset + $from.parent.nodeSize,\n            {\n              type: \"paragraph\",\n            },\n          )\n          .run();\n\n        return true;\n      },\n    };\n  },\n});\n\nexport const CodeBlock = createBlockSpecFromStronglyTypedTiptapNode(\n  CodeBlockContent,\n  defaultCodeBlockPropSchema,\n);\n\nfunction getLanguageId(\n  options: CodeBlockOptions,\n  languageName: string,\n): string | undefined {\n  return Object.entries(options.supportedLanguages).find(\n    ([id, { aliases }]) => {\n      return aliases?.includes(languageName) || id === languageName;\n    },\n  )?.[0];\n}\n","import { Mark } from \"@tiptap/core\";\nimport { createStyleSpecFromTipTapMark } from \"../../schema/index.js\";\n\nconst BackgroundColorMark = Mark.create({\n  name: \"backgroundColor\",\n\n  addAttributes() {\n    return {\n      stringValue: {\n        default: undefined,\n        parseHTML: (element) => element.getAttribute(\"data-background-color\"),\n        renderHTML: (attributes) => ({\n          \"data-background-color\": attributes.stringValue,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.hasAttribute(\"data-background-color\")) {\n            return {\n              stringValue: element.getAttribute(\"data-background-color\"),\n            };\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"span\", HTMLAttributes, 0];\n  },\n});\n\nexport const BackgroundColor = createStyleSpecFromTipTapMark(\n  BackgroundColorMark,\n  \"string\",\n);\n","import { Mark } from \"@tiptap/core\";\nimport { createStyleSpecFromTipTapMark } from \"../../schema/index.js\";\n\nconst TextColorMark = Mark.create({\n  name: \"textColor\",\n\n  addAttributes() {\n    return {\n      stringValue: {\n        default: undefined,\n        parseHTML: (element) => element.getAttribute(\"data-text-color\"),\n        renderHTML: (attributes) => ({\n          \"data-text-color\": attributes.stringValue,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.hasAttribute(\"data-text-color\")) {\n            return { stringValue: element.getAttribute(\"data-text-color\") };\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"span\", HTMLAttributes, 0];\n  },\n});\n\nexport const TextColor = createStyleSpecFromTipTapMark(TextColorMark, \"string\");\n","export const parseEmbedElement = (embedElement: HTMLEmbedElement) => {\n  const url = embedElement.src || undefined;\n\n  return { url };\n};\n","import type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport {\n  BlockFromConfig,\n  FileBlockConfig,\n  PropSchema,\n  createBlockSpec,\n} from \"../../schema/index.js\";\nimport { defaultProps } from \"../defaultProps.js\";\nimport { parseEmbedElement } from \"./helpers/parse/parseEmbedElement.js\";\nimport { parseFigureElement } from \"./helpers/parse/parseFigureElement.js\";\nimport { createFileBlockWrapper } from \"./helpers/render/createFileBlockWrapper.js\";\nimport { createLinkWithCaption } from \"./helpers/toExternalHTML/createLinkWithCaption.js\";\n\nexport const filePropSchema = {\n  backgroundColor: defaultProps.backgroundColor,\n  // File name.\n  name: {\n    default: \"\" as const,\n  },\n  // File url.\n  url: {\n    default: \"\" as const,\n  },\n  // File caption.\n  caption: {\n    default: \"\" as const,\n  },\n} satisfies PropSchema;\n\nexport const fileBlockConfig = {\n  type: \"file\" as const,\n  propSchema: filePropSchema,\n  content: \"none\",\n  isFileBlock: true,\n} satisfies FileBlockConfig;\n\nexport const fileRender = (\n  block: BlockFromConfig<typeof fileBlockConfig, any, any>,\n  editor: BlockNoteEditor<any, any, any>,\n) => {\n  return createFileBlockWrapper(block, editor);\n};\n\nexport const fileParse = (element: HTMLElement) => {\n  if (element.tagName === \"EMBED\") {\n    // Ignore if parent figure has already been parsed.\n    if (element.closest(\"figure\")) {\n      return undefined;\n    }\n\n    return parseEmbedElement(element as HTMLEmbedElement);\n  }\n\n  if (element.tagName === \"FIGURE\") {\n    const parsedFigure = parseFigureElement(element, \"embed\");\n    if (!parsedFigure) {\n      return undefined;\n    }\n\n    const { targetElement, caption } = parsedFigure;\n\n    return {\n      ...parseEmbedElement(targetElement as HTMLEmbedElement),\n      caption,\n    };\n  }\n\n  return undefined;\n};\n\nexport const fileToExternalHTML = (\n  block: BlockFromConfig<typeof fileBlockConfig, any, any>,\n) => {\n  if (!block.props.url) {\n    const div = document.createElement(\"p\");\n    div.textContent = \"Add file\";\n\n    return {\n      dom: div,\n    };\n  }\n\n  const fileSrcLink = document.createElement(\"a\");\n  fileSrcLink.href = block.props.url;\n  fileSrcLink.textContent = block.props.name || block.props.url;\n\n  if (block.props.caption) {\n    return createLinkWithCaption(fileSrcLink, block.props.caption);\n  }\n\n  return {\n    dom: fileSrcLink,\n  };\n};\n\nexport const FileBlock = createBlockSpec(fileBlockConfig, {\n  render: fileRender,\n  parse: fileParse,\n  toExternalHTML: fileToExternalHTML,\n});\n","import { ViewMutationRecord } from \"@tiptap/pm/view\";\n\nimport { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { Block } from \"../defaultBlocks.js\";\n\ntype ToggledState = {\n  set: (block: Block<any, any, any>, isToggled: boolean) => void;\n  get: (block: Block<any, any, any>) => boolean;\n};\n\nexport const defaultToggledState: ToggledState = {\n  set: (block, isToggled: boolean) =>\n    window.localStorage.setItem(\n      `toggle-${block.id}`,\n      isToggled ? \"true\" : \"false\",\n    ),\n  get: (block) => window.localStorage.getItem(`toggle-${block.id}`) === \"true\",\n};\n\nexport const createToggleWrapper = (\n  block: Block<any, any, any>,\n  editor: BlockNoteEditor<any, any, any>,\n  renderedElement: HTMLElement,\n  toggledState: ToggledState = defaultToggledState,\n): {\n  dom: HTMLElement;\n  contentDOM?: HTMLElement;\n  ignoreMutation?: (mutation: ViewMutationRecord) => boolean;\n  destroy?: () => void;\n} => {\n  if (\"isToggleable\" in block.props && !block.props.isToggleable) {\n    return {\n      dom: renderedElement,\n    };\n  }\n\n  const dom = document.createElement(\"div\");\n\n  const toggleWrapper = document.createElement(\"div\");\n  toggleWrapper.className = \"bn-toggle-wrapper\";\n\n  const toggleButton = document.createElement(\"button\");\n  toggleButton.className = \"bn-toggle-button\";\n  toggleButton.type = \"button\";\n  toggleButton.innerHTML =\n    // https://fonts.google.com/icons?selected=Material+Symbols+Rounded:chevron_right:FILL@0;wght@700;GRAD@0;opsz@24&icon.query=chevron&icon.style=Rounded&icon.size=24&icon.color=%23e8eaed\n    '<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"CURRENTCOLOR\"><path d=\"M320-200v-560l440 280-440 280Z\"/></svg>';\n  const toggleButtonMouseDown = (event: MouseEvent) => event.preventDefault();\n  toggleButton.addEventListener(\"mousedown\", toggleButtonMouseDown);\n  const toggleButtonOnClick = () => {\n    // Toggles visibility of child blocks. Also adds/removes the \"add block\"\n    // button if there are no child blocks.\n    if (toggleWrapper.getAttribute(\"data-show-children\") === \"true\") {\n      toggleWrapper.setAttribute(\"data-show-children\", \"false\");\n      toggledState.set(editor.getBlock(block)!, false);\n\n      if (dom.contains(toggleAddBlockButton)) {\n        dom.removeChild(toggleAddBlockButton);\n      }\n    } else {\n      toggleWrapper.setAttribute(\"data-show-children\", \"true\");\n      toggledState.set(editor.getBlock(block)!, true);\n\n      if (\n        editor.getBlock(block)?.children.length === 0 &&\n        !dom.contains(toggleAddBlockButton)\n      ) {\n        dom.appendChild(toggleAddBlockButton);\n      }\n    }\n  };\n  toggleButton.addEventListener(\"click\", toggleButtonOnClick);\n\n  toggleWrapper.appendChild(toggleButton);\n  toggleWrapper.appendChild(renderedElement);\n\n  const toggleAddBlockButton = document.createElement(\"button\");\n  toggleAddBlockButton.className = \"bn-toggle-add-block-button\";\n  toggleAddBlockButton.type = \"button\";\n  toggleAddBlockButton.textContent = \"Empty toggle. Click to add a block.\";\n  const toggleAddBlockButtonMouseDown = (event: MouseEvent) =>\n    event.preventDefault();\n  toggleAddBlockButton.addEventListener(\n    \"mousedown\",\n    toggleAddBlockButtonMouseDown,\n  );\n  const toggleAddBlockButtonOnClick = () => {\n    // Adds a single empty child block.\n    editor.transact(() => {\n      // dom.removeChild(toggleAddBlockButton);\n\n      const updatedBlock = editor.updateBlock(block, {\n        // Single empty block with default type.\n        children: [{}],\n      });\n      editor.setTextCursorPosition(updatedBlock.children[0].id, \"end\");\n      editor.focus();\n    });\n  };\n  toggleAddBlockButton.addEventListener(\"click\", toggleAddBlockButtonOnClick);\n\n  dom.appendChild(toggleWrapper);\n\n  let childCount = block.children.length;\n  const onEditorChange = editor.onChange(() => {\n    const newChildCount = editor.getBlock(block)?.children.length ?? 0;\n\n    if (newChildCount > childCount) {\n      // If a child block is added while children are hidden, show children.\n      if (toggleWrapper.getAttribute(\"data-show-children\") === \"false\") {\n        toggleWrapper.setAttribute(\"data-show-children\", \"true\");\n        toggledState.set(editor.getBlock(block)!, true);\n      }\n\n      // Remove the \"add block\" button as we want to show child blocks and\n      // there is at least one child block.\n      if (dom.contains(toggleAddBlockButton)) {\n        dom.removeChild(toggleAddBlockButton);\n      }\n    } else if (newChildCount === 0 && newChildCount < childCount) {\n      // If the last child block is removed while children are shown, hide\n      // children.\n      if (toggleWrapper.getAttribute(\"data-show-children\") === \"true\") {\n        toggleWrapper.setAttribute(\"data-show-children\", \"false\");\n        toggledState.set(editor.getBlock(block)!, false);\n      }\n\n      // Remove the \"add block\" button as we want to hide child blocks,\n      // regardless of whether there are child blocks or not.\n      if (dom.contains(toggleAddBlockButton)) {\n        dom.removeChild(toggleAddBlockButton);\n      }\n    }\n\n    childCount = newChildCount;\n  });\n\n  if (toggledState.get(block)) {\n    toggleWrapper.setAttribute(\"data-show-children\", \"true\");\n\n    if (block.children.length === 0) {\n      // If the toggle is set to show children, but there are no children,\n      // we add the \"add block\" button.\n      dom.appendChild(toggleAddBlockButton);\n    }\n  } else {\n    toggleWrapper.setAttribute(\"data-show-children\", \"false\");\n  }\n\n  return {\n    dom,\n    // Prevents re-renders when the toggle button is clicked.\n    ignoreMutation: (mutation) => {\n      if (\n        mutation instanceof MutationRecord &&\n        // We want to prevent re-renders when the view changes, so we ignore\n        // all mutations where the `data-show-children` attribute is changed\n        // or the \"add block\" button is added/removed.\n        ((mutation.type === \"attributes\" &&\n          mutation.target === toggleWrapper &&\n          mutation.attributeName === \"data-show-children\") ||\n          (mutation.type === \"childList\" &&\n            (mutation.addedNodes[0] === toggleAddBlockButton ||\n              mutation.removedNodes[0] === toggleAddBlockButton)))\n      ) {\n        return true;\n      }\n      return false;\n    },\n    destroy: () => {\n      toggleButton.removeEventListener(\"mousedown\", toggleButtonMouseDown);\n      toggleButton.removeEventListener(\"click\", toggleButtonOnClick);\n      toggleAddBlockButton.removeEventListener(\n        \"mousedown\",\n        toggleAddBlockButtonMouseDown,\n      );\n      toggleAddBlockButton.removeEventListener(\n        \"click\",\n        toggleAddBlockButtonOnClick,\n      );\n      onEditorChange?.();\n    },\n  };\n};\n","import { InputRule } from \"@tiptap/core\";\nimport { updateBlockCommand } from \"../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport { getBlockInfoFromSelection } from \"../../api/getBlockInfoFromPos.js\";\nimport {\n  PropSchema,\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n  getBlockFromPos,\n  propsToAttributes,\n} from \"../../schema/index.js\";\nimport { createDefaultBlockDOMOutputSpec } from \"../defaultBlockHelpers.js\";\nimport { defaultProps } from \"../defaultProps.js\";\nimport { createToggleWrapper } from \"../ToggleWrapper/createToggleWrapper.js\";\nimport { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\n\nconst HEADING_LEVELS = [1, 2, 3, 4, 5, 6] as const;\n\nexport const headingPropSchema = {\n  ...defaultProps,\n  level: { default: 1, values: HEADING_LEVELS },\n  isToggleable: { default: false },\n} satisfies PropSchema;\n\nconst HeadingBlockContent = createStronglyTypedTiptapNode({\n  name: \"heading\",\n  content: \"inline*\",\n  group: \"blockContent\",\n\n  addAttributes() {\n    return propsToAttributes(headingPropSchema);\n  },\n\n  addInputRules() {\n    const editor = this.options.editor as BlockNoteEditor<any, any, any>;\n    return [\n      ...editor.settings.heading.levels.map((level) => {\n        // Creates a heading of appropriate level when starting with \"#\", \"##\", or \"###\".\n        return new InputRule({\n          find: new RegExp(`^(#{${level}})\\\\s$`),\n          handler: ({ state, chain, range }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (\n              !blockInfo.isBlockContainer ||\n              blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n            ) {\n              return;\n            }\n\n            chain()\n              .command(\n                updateBlockCommand(blockInfo.bnBlock.beforePos, {\n                  type: \"heading\",\n                  props: {\n                    level: level as any,\n                  },\n                }),\n              )\n              // Removes the \"#\" character(s) used to set the heading.\n              .deleteRange({ from: range.from, to: range.to })\n              .run();\n          },\n        });\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    const editor = this.options.editor as BlockNoteEditor<any, any, any>;\n\n    return Object.fromEntries(\n      editor.settings.heading.levels.map((level) => [\n        `Mod-Alt-${level}`,\n        () => {\n          const blockInfo = getBlockInfoFromSelection(this.editor.state);\n          if (\n            !blockInfo.isBlockContainer ||\n            blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n          ) {\n            return true;\n          }\n\n          return this.editor.commands.command(\n            updateBlockCommand(blockInfo.bnBlock.beforePos, {\n              type: \"heading\",\n              props: {\n                level: level as any,\n              },\n            }),\n          );\n        },\n      ]),\n    );\n  },\n  parseHTML() {\n    const editor = this.options.editor as BlockNoteEditor<any, any, any>;\n\n    return [\n      // Parse from internal HTML.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \".bn-inline-content\",\n      },\n      ...editor.settings.heading.levels.map((level) => ({\n        tag: `h${level}`,\n        attrs: { level },\n        node: \"heading\",\n      })),\n    ];\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return createDefaultBlockDOMOutputSpec(\n      this.name,\n      `h${node.attrs.level}`,\n      {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      },\n      this.options.domAttributes?.inlineContent || {},\n    );\n  },\n\n  addNodeView() {\n    return ({ node, HTMLAttributes, getPos }) => {\n      const { dom, contentDOM } = createDefaultBlockDOMOutputSpec(\n        this.name,\n        `h${node.attrs.level}`,\n        {\n          ...(this.options.domAttributes?.blockContent || {}),\n          ...HTMLAttributes,\n        },\n        this.options.domAttributes?.inlineContent || {},\n      );\n      dom.removeChild(contentDOM);\n\n      const editor = this.options.editor;\n      const block = getBlockFromPos(getPos, editor, this.editor, this.name);\n\n      const toggleWrapper = createToggleWrapper(\n        block as any,\n        editor,\n        contentDOM,\n      );\n      dom.appendChild(toggleWrapper.dom);\n\n      return {\n        dom,\n        contentDOM,\n        ignoreMutation: toggleWrapper.ignoreMutation,\n        destroy: toggleWrapper.destroy,\n      };\n    };\n  },\n});\n\nexport const Heading = createBlockSpecFromStronglyTypedTiptapNode(\n  HeadingBlockContent,\n  headingPropSchema,\n);\n","import type { BlockNoteEditor } from \"../../../../editor/BlockNoteEditor.js\";\nimport { BlockFromConfig, FileBlockConfig } from \"../../../../schema/index.js\";\nimport { createFileBlockWrapper } from \"./createFileBlockWrapper.js\";\n\nexport const createResizableFileBlockWrapper = (\n  block: BlockFromConfig<FileBlockConfig, any, any>,\n  editor: BlockNoteEditor<any, any, any>,\n  element: { dom: HTMLElement; destroy?: () => void },\n  resizeHandlesContainerElement: HTMLElement,\n  buttonText: string,\n  buttonIcon: HTMLElement,\n): { dom: HTMLElement; destroy: () => void } => {\n  const { dom, destroy } = createFileBlockWrapper(\n    block,\n    editor,\n    element,\n    buttonText,\n    buttonIcon,\n  );\n  const wrapper = dom;\n  if (block.props.url && block.props.showPreview) {\n    if (block.props.previewWidth) {\n      wrapper.style.width = `${block.props.previewWidth}px`;\n    } else {\n      wrapper.style.width = \"fit-content\";\n    }\n  }\n\n  const leftResizeHandle = document.createElement(\"div\");\n  leftResizeHandle.className = \"bn-resize-handle\";\n  leftResizeHandle.style.left = \"4px\";\n  const rightResizeHandle = document.createElement(\"div\");\n  rightResizeHandle.className = \"bn-resize-handle\";\n  rightResizeHandle.style.right = \"4px\";\n\n  // Temporary parameters set when the user begins resizing the element, used to\n  // calculate the new width of the element.\n  let resizeParams:\n    | {\n        handleUsed: \"left\" | \"right\";\n        initialWidth: number;\n        initialClientX: number;\n      }\n    | undefined;\n  let width = block.props.previewWidth! as number;\n\n  // Updates the element width with an updated width depending on the cursor X\n  // offset from when the resize began, and which resize handle is being used.\n  const windowMouseMoveHandler = (event: MouseEvent) => {\n    if (!resizeParams) {\n      if (\n        !editor.isEditable &&\n        resizeHandlesContainerElement.contains(leftResizeHandle) &&\n        resizeHandlesContainerElement.contains(rightResizeHandle)\n      ) {\n        resizeHandlesContainerElement.removeChild(leftResizeHandle);\n        resizeHandlesContainerElement.removeChild(rightResizeHandle);\n      }\n\n      return;\n    }\n\n    let newWidth: number;\n\n    if (block.props.textAlignment === \"center\") {\n      if (resizeParams.handleUsed === \"left\") {\n        newWidth =\n          resizeParams.initialWidth +\n          (resizeParams.initialClientX - event.clientX) * 2;\n      } else {\n        newWidth =\n          resizeParams.initialWidth +\n          (event.clientX - resizeParams.initialClientX) * 2;\n      }\n    } else {\n      if (resizeParams.handleUsed === \"left\") {\n        newWidth =\n          resizeParams.initialWidth +\n          resizeParams.initialClientX -\n          event.clientX;\n      } else {\n        newWidth =\n          resizeParams.initialWidth +\n          event.clientX -\n          resizeParams.initialClientX;\n      }\n    }\n\n    // Min element width in px.\n    const minWidth = 64;\n\n    // Ensures the element is not wider than the editor and not narrower than a\n    // predetermined minimum width.\n    width = Math.min(\n      Math.max(newWidth, minWidth),\n      editor.domElement?.firstElementChild?.clientWidth || Number.MAX_VALUE,\n    );\n    wrapper.style.width = `${width}px`;\n  };\n  // Stops mouse movements from resizing the element and updates the block's\n  // `width` prop to the new value.\n  const windowMouseUpHandler = (event: MouseEvent) => {\n    // Hides the drag handles if the cursor is no longer over the element.\n    if (\n      (!event.target ||\n        !wrapper.contains(event.target as Node) ||\n        !editor.isEditable) &&\n      resizeHandlesContainerElement.contains(leftResizeHandle) &&\n      resizeHandlesContainerElement.contains(rightResizeHandle)\n    ) {\n      resizeHandlesContainerElement.removeChild(leftResizeHandle);\n      resizeHandlesContainerElement.removeChild(rightResizeHandle);\n    }\n\n    if (!resizeParams) {\n      return;\n    }\n\n    resizeParams = undefined;\n\n    editor.updateBlock(block, {\n      props: {\n        previewWidth: width,\n      },\n    });\n  };\n\n  // Shows the resize handles when hovering over the wrapper with the cursor.\n  const wrapperMouseEnterHandler = () => {\n    if (editor.isEditable) {\n      resizeHandlesContainerElement.appendChild(leftResizeHandle);\n      resizeHandlesContainerElement.appendChild(rightResizeHandle);\n    }\n  };\n  // Hides the resize handles when the cursor leaves the wrapper, unless the\n  // cursor moves to one of the resize handles.\n  const wrapperMouseLeaveHandler = (event: MouseEvent) => {\n    if (\n      event.relatedTarget === leftResizeHandle ||\n      event.relatedTarget === rightResizeHandle\n    ) {\n      return;\n    }\n\n    if (resizeParams) {\n      return;\n    }\n\n    if (\n      editor.isEditable &&\n      resizeHandlesContainerElement.contains(leftResizeHandle) &&\n      resizeHandlesContainerElement.contains(rightResizeHandle)\n    ) {\n      resizeHandlesContainerElement.removeChild(leftResizeHandle);\n      resizeHandlesContainerElement.removeChild(rightResizeHandle);\n    }\n  };\n\n  // Sets the resize params, allowing the user to begin resizing the element by\n  // moving the cursor left or right.\n  const leftResizeHandleMouseDownHandler = (event: MouseEvent) => {\n    event.preventDefault();\n\n    resizeParams = {\n      handleUsed: \"left\",\n      initialWidth: wrapper.clientWidth,\n      initialClientX: event.clientX,\n    };\n  };\n  const rightResizeHandleMouseDownHandler = (event: MouseEvent) => {\n    event.preventDefault();\n\n    resizeParams = {\n      handleUsed: \"right\",\n      initialWidth: wrapper.clientWidth,\n      initialClientX: event.clientX,\n    };\n  };\n\n  window.addEventListener(\"mousemove\", windowMouseMoveHandler);\n  window.addEventListener(\"mouseup\", windowMouseUpHandler);\n  wrapper.addEventListener(\"mouseenter\", wrapperMouseEnterHandler);\n  wrapper.addEventListener(\"mouseleave\", wrapperMouseLeaveHandler);\n  leftResizeHandle.addEventListener(\n    \"mousedown\",\n    leftResizeHandleMouseDownHandler,\n  );\n  rightResizeHandle.addEventListener(\n    \"mousedown\",\n    rightResizeHandleMouseDownHandler,\n  );\n\n  return {\n    dom: wrapper,\n    destroy: () => {\n      destroy?.();\n      window.removeEventListener(\"mousemove\", windowMouseMoveHandler);\n      window.removeEventListener(\"mouseup\", windowMouseUpHandler);\n      wrapper.removeEventListener(\"mouseenter\", wrapperMouseEnterHandler);\n      wrapper.removeEventListener(\"mouseleave\", wrapperMouseLeaveHandler);\n      leftResizeHandle.removeEventListener(\n        \"mousedown\",\n        leftResizeHandleMouseDownHandler,\n      );\n      rightResizeHandle.removeEventListener(\n        \"mousedown\",\n        rightResizeHandleMouseDownHandler,\n      );\n    },\n  };\n};\n","export const parseImageElement = (imageElement: HTMLImageElement) => {\n  const url = imageElement.src || undefined;\n  const previewWidth = imageElement.width || undefined;\n\n  return { url, previewWidth };\n};\n","import type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport {\n  BlockFromConfig,\n  createBlockSpec,\n  FileBlockConfig,\n  Props,\n  PropSchema,\n} from \"../../schema/index.js\";\nimport { defaultProps } from \"../defaultProps.js\";\nimport { parseFigureElement } from \"../FileBlockContent/helpers/parse/parseFigureElement.js\";\nimport { createFigureWithCaption } from \"../FileBlockContent/helpers/toExternalHTML/createFigureWithCaption.js\";\nimport { createLinkWithCaption } from \"../FileBlockContent/helpers/toExternalHTML/createLinkWithCaption.js\";\nimport { createResizableFileBlockWrapper } from \"../FileBlockContent/helpers/render/createResizableFileBlockWrapper.js\";\nimport { parseImageElement } from \"./parseImageElement.js\";\n\nexport const FILE_IMAGE_ICON_SVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M5 11.1005L7 9.1005L12.5 14.6005L16 11.1005L19 14.1005V5H5V11.1005ZM4 3H20C20.5523 3 21 3.44772 21 4V20C21 20.5523 20.5523 21 20 21H4C3.44772 21 3 20.5523 3 20V4C3 3.44772 3.44772 3 4 3ZM15.5 10C14.6716 10 14 9.32843 14 8.5C14 7.67157 14.6716 7 15.5 7C16.3284 7 17 7.67157 17 8.5C17 9.32843 16.3284 10 15.5 10Z\"></path></svg>';\n\nexport const imagePropSchema = {\n  textAlignment: defaultProps.textAlignment,\n  backgroundColor: defaultProps.backgroundColor,\n  // File name.\n  name: {\n    default: \"\" as const,\n  },\n  // File url.\n  url: {\n    default: \"\" as const,\n  },\n  // File caption.\n  caption: {\n    default: \"\" as const,\n  },\n\n  showPreview: {\n    default: true,\n  },\n  // File preview width in px.\n  previewWidth: {\n    default: undefined,\n    type: \"number\",\n  },\n} satisfies PropSchema;\n\nexport const imageBlockConfig = {\n  type: \"image\" as const,\n  propSchema: imagePropSchema,\n  content: \"none\",\n  isFileBlock: true,\n  fileBlockAccept: [\"image/*\"],\n} satisfies FileBlockConfig;\n\nexport const imageRender = (\n  block: BlockFromConfig<typeof imageBlockConfig, any, any>,\n  editor: BlockNoteEditor<any, any, any>,\n) => {\n  const icon = document.createElement(\"div\");\n  icon.innerHTML = FILE_IMAGE_ICON_SVG;\n\n  const imageWrapper = document.createElement(\"div\");\n  imageWrapper.className = \"bn-visual-media-wrapper\";\n\n  const image = document.createElement(\"img\");\n  image.className = \"bn-visual-media\";\n  if (editor.resolveFileUrl) {\n    editor.resolveFileUrl(block.props.url).then((downloadUrl) => {\n      image.src = downloadUrl;\n    });\n  } else {\n    image.src = block.props.url;\n  }\n\n  image.alt = block.props.name || block.props.caption || \"BlockNote image\";\n  image.contentEditable = \"false\";\n  image.draggable = false;\n  imageWrapper.appendChild(image);\n\n  return createResizableFileBlockWrapper(\n    block,\n    editor,\n    { dom: imageWrapper },\n    imageWrapper,\n    editor.dictionary.file_blocks.image.add_button_text,\n    icon.firstElementChild as HTMLElement,\n  );\n};\n\nexport const imageParse = (\n  element: HTMLElement,\n): Partial<Props<typeof imageBlockConfig.propSchema>> | undefined => {\n  if (element.tagName === \"IMG\") {\n    // Ignore if parent figure has already been parsed.\n    if (element.closest(\"figure\")) {\n      return undefined;\n    }\n\n    return parseImageElement(element as HTMLImageElement);\n  }\n\n  if (element.tagName === \"FIGURE\") {\n    const parsedFigure = parseFigureElement(element, \"img\");\n    if (!parsedFigure) {\n      return undefined;\n    }\n\n    const { targetElement, caption } = parsedFigure;\n\n    return {\n      ...parseImageElement(targetElement as HTMLImageElement),\n      caption,\n    };\n  }\n\n  return undefined;\n};\n\nexport const imageToExternalHTML = (\n  block: BlockFromConfig<typeof imageBlockConfig, any, any>,\n) => {\n  if (!block.props.url) {\n    const div = document.createElement(\"p\");\n    div.textContent = \"Add image\";\n\n    return {\n      dom: div,\n    };\n  }\n\n  let image;\n  if (block.props.showPreview) {\n    image = document.createElement(\"img\");\n    image.src = block.props.url;\n    image.alt = block.props.name || block.props.caption || \"BlockNote image\";\n    if (block.props.previewWidth) {\n      image.width = block.props.previewWidth;\n    }\n  } else {\n    image = document.createElement(\"a\");\n    image.href = block.props.url;\n    image.textContent = block.props.name || block.props.url;\n  }\n\n  if (block.props.caption) {\n    if (block.props.showPreview) {\n      return createFigureWithCaption(image, block.props.caption);\n    } else {\n      return createLinkWithCaption(image, block.props.caption);\n    }\n  }\n\n  return {\n    dom: image,\n  };\n};\n\nexport const ImageBlock = createBlockSpec(imageBlockConfig, {\n  render: imageRender,\n  parse: imageParse,\n  toExternalHTML: imageToExternalHTML,\n});\n","import { EditorState } from \"prosemirror-state\";\n\nimport {\n  getBlockInfo,\n  getNearestBlockPos,\n} from \"../../../getBlockInfoFromPos.js\";\n\nexport const splitBlockCommand = (\n  posInBlock: number,\n  keepType?: boolean,\n  keepProps?: boolean,\n) => {\n  return ({\n    state,\n    dispatch,\n  }: {\n    state: EditorState;\n    dispatch: ((args?: any) => any) | undefined;\n  }) => {\n    const nearestBlockContainerPos = getNearestBlockPos(state.doc, posInBlock);\n\n    const info = getBlockInfo(nearestBlockContainerPos);\n\n    if (!info.isBlockContainer) {\n      throw new Error(\n        `BlockContainer expected when calling splitBlock, position ${posInBlock}`,\n      );\n    }\n\n    const types = [\n      {\n        type: info.bnBlock.node.type, // always keep blockcontainer type\n        attrs: keepProps ? { ...info.bnBlock.node.attrs, id: undefined } : {},\n      },\n      {\n        type: keepType\n          ? info.blockContent.node.type\n          : state.schema.nodes[\"paragraph\"],\n        attrs: keepProps ? { ...info.blockContent.node.attrs } : {},\n      },\n    ];\n\n    if (dispatch) {\n      state.tr.split(posInBlock, 2, types);\n    }\n\n    return true;\n  };\n};\n","import { splitBlockCommand } from \"../../api/blockManipulation/commands/splitBlock/splitBlock.js\";\nimport { updateBlockCommand } from \"../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport { getBlockInfoFromTransaction } from \"../../api/getBlockInfoFromPos.js\";\nimport { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\n\nexport const handleEnter = (editor: BlockNoteEditor<any, any, any>) => {\n  const { blockInfo, selectionEmpty } = editor.transact((tr) => {\n    return {\n      blockInfo: getBlockInfoFromTransaction(tr),\n      selectionEmpty: tr.selection.anchor === tr.selection.head,\n    };\n  });\n\n  if (!blockInfo.isBlockContainer) {\n    return false;\n  }\n  const { bnBlock: blockContainer, blockContent } = blockInfo;\n\n  if (\n    !(\n      blockContent.node.type.name === \"toggleListItem\" ||\n      blockContent.node.type.name === \"bulletListItem\" ||\n      blockContent.node.type.name === \"numberedListItem\" ||\n      blockContent.node.type.name === \"checkListItem\"\n    ) ||\n    !selectionEmpty\n  ) {\n    return false;\n  }\n\n  return editor._tiptapEditor.commands.first(({ state, chain, commands }) => [\n    () =>\n      // Changes list item block to a paragraph block if the content is empty.\n      commands.command(() => {\n        if (blockContent.node.childCount === 0) {\n          return commands.command(\n            updateBlockCommand(blockContainer.beforePos, {\n              type: \"paragraph\",\n              props: {},\n            }),\n          );\n        }\n\n        return false;\n      }),\n\n    () =>\n      // Splits the current block, moving content inside that's after the cursor\n      // to a new block of the same type below.\n      commands.command(() => {\n        if (blockContent.node.childCount > 0) {\n          chain()\n            .deleteSelection()\n            .command(splitBlockCommand(state.selection.from, true))\n            .run();\n\n          return true;\n        }\n\n        return false;\n      }),\n  ]);\n};\n","import { updateBlockCommand } from \"../../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport { getBlockInfoFromSelection } from \"../../../api/getBlockInfoFromPos.js\";\nimport {\n  PropSchema,\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n  getBlockFromPos,\n} from \"../../../schema/index.js\";\nimport { createDefaultBlockDOMOutputSpec } from \"../../defaultBlockHelpers.js\";\nimport { defaultProps } from \"../../defaultProps.js\";\nimport { createToggleWrapper } from \"../../ToggleWrapper/createToggleWrapper.js\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts.js\";\n\nexport const toggleListItemPropSchema = {\n  ...defaultProps,\n} satisfies PropSchema;\n\nconst ToggleListItemBlockContent = createStronglyTypedTiptapNode({\n  name: \"toggleListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  // This is to make sure that the list item Enter keyboard handler takes\n  // priority over the default one.\n  priority: 90,\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => handleEnter(this.options.editor),\n      \"Mod-Shift-6\": () => {\n        const blockInfo = getBlockInfoFromSelection(this.editor.state);\n        if (\n          !blockInfo.isBlockContainer ||\n          blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n        ) {\n          return true;\n        }\n\n        return this.editor.commands.command(\n          updateBlockCommand(blockInfo.bnBlock.beforePos, {\n            type: \"toggleListItem\",\n            props: {},\n          }),\n        );\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      // Parse from internal HTML.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \".bn-inline-content\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return createDefaultBlockDOMOutputSpec(\n      this.name,\n      \"p\",\n      {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      },\n      this.options.domAttributes?.inlineContent || {},\n    );\n  },\n\n  addNodeView() {\n    return ({ HTMLAttributes, getPos }) => {\n      const { dom, contentDOM } = createDefaultBlockDOMOutputSpec(\n        this.name,\n        \"p\",\n        {\n          ...(this.options.domAttributes?.blockContent || {}),\n          ...HTMLAttributes,\n        },\n        this.options.domAttributes?.inlineContent || {},\n      );\n\n      const editor = this.options.editor;\n      const block = getBlockFromPos(getPos, editor, this.editor, this.name);\n\n      const toggleWrapper = createToggleWrapper(\n        block as any,\n        editor,\n        contentDOM,\n      );\n      dom.appendChild(toggleWrapper.dom);\n\n      return {\n        dom,\n        contentDOM,\n        ignoreMutation: toggleWrapper.ignoreMutation,\n        destroy: toggleWrapper.destroy,\n      };\n    };\n  },\n});\n\nexport const ToggleListItem = createBlockSpecFromStronglyTypedTiptapNode(\n  ToggleListItemBlockContent,\n  toggleListItemPropSchema,\n);\n","import { DOMParser, Fragment, Schema } from \"prosemirror-model\";\n\n/**\n * This function is used to parse the content of a list item external HTML node.\n *\n * Due to a change in how prosemirror-model handles parsing elements, we have additional flexibility in how we can \"fit\" content into a list item.\n *\n * We've decided to take an approach that is similar to Notion. The core rules of the algorithm are:\n *\n *  - If the first child of an `li` has ONLY text content, take the text content, and flatten it into the list item. Subsequent siblings are carried over as is, as children of the list item.\n *    - e.g. `<li><h1>Hello</h1><p>World</p></li> -> <li>Hello<blockGroup><blockContainer><p>World</p></blockContainer></blockGroup></li>`\n *  - Else, take the content and insert it as children instead.\n *    - e.g. `<li><img src=\"url\" /></li> -> <li><p></p><blockGroup><blockContainer><img src=\"url\" /></blockContainer></blockGroup></li>`\n *\n * This ensures that a list item's content is always valid ProseMirror content. Smoothing over differences between how external HTML may be rendered, and how ProseMirror expects content to be structured.\n */\nexport function getListItemContent(\n  /**\n   * The `li` element to parse.\n   */\n  _node: Node,\n  /**\n   * The schema to use for parsing.\n   */\n  schema: Schema,\n  /**\n   * The name of the list item node.\n   */\n  name: string,\n): Fragment {\n  /**\n   * To actually implement this algorithm, we need to leverage ProseMirror's \"fitting\" algorithm.\n   * Where, if content is parsed which doesn't fit into the current node, it will be moved into the parent node.\n   *\n   * This allows us to parse multiple pieces of content from within the list item (even though it normally would not match the list item's schema) and \"throw\" the excess content into the list item's children.\n   *\n   * The expected return value is a `Fragment` which contains the list item's content as the first element, and the children wrapped in a blockGroup node. Like so:\n   * ```\n   * Fragment<[Node<Text>, Node<BlockGroup<Node<BlockContainer<any>>>>]>\n   * ```\n   */\n  const parser = DOMParser.fromSchema(schema);\n\n  // TODO: This will be unnecessary in the future: https://github.com/ProseMirror/prosemirror-model/commit/166188d4f9db96eb86fb7de62e72049c86c9dd79\n  const node = _node as HTMLElement;\n\n  // Move the `li` element's content into a new `div` element\n  // This is a hacky workaround to not re-trigger list item parsing,\n  // when we are looking to understand what the list item's content actually is, in terms of the schema.\n  const clonedNodeDiv = document.createElement(\"div\");\n  // Mark the `div` element as a `blockGroup` to make the parsing easier.\n  clonedNodeDiv.setAttribute(\"data-node-type\", \"blockGroup\");\n  // Clone all children of the `li` element into the new `div` element\n  for (const child of Array.from(node.childNodes)) {\n    clonedNodeDiv.appendChild(child.cloneNode(true));\n  }\n\n  // Parses children of the `li` element into a `blockGroup` with `blockContainer` node children\n  // This is the structure of list item children, so parsing into this structure allows for\n  // easy separation of list item content from child list item content.\n  let blockGroupNode = parser.parse(clonedNodeDiv, {\n    topNode: schema.nodes.blockGroup.create(),\n  });\n\n  // There is an edge case where a list item's content may contain a `<input>` element.\n  // Causing it to be recognized as a `checkListItem`.\n  // We want to skip this, and just parse the list item's content as is.\n  if (blockGroupNode.firstChild?.firstChild?.type.name === \"checkListItem\") {\n    // We skip the first child, by cutting it out of the `blockGroup` node.\n    // and continuing with the rest of the algorithm.\n    blockGroupNode = blockGroupNode.copy(\n      blockGroupNode.content.cut(\n        blockGroupNode.firstChild.firstChild.nodeSize + 2,\n      ),\n    );\n  }\n\n  // Structure above is `blockGroup<blockContainer<any>[]>`\n  // We want to extract the first `blockContainer` node's content, and see if it is a text block.\n  const listItemsFirstChild = blockGroupNode.firstChild?.firstChild;\n\n  // If the first node is not a text block, then it's first child is not compatible with the list item node.\n  if (!listItemsFirstChild?.isTextblock) {\n    // So, we do not try inserting anything into the list item, and instead return anything we found as children for the list item.\n    return Fragment.from(blockGroupNode);\n  }\n\n  // If it is a text block, then we know it only contains text content.\n  // So, we extract it, and insert its content into the `listItemNode`.\n  // The remaining nodes in the `blockGroup` stay in-place.\n  const listItemNode = schema.nodes[name].create(\n    {},\n    listItemsFirstChild.content,\n  );\n\n  // We have `blockGroup<listItemsFirstChild, ...blockContainer<any>[]>`\n  // We want to extract out the rest of the nodes as `<...blockContainer<any>[]>`\n  const remainingListItemChildren = blockGroupNode.content.cut(\n    // +2 for the `blockGroup` node's start and end markers\n    listItemsFirstChild.nodeSize + 2,\n  );\n  const hasRemainingListItemChildren = remainingListItemChildren.size > 0;\n\n  if (hasRemainingListItemChildren) {\n    // Copy the remaining list item children back into the `blockGroup` node.\n    // This will make it back into: `blockGroup<...blockContainer<any>[]>`\n    const listItemsChildren = blockGroupNode.copy(remainingListItemChildren);\n\n    // Return the `listItem` node's content, then add the parsed children after to be lifted out by ProseMirror \"fitting\" algorithm.\n    return listItemNode.content.addToEnd(listItemsChildren);\n  }\n\n  // Otherwise, just return the `listItem` node's content.\n  return listItemNode.content;\n}\n","import { InputRule } from \"@tiptap/core\";\nimport { updateBlockCommand } from \"../../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport { getBlockInfoFromSelection } from \"../../../api/getBlockInfoFromPos.js\";\nimport {\n  PropSchema,\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n} from \"../../../schema/index.js\";\nimport { createDefaultBlockDOMOutputSpec } from \"../../defaultBlockHelpers.js\";\nimport { defaultProps } from \"../../defaultProps.js\";\nimport { getListItemContent } from \"../getListItemContent.js\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts.js\";\n\nexport const bulletListItemPropSchema = {\n  ...defaultProps,\n} satisfies PropSchema;\n\nconst BulletListItemBlockContent = createStronglyTypedTiptapNode({\n  name: \"bulletListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  // This is to make sure that check list parse rules run before, since they\n  // both parse `li` elements but check lists are more specific.\n  priority: 90,\n  addInputRules() {\n    return [\n      // Creates an unordered list when starting with \"-\", \"+\", or \"*\".\n      new InputRule({\n        find: new RegExp(`^[-+*]\\\\s$`),\n        handler: ({ state, chain, range }) => {\n          const blockInfo = getBlockInfoFromSelection(state);\n          if (\n            !blockInfo.isBlockContainer ||\n            blockInfo.blockContent.node.type.spec.content !== \"inline*\" ||\n            blockInfo.blockNoteType === \"heading\"\n          ) {\n            return;\n          }\n\n          chain()\n            .command(\n              updateBlockCommand(blockInfo.bnBlock.beforePos, {\n                type: \"bulletListItem\",\n                props: {},\n              }),\n            )\n            // Removes the \"-\", \"+\", or \"*\" character used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => handleEnter(this.options.editor),\n      \"Mod-Shift-8\": () => {\n        const blockInfo = getBlockInfoFromSelection(this.editor.state);\n        if (\n          !blockInfo.isBlockContainer ||\n          blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n        ) {\n          return true;\n        }\n\n        return this.editor.commands.command(\n          updateBlockCommand(blockInfo.bnBlock.beforePos, {\n            type: \"bulletListItem\",\n            props: {},\n          }),\n        );\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      // Parse from internal HTML.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \".bn-inline-content\",\n      },\n      // Parse from external HTML.\n      {\n        tag: \"li\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (\n            parent.tagName === \"UL\" ||\n            (parent.tagName === \"DIV\" && parent.parentElement?.tagName === \"UL\")\n          ) {\n            return {};\n          }\n\n          return false;\n        },\n        // As `li` elements can contain multiple paragraphs, we need to merge their contents\n        // into a single one so that ProseMirror can parse everything correctly.\n        getContent: (node, schema) =>\n          getListItemContent(node, schema, this.name),\n        node: \"bulletListItem\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return createDefaultBlockDOMOutputSpec(\n      this.name,\n      // We use a <p> tag, because for <li> tags we'd need a <ul> element to put\n      // them in to be semantically correct, which we can't have due to the\n      // schema.\n      \"p\",\n      {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      },\n      this.options.domAttributes?.inlineContent || {},\n    );\n  },\n});\n\nexport const BulletListItem = createBlockSpecFromStronglyTypedTiptapNode(\n  BulletListItemBlockContent,\n  bulletListItemPropSchema,\n);\n","import { InputRule } from \"@tiptap/core\";\nimport { updateBlockCommand } from \"../../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport {\n  getBlockInfoFromSelection,\n  getNearestBlockPos,\n} from \"../../../api/getBlockInfoFromPos.js\";\nimport {\n  PropSchema,\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n  propsToAttributes,\n} from \"../../../schema/index.js\";\nimport { createDefaultBlockDOMOutputSpec } from \"../../defaultBlockHelpers.js\";\nimport { defaultProps } from \"../../defaultProps.js\";\nimport { getListItemContent } from \"../getListItemContent.js\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts.js\";\n\nexport const checkListItemPropSchema = {\n  ...defaultProps,\n  checked: {\n    default: false,\n  },\n} satisfies PropSchema;\n\nconst checkListItemBlockContent = createStronglyTypedTiptapNode({\n  name: \"checkListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n\n  addAttributes() {\n    return propsToAttributes(checkListItemPropSchema);\n  },\n\n  addInputRules() {\n    return [\n      // Creates a checklist when starting with \"[]\" or \"[X]\".\n      new InputRule({\n        find: new RegExp(`\\\\[\\\\s*\\\\]\\\\s$`),\n        handler: ({ state, chain, range }) => {\n          const blockInfo = getBlockInfoFromSelection(state);\n          if (\n            !blockInfo.isBlockContainer ||\n            blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n          ) {\n            return;\n          }\n\n          chain()\n            .command(\n              updateBlockCommand(blockInfo.bnBlock.beforePos, {\n                type: \"checkListItem\",\n                props: {\n                  checked: false as any,\n                },\n              }),\n            )\n            // Removes the characters used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n      new InputRule({\n        find: new RegExp(`\\\\[[Xx]\\\\]\\\\s$`),\n        handler: ({ state, chain, range }) => {\n          const blockInfo = getBlockInfoFromSelection(state);\n\n          if (\n            !blockInfo.isBlockContainer ||\n            blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n          ) {\n            return;\n          }\n\n          chain()\n            .command(\n              updateBlockCommand(blockInfo.bnBlock.beforePos, {\n                type: \"checkListItem\",\n                props: {\n                  checked: true as any,\n                },\n              }),\n            )\n            // Removes the characters used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => handleEnter(this.options.editor),\n      \"Mod-Shift-9\": () => {\n        const blockInfo = getBlockInfoFromSelection(this.editor.state);\n        if (\n          !blockInfo.isBlockContainer ||\n          blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n        ) {\n          return true;\n        }\n\n        return this.editor.commands.command(\n          updateBlockCommand(blockInfo.bnBlock.beforePos, {\n            type: \"checkListItem\",\n            props: {},\n          }),\n        );\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      // Parse from internal HTML.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \".bn-inline-content\",\n      },\n      // Parse from external HTML.\n      {\n        tag: \"input\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          // Ignore if we already parsed an ancestor list item to avoid double-parsing.\n          if (element.closest(\"[data-content-type]\") || element.closest(\"li\")) {\n            return false;\n          }\n\n          if ((element as HTMLInputElement).type === \"checkbox\") {\n            return { checked: (element as HTMLInputElement).checked };\n          }\n\n          return false;\n        },\n        node: \"checkListItem\",\n      },\n      {\n        tag: \"li\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (\n            parent.tagName === \"UL\" ||\n            (parent.tagName === \"DIV\" && parent.parentElement?.tagName === \"UL\")\n          ) {\n            const checkbox =\n              (element.querySelector(\n                \"input[type=checkbox]\",\n              ) as HTMLInputElement) || null;\n\n            if (checkbox === null) {\n              return false;\n            }\n\n            return { checked: checkbox.checked };\n          }\n\n          return false;\n        },\n        // As `li` elements can contain multiple paragraphs, we need to merge their contents\n        // into a single one so that ProseMirror can parse everything correctly.\n        getContent: (node, schema) =>\n          getListItemContent(node, schema, this.name),\n        node: \"checkListItem\",\n      },\n    ];\n  },\n\n  // Since there is no HTML checklist element, there isn't really any\n  // standardization for what checklists should look like in the DOM. GDocs'\n  // and Notion's aren't cross compatible, for example. This implementation\n  // has a semantically correct DOM structure (though missing a label for the\n  // checkbox) which is also converted correctly to Markdown by remark.\n  renderHTML({ node, HTMLAttributes }) {\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.checked = node.attrs.checked;\n    if (node.attrs.checked) {\n      checkbox.setAttribute(\"checked\", \"\");\n    }\n\n    const { dom, contentDOM } = createDefaultBlockDOMOutputSpec(\n      this.name,\n      \"p\",\n      {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      },\n      this.options.domAttributes?.inlineContent || {},\n    );\n\n    dom.insertBefore(checkbox, contentDOM);\n\n    return { dom, contentDOM };\n  },\n\n  // Need to render node view since the checkbox needs to be able to update the\n  // node. This is only possible with a node view as it exposes `getPos`.\n  addNodeView() {\n    return ({ node, getPos, editor, HTMLAttributes }) => {\n      // Need to wrap certain elements in a div or keyboard navigation gets\n      // confused.\n      const wrapper = document.createElement(\"div\");\n      const checkboxWrapper = document.createElement(\"div\");\n      checkboxWrapper.contentEditable = \"false\";\n\n      const checkbox = document.createElement(\"input\");\n      checkbox.type = \"checkbox\";\n      checkbox.checked = node.attrs.checked;\n      if (node.attrs.checked) {\n        checkbox.setAttribute(\"checked\", \"\");\n      }\n\n      const changeHandler = () => {\n        if (!editor.isEditable) {\n          // This seems like the most effective way of blocking the checkbox\n          // from being toggled, as event.preventDefault() does not stop it for\n          // \"click\" or \"change\" events.\n          checkbox.checked = !checkbox.checked;\n          return;\n        }\n\n        // TODO: test\n        if (typeof getPos !== \"boolean\") {\n          const beforeBlockContainerPos = getNearestBlockPos(\n            editor.state.doc,\n            getPos(),\n          );\n\n          if (beforeBlockContainerPos.node.type.name !== \"blockContainer\") {\n            throw new Error(\n              `Expected blockContainer node, got ${beforeBlockContainerPos.node.type.name}`,\n            );\n          }\n\n          this.editor.commands.command(\n            updateBlockCommand(beforeBlockContainerPos.posBeforeNode, {\n              type: \"checkListItem\",\n              props: {\n                checked: checkbox.checked as any,\n              },\n            }),\n          );\n        }\n      };\n      checkbox.addEventListener(\"change\", changeHandler);\n\n      const { dom, contentDOM } = createDefaultBlockDOMOutputSpec(\n        this.name,\n        \"p\",\n        {\n          ...(this.options.domAttributes?.blockContent || {}),\n          ...HTMLAttributes,\n        },\n        this.options.domAttributes?.inlineContent || {},\n      );\n\n      if (typeof getPos !== \"boolean\") {\n        // Since `node` is a blockContent node, we have to get the block ID from\n        // the parent blockContainer node. This means we can't add the label in\n        // `renderHTML` as we can't use `getPos` and therefore can't get the\n        // parent blockContainer node.\n        const blockID = this.editor.state.doc.resolve(getPos()).node().attrs.id;\n        const label = \"label-\" + blockID;\n        checkbox.setAttribute(\"aria-labelledby\", label);\n        contentDOM.id = label;\n      }\n\n      dom.removeChild(contentDOM);\n      dom.appendChild(wrapper);\n      wrapper.appendChild(checkboxWrapper);\n      wrapper.appendChild(contentDOM);\n      checkboxWrapper.appendChild(checkbox);\n\n      return {\n        dom,\n        contentDOM,\n        destroy: () => {\n          checkbox.removeEventListener(\"change\", changeHandler);\n        },\n      };\n    };\n  },\n});\n\nexport const CheckListItem = createBlockSpecFromStronglyTypedTiptapNode(\n  checkListItemBlockContent,\n  checkListItemPropSchema,\n);\n","import { Plugin, PluginKey } from \"prosemirror-state\";\nimport { getBlockInfo } from \"../../../api/getBlockInfoFromPos.js\";\n\n// ProseMirror Plugin which automatically assigns indices to ordered list items per nesting level.\nconst PLUGIN_KEY = new PluginKey(`numbered-list-indexing`);\nexport const NumberedListIndexingPlugin = () => {\n  return new Plugin({\n    key: PLUGIN_KEY,\n    appendTransaction: (_transactions, _oldState, newState) => {\n      const tr = newState.tr;\n      tr.setMeta(\"numberedListIndexing\", true);\n\n      let modified = false;\n\n      // Traverses each node the doc using DFS, so blocks which are on the same nesting level will be traversed in the\n      // same order they appear. This means the index of each list item block can be calculated by incrementing the\n      // index of the previous list item block.\n      newState.doc.descendants((node, pos) => {\n        if (\n          node.type.name === \"blockContainer\" &&\n          node.firstChild!.type.name === \"numberedListItem\"\n        ) {\n          let newIndex = `${node.firstChild!.attrs[\"start\"] || 1}`;\n\n          const blockInfo = getBlockInfo({\n            posBeforeNode: pos,\n            node,\n          });\n\n          if (!blockInfo.isBlockContainer) {\n            throw new Error(\"impossible\");\n          }\n\n          // Checks if this block is the start of a new ordered list, i.e. if it's the first block in the document, the\n          // first block in its nesting level, or the previous block is not an ordered list item.\n\n          const prevBlock = tr.doc.resolve(\n            blockInfo.bnBlock.beforePos,\n          ).nodeBefore;\n\n          if (prevBlock) {\n            const prevBlockInfo = getBlockInfo({\n              posBeforeNode: blockInfo.bnBlock.beforePos - prevBlock.nodeSize,\n              node: prevBlock,\n            });\n\n            const isPrevBlockOrderedListItem =\n              prevBlockInfo.blockNoteType === \"numberedListItem\";\n\n            if (isPrevBlockOrderedListItem) {\n              if (!prevBlockInfo.isBlockContainer) {\n                throw new Error(\"impossible\");\n              }\n              const prevBlockIndex =\n                prevBlockInfo.blockContent.node.attrs[\"index\"];\n\n              newIndex = (parseInt(prevBlockIndex) + 1).toString();\n            }\n          }\n\n          const contentNode = blockInfo.blockContent.node;\n          const index = contentNode.attrs[\"index\"];\n          const isFirst =\n            prevBlock?.firstChild?.type.name !== \"numberedListItem\";\n\n          if (index !== newIndex || (contentNode.attrs.start && !isFirst)) {\n            modified = true;\n\n            const { start, ...attrs } = contentNode.attrs;\n\n            tr.setNodeMarkup(blockInfo.blockContent.beforePos, undefined, {\n              ...attrs,\n              index: newIndex,\n              ...(typeof start === \"number\" &&\n                isFirst && {\n                  start,\n                }),\n            });\n          }\n        }\n      });\n\n      return modified ? tr : null;\n    },\n  });\n};\n","import { InputRule } from \"@tiptap/core\";\nimport { updateBlockCommand } from \"../../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport { getBlockInfoFromSelection } from \"../../../api/getBlockInfoFromPos.js\";\nimport {\n  PropSchema,\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n  propsToAttributes,\n} from \"../../../schema/index.js\";\nimport { createDefaultBlockDOMOutputSpec } from \"../../defaultBlockHelpers.js\";\nimport { defaultProps } from \"../../defaultProps.js\";\nimport { getListItemContent } from \"../getListItemContent.js\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts.js\";\nimport { NumberedListIndexingPlugin } from \"./NumberedListIndexingPlugin.js\";\n\nexport const numberedListItemPropSchema = {\n  ...defaultProps,\n  start: { default: undefined, type: \"number\" },\n} satisfies PropSchema;\n\nconst NumberedListItemBlockContent = createStronglyTypedTiptapNode({\n  name: \"numberedListItem\",\n  content: \"inline*\",\n  group: \"blockContent\",\n  priority: 90,\n  addAttributes() {\n    return {\n      ...propsToAttributes(numberedListItemPropSchema),\n      // the index attribute is only used internally (it's not part of the blocknote schema)\n      // that's why it's defined explicitly here, and not part of the prop schema\n      index: {\n        default: null,\n        parseHTML: (element) => element.getAttribute(\"data-index\"),\n        renderHTML: (attributes) => {\n          return {\n            \"data-index\": attributes.index,\n          };\n        },\n      },\n    };\n  },\n\n  addInputRules() {\n    return [\n      // Creates an ordered list when starting with \"1.\".\n      new InputRule({\n        find: new RegExp(`^(\\\\d+)\\\\.\\\\s$`),\n        handler: ({ state, chain, range, match }) => {\n          const blockInfo = getBlockInfoFromSelection(state);\n          if (\n            !blockInfo.isBlockContainer ||\n            blockInfo.blockContent.node.type.spec.content !== \"inline*\" ||\n            blockInfo.blockNoteType === \"numberedListItem\" ||\n            blockInfo.blockNoteType === \"heading\"\n          ) {\n            return;\n          }\n          const startIndex = parseInt(match[1]);\n\n          chain()\n            .command(\n              updateBlockCommand(blockInfo.bnBlock.beforePos, {\n                type: \"numberedListItem\",\n                props:\n                  (startIndex === 1 && {}) ||\n                  ({\n                    start: startIndex,\n                  } as any),\n              }),\n            )\n            // Removes the \"1.\" characters used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => handleEnter(this.options.editor),\n      \"Mod-Shift-7\": () => {\n        const blockInfo = getBlockInfoFromSelection(this.editor.state);\n        if (\n          !blockInfo.isBlockContainer ||\n          blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n        ) {\n          return true;\n        }\n\n        return this.editor.commands.command(\n          updateBlockCommand(blockInfo.bnBlock.beforePos, {\n            type: \"numberedListItem\",\n            props: {},\n          }),\n        );\n      },\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [NumberedListIndexingPlugin()];\n  },\n\n  parseHTML() {\n    return [\n      // Parse from internal HTML.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \".bn-inline-content\",\n      },\n      // Parse from external HTML.\n      {\n        tag: \"li\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (\n            parent.tagName === \"OL\" ||\n            (parent.tagName === \"DIV\" && parent.parentElement?.tagName === \"OL\")\n          ) {\n            const startIndex =\n              parseInt(parent.getAttribute(\"start\") || \"1\") || 1;\n\n            if (element.previousSibling || startIndex === 1) {\n              return {};\n            }\n\n            return {\n              start: startIndex,\n            };\n          }\n\n          return false;\n        },\n        // As `li` elements can contain multiple paragraphs, we need to merge their contents\n        // into a single one so that ProseMirror can parse everything correctly.\n        getContent: (node, schema) =>\n          getListItemContent(node, schema, this.name),\n        priority: 300,\n        node: \"numberedListItem\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return createDefaultBlockDOMOutputSpec(\n      this.name,\n      // We use a <p> tag, because for <li> tags we'd need an <ol> element to\n      // put them in to be semantically correct, which we can't have due to the\n      // schema.\n      \"p\",\n      {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      },\n      this.options.domAttributes?.inlineContent || {},\n    );\n  },\n});\n\nexport const NumberedListItem = createBlockSpecFromStronglyTypedTiptapNode(\n  NumberedListItemBlockContent,\n  numberedListItemPropSchema,\n);\n","import { updateBlockCommand } from \"../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport { getBlockInfoFromSelection } from \"../../api/getBlockInfoFromPos.js\";\nimport {\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n} from \"../../schema/index.js\";\nimport { createDefaultBlockDOMOutputSpec } from \"../defaultBlockHelpers.js\";\nimport { defaultProps } from \"../defaultProps.js\";\n\nexport const paragraphPropSchema = {\n  ...defaultProps,\n};\n\nexport const ParagraphBlockContent = createStronglyTypedTiptapNode({\n  name: \"paragraph\",\n  content: \"inline*\",\n  group: \"blockContent\",\n\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-0\": () => {\n        const blockInfo = getBlockInfoFromSelection(this.editor.state);\n        if (\n          !blockInfo.isBlockContainer ||\n          blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n        ) {\n          return true;\n        }\n\n        return this.editor.commands.command(\n          updateBlockCommand(blockInfo.bnBlock.beforePos, {\n            type: \"paragraph\",\n            props: {},\n          }),\n        );\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      // Parse from internal HTML.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \".bn-inline-content\",\n      },\n      // Parse from external HTML.\n      {\n        tag: \"p\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\" || !element.textContent?.trim()) {\n            return false;\n          }\n\n          return {};\n        },\n        node: \"paragraph\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return createDefaultBlockDOMOutputSpec(\n      this.name,\n      \"p\",\n      {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      },\n      this.options.domAttributes?.inlineContent || {},\n    );\n  },\n});\n\nexport const Paragraph = createBlockSpecFromStronglyTypedTiptapNode(\n  ParagraphBlockContent,\n  paragraphPropSchema,\n);\n","import {\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n} from \"../../schema/index.js\";\nimport {\n  createDefaultBlockDOMOutputSpec,\n  mergeParagraphs,\n} from \"../defaultBlockHelpers.js\";\nimport { defaultProps } from \"../defaultProps.js\";\nimport { getBlockInfoFromSelection } from \"../../api/getBlockInfoFromPos.js\";\nimport { updateBlockCommand } from \"../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport { InputRule } from \"@tiptap/core\";\nimport { DOMParser } from \"prosemirror-model\";\n\nexport const quotePropSchema = {\n  ...defaultProps,\n};\n\nexport const QuoteBlockContent = createStronglyTypedTiptapNode({\n  name: \"quote\",\n  content: \"inline*\",\n  group: \"blockContent\",\n\n  addInputRules() {\n    return [\n      // Creates a block quote when starting with \">\".\n      new InputRule({\n        find: new RegExp(`^>\\\\s$`),\n        handler: ({ state, chain, range }) => {\n          const blockInfo = getBlockInfoFromSelection(state);\n          if (\n            !blockInfo.isBlockContainer ||\n            blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n          ) {\n            return;\n          }\n\n          chain()\n            .command(\n              updateBlockCommand(blockInfo.bnBlock.beforePos, {\n                type: \"quote\",\n                props: {},\n              }),\n            )\n            // Removes the \">\" character used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      \"Mod-Alt-q\": () => {\n        const blockInfo = getBlockInfoFromSelection(this.editor.state);\n        if (\n          !blockInfo.isBlockContainer ||\n          blockInfo.blockContent.node.type.spec.content !== \"inline*\"\n        ) {\n          return true;\n        }\n\n        return this.editor.commands.command(\n          updateBlockCommand(blockInfo.bnBlock.beforePos, {\n            type: \"quote\",\n          }),\n        );\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      // Parse from internal HTML.\n      {\n        tag: \"div[data-content-type=\" + this.name + \"]\",\n        contentElement: \".bn-inline-content\",\n      },\n      // Parse from external HTML.\n      {\n        tag: \"blockquote\",\n        node: \"quote\",\n        getContent: (node, schema) => {\n          // Parse the blockquote content as inline content\n          const element = node as HTMLElement;\n\n          // Clone to avoid modifying the original\n          const clone = element.cloneNode(true) as HTMLElement;\n\n          // Merge multiple paragraphs into one with line breaks\n          mergeParagraphs(clone);\n\n          // Parse the content directly as a paragraph to extract inline content\n          const parser = DOMParser.fromSchema(schema);\n          const parsed = parser.parse(clone, {\n            topNode: schema.nodes.paragraph.create(),\n          });\n\n          return parsed.content;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return createDefaultBlockDOMOutputSpec(\n      this.name,\n      \"blockquote\",\n      {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      },\n      this.options.domAttributes?.inlineContent || {},\n    );\n  },\n});\n\nexport const Quote = createBlockSpecFromStronglyTypedTiptapNode(\n  QuoteBlockContent,\n  quotePropSchema,\n);\n","import { callOrReturn, Extension, getExtensionField } from \"@tiptap/core\";\nimport { columnResizing, goToNextCell, tableEditing } from \"prosemirror-tables\";\n\nexport const RESIZE_MIN_WIDTH = 35;\nexport const EMPTY_CELL_WIDTH = 120;\nexport const EMPTY_CELL_HEIGHT = 31;\n\nexport const TableExtension = Extension.create({\n  name: \"BlockNoteTableExtension\",\n\n  addProseMirrorPlugins: () => {\n    return [\n      columnResizing({\n        cellMinWidth: RESIZE_MIN_WIDTH,\n        defaultCellMinWidth: EMPTY_CELL_WIDTH,\n        // We set this to null as we implement our own node view in the table\n        // block content. This node view is the same as what's used by default,\n        // but is wrapped in a `blockContent` HTML element.\n        View: null,\n      }),\n      tableEditing(),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      // Makes enter create a new line within the cell.\n      Enter: () => {\n        if (\n          this.editor.state.selection.empty &&\n          this.editor.state.selection.$head.parent.type.name ===\n            \"tableParagraph\"\n        ) {\n          this.editor.commands.insertContent({ type: \"hardBreak\" });\n\n          return true;\n        }\n\n        return false;\n      },\n      // Ensures that backspace won't delete the table if the text cursor is at\n      // the start of a cell and the selection is empty.\n      Backspace: () => {\n        const selection = this.editor.state.selection;\n        const selectionIsEmpty = selection.empty;\n        const selectionIsAtStartOfNode = selection.$head.parentOffset === 0;\n        const selectionIsInTableParagraphNode =\n          selection.$head.node().type.name === \"tableParagraph\";\n\n        return (\n          selectionIsEmpty &&\n          selectionIsAtStartOfNode &&\n          selectionIsInTableParagraphNode\n        );\n      },\n      // Enables navigating cells using the tab key.\n      Tab: () => {\n        return this.editor.commands.command(({ state, dispatch, view }) =>\n          goToNextCell(1)(state, dispatch, view),\n        );\n      },\n      \"Shift-Tab\": () => {\n        return this.editor.commands.command(({ state, dispatch, view }) =>\n          goToNextCell(-1)(state, dispatch, view),\n        );\n      },\n    };\n  },\n\n  extendNodeSchema(extension) {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n    };\n\n    return {\n      tableRole: callOrReturn(\n        getExtensionField(extension, \"tableRole\", context),\n      ),\n    };\n  },\n});\n","import { Node, mergeAttributes } from \"@tiptap/core\";\nimport { TableCell } from \"@tiptap/extension-table-cell\";\nimport { TableHeader } from \"@tiptap/extension-table-header\";\nimport { DOMParser, Fragment, Node as PMNode, Schema } from \"prosemirror-model\";\nimport { TableView } from \"prosemirror-tables\";\nimport { NodeView } from \"prosemirror-view\";\nimport {\n  createBlockSpecFromStronglyTypedTiptapNode,\n  createStronglyTypedTiptapNode,\n} from \"../../schema/index.js\";\nimport { mergeCSSClasses } from \"../../util/browser.js\";\nimport { createDefaultBlockDOMOutputSpec } from \"../defaultBlockHelpers.js\";\nimport { defaultProps } from \"../defaultProps.js\";\nimport { EMPTY_CELL_WIDTH, TableExtension } from \"./TableExtension.js\";\n\nexport const tablePropSchema = {\n  textColor: defaultProps.textColor,\n};\n\nexport const TableBlockContent = createStronglyTypedTiptapNode({\n  name: \"table\",\n  content: \"tableRow+\",\n  group: \"blockContent\",\n  tableRole: \"table\",\n\n  marks: \"deletion insertion modification\",\n  isolating: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: \"table\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return createDefaultBlockDOMOutputSpec(\n      this.name,\n      \"table\",\n      {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      },\n      this.options.domAttributes?.inlineContent || {},\n    );\n  },\n\n  // This node view is needed for the `columnResizing` plugin. By default, the\n  // plugin adds its own node view, which overrides how the node is rendered vs\n  // `renderHTML`. This means that the wrapping `blockContent` HTML element is\n  // no longer rendered. The `columnResizing` plugin uses the `TableView` as its\n  // default node view. `BlockNoteTableView` extends it by wrapping it in a\n  // `blockContent` element, so the DOM structure is consistent with other block\n  // types.\n  addNodeView() {\n    return ({ node, HTMLAttributes }) => {\n      class BlockNoteTableView extends TableView {\n        constructor(\n          public node: PMNode,\n          public cellMinWidth: number,\n          public blockContentHTMLAttributes: Record<string, string>,\n        ) {\n          super(node, cellMinWidth);\n\n          const blockContent = document.createElement(\"div\");\n          blockContent.className = mergeCSSClasses(\n            \"bn-block-content\",\n            blockContentHTMLAttributes.class,\n          );\n          blockContent.setAttribute(\"data-content-type\", \"table\");\n          for (const [attribute, value] of Object.entries(\n            blockContentHTMLAttributes,\n          )) {\n            if (attribute !== \"class\") {\n              blockContent.setAttribute(attribute, value);\n            }\n          }\n\n          const tableWrapper = this.dom;\n\n          const tableWrapperInner = document.createElement(\"div\");\n          tableWrapperInner.className = \"tableWrapper-inner\";\n          tableWrapperInner.appendChild(tableWrapper.firstChild!);\n\n          tableWrapper.appendChild(tableWrapperInner);\n\n          blockContent.appendChild(tableWrapper);\n          const floatingContainer = document.createElement(\"div\");\n          floatingContainer.className = \"table-widgets-container\";\n          floatingContainer.style.position = \"relative\";\n          tableWrapper.appendChild(floatingContainer);\n\n          this.dom = blockContent;\n        }\n\n        ignoreMutation(record: MutationRecord): boolean {\n          return (\n            !(record.target as HTMLElement).closest(\".tableWrapper-inner\") ||\n            super.ignoreMutation(record)\n          );\n        }\n      }\n\n      return new BlockNoteTableView(node, EMPTY_CELL_WIDTH, {\n        ...(this.options.domAttributes?.blockContent || {}),\n        ...HTMLAttributes,\n      }) as NodeView; // needs cast, tiptap types (wrongly) doesn't support return tableview here\n    };\n  },\n});\n\nconst TableParagraph = createStronglyTypedTiptapNode({\n  name: \"tableParagraph\",\n  group: \"tableContent\",\n  content: \"inline*\",\n\n  parseHTML() {\n    return [\n      {\n        tag: \"p\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\" || !element.textContent) {\n            return false;\n          }\n\n          // Only parse in internal HTML.\n          if (!element.closest(\"[data-content-type]\")) {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.tagName === \"TD\" || parent.tagName === \"TH\") {\n            return {};\n          }\n\n          return false;\n        },\n        node: \"tableParagraph\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"p\", HTMLAttributes, 0];\n  },\n});\n\n/**\n * This extension allows you to create table rows.\n * @see https://www.tiptap.dev/api/nodes/table-row\n */\nexport const TableRow = Node.create<{ HTMLAttributes: Record<string, any> }>({\n  name: \"tableRow\",\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    };\n  },\n\n  content: \"(tableCell | tableHeader)+\",\n\n  tableRole: \"row\",\n  marks: \"deletion insertion modification\",\n  parseHTML() {\n    return [{ tag: \"tr\" }];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"tr\",\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),\n      0,\n    ];\n  },\n});\n\n/*\n * This will flatten a node's content to fit into a table cell's paragraph.\n */\nfunction parseTableContent(node: HTMLElement, schema: Schema) {\n  const parser = DOMParser.fromSchema(schema);\n\n  // This will parse the content of the table paragraph as though it were a blockGroup.\n  // Resulting in a structure like:\n  // <blockGroup>\n  //   <blockContainer>\n  //     <p>Hello</p>\n  //   </blockContainer>\n  //   <blockContainer>\n  //     <p>Hello</p>\n  //   </blockContainer>\n  // </blockGroup>\n  const parsedContent = parser.parse(node, {\n    topNode: schema.nodes.blockGroup.create(),\n  });\n  const extractedContent: PMNode[] = [];\n\n  // Try to extract any content within the blockContainer.\n  parsedContent.content.descendants((child) => {\n    // As long as the child is an inline node, we can append it to the fragment.\n    if (child.isInline) {\n      // And append it to the fragment\n      extractedContent.push(child);\n      return false;\n    }\n\n    return undefined;\n  });\n\n  return Fragment.fromArray(extractedContent);\n}\n\nexport const Table = createBlockSpecFromStronglyTypedTiptapNode(\n  TableBlockContent,\n  tablePropSchema,\n  [\n    TableExtension,\n    TableParagraph,\n    TableHeader.extend({\n      /**\n       * We allow table headers and cells to have multiple tableContent nodes because\n       * when merging cells, prosemirror-tables will concat the contents of the cells naively.\n       * This would cause that content to overflow into other cells when prosemirror tries to enforce the cell structure.\n       *\n       * So, we manually fix this up when reading back in the `nodeToBlock` and only ever place a single tableContent back into the cell.\n       */\n      content: \"tableContent+\",\n      parseHTML() {\n        return [\n          {\n            tag: \"th\",\n            // As `th` elements can contain multiple paragraphs, we need to merge their contents\n            // into a single one so that ProseMirror can parse everything correctly.\n            getContent: (node, schema) =>\n              parseTableContent(node as HTMLElement, schema),\n          },\n        ];\n      },\n    }),\n    TableCell.extend({\n      content: \"tableContent+\",\n      parseHTML() {\n        return [\n          {\n            tag: \"td\",\n            // As `td` elements can contain multiple paragraphs, we need to merge their contents\n            // into a single one so that ProseMirror can parse everything correctly.\n            getContent: (node, schema) =>\n              parseTableContent(node as HTMLElement, schema),\n          },\n        ];\n      },\n    }),\n    TableRow,\n  ],\n);\n","export const parseVideoElement = (videoElement: HTMLVideoElement) => {\n  const url = videoElement.src || undefined;\n  const previewWidth = videoElement.width || undefined;\n\n  return { url, previewWidth };\n};\n","import type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport {\n  BlockFromConfig,\n  createBlockSpec,\n  FileBlockConfig,\n  Props,\n  PropSchema,\n} from \"../../schema/index.js\";\nimport { defaultProps } from \"../defaultProps.js\";\nimport { parseFigureElement } from \"../FileBlockContent/helpers/parse/parseFigureElement.js\";\nimport { createFigureWithCaption } from \"../FileBlockContent/helpers/toExternalHTML/createFigureWithCaption.js\";\nimport { createLinkWithCaption } from \"../FileBlockContent/helpers/toExternalHTML/createLinkWithCaption.js\";\nimport { createResizableFileBlockWrapper } from \"../FileBlockContent/helpers/render/createResizableFileBlockWrapper.js\";\nimport { parseVideoElement } from \"./parseVideoElement.js\";\n\nexport const FILE_VIDEO_ICON_SVG =\n  '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M2 3.9934C2 3.44476 2.45531 3 2.9918 3H21.0082C21.556 3 22 3.44495 22 3.9934V20.0066C22 20.5552 21.5447 21 21.0082 21H2.9918C2.44405 21 2 20.5551 2 20.0066V3.9934ZM8 5V19H16V5H8ZM4 5V7H6V5H4ZM18 5V7H20V5H18ZM4 9V11H6V9H4ZM18 9V11H20V9H18ZM4 13V15H6V13H4ZM18 13V15H20V13H18ZM4 17V19H6V17H4ZM18 17V19H20V17H18Z\"></path></svg>';\n\nexport const videoPropSchema = {\n  textAlignment: defaultProps.textAlignment,\n  backgroundColor: defaultProps.backgroundColor,\n  // File name.\n  name: {\n    default: \"\" as const,\n  },\n  // File url.\n  url: {\n    default: \"\" as const,\n  },\n  // File caption.\n  caption: {\n    default: \"\" as const,\n  },\n\n  showPreview: {\n    default: true,\n  },\n  // File preview width in px.\n  previewWidth: {\n    default: undefined,\n    type: \"number\",\n  },\n} satisfies PropSchema;\n\nexport const videoBlockConfig = {\n  type: \"video\" as const,\n  propSchema: videoPropSchema,\n  content: \"none\",\n  isFileBlock: true,\n  fileBlockAccept: [\"video/*\"],\n} satisfies FileBlockConfig;\n\nexport const videoRender = (\n  block: BlockFromConfig<typeof videoBlockConfig, any, any>,\n  editor: BlockNoteEditor<any, any, any>,\n) => {\n  const icon = document.createElement(\"div\");\n  icon.innerHTML = FILE_VIDEO_ICON_SVG;\n\n  const videoWrapper = document.createElement(\"div\");\n  videoWrapper.className = \"bn-visual-media-wrapper\";\n\n  const video = document.createElement(\"video\");\n  video.className = \"bn-visual-media\";\n  if (editor.resolveFileUrl) {\n    editor.resolveFileUrl(block.props.url).then((downloadUrl) => {\n      video.src = downloadUrl;\n    });\n  } else {\n    video.src = block.props.url;\n  }\n  video.controls = true;\n  video.contentEditable = \"false\";\n  video.draggable = false;\n  video.width = block.props.previewWidth;\n  videoWrapper.appendChild(video);\n\n  return createResizableFileBlockWrapper(\n    block,\n    editor,\n    { dom: videoWrapper },\n    videoWrapper,\n    editor.dictionary.file_blocks.video.add_button_text,\n    icon.firstElementChild as HTMLElement,\n  );\n};\n\nexport const videoParse = (\n  element: HTMLElement,\n): Partial<Props<typeof videoBlockConfig.propSchema>> | undefined => {\n  if (element.tagName === \"VIDEO\") {\n    // Ignore if parent figure has already been parsed.\n    if (element.closest(\"figure\")) {\n      return undefined;\n    }\n\n    return parseVideoElement(element as HTMLVideoElement);\n  }\n\n  if (element.tagName === \"FIGURE\") {\n    const parsedFigure = parseFigureElement(element, \"video\");\n    if (!parsedFigure) {\n      return undefined;\n    }\n\n    const { targetElement, caption } = parsedFigure;\n\n    return {\n      ...parseVideoElement(targetElement as HTMLVideoElement),\n      caption,\n    };\n  }\n\n  return undefined;\n};\n\nexport const videoToExternalHTML = (\n  block: BlockFromConfig<typeof videoBlockConfig, any, any>,\n) => {\n  if (!block.props.url) {\n    const div = document.createElement(\"p\");\n    div.textContent = \"Add video\";\n\n    return {\n      dom: div,\n    };\n  }\n\n  let video;\n  if (block.props.showPreview) {\n    video = document.createElement(\"video\");\n    video.src = block.props.url;\n    if (block.props.previewWidth) {\n      video.width = block.props.previewWidth;\n    }\n  } else {\n    video = document.createElement(\"a\");\n    video.href = block.props.url;\n    video.textContent = block.props.name || block.props.url;\n  }\n\n  if (block.props.caption) {\n    if (block.props.showPreview) {\n      return createFigureWithCaption(video, block.props.caption);\n    } else {\n      return createLinkWithCaption(video, block.props.caption);\n    }\n  }\n\n  return {\n    dom: video,\n  };\n};\n\nexport const VideoBlock = createBlockSpec(videoBlockConfig, {\n  render: videoRender,\n  parse: videoParse,\n  toExternalHTML: videoToExternalHTML,\n});\n","import Bold from \"@tiptap/extension-bold\";\nimport Code from \"@tiptap/extension-code\";\nimport Italic from \"@tiptap/extension-italic\";\nimport Strike from \"@tiptap/extension-strike\";\nimport Underline from \"@tiptap/extension-underline\";\nimport { BackgroundColor } from \"../extensions/BackgroundColor/BackgroundColorMark.js\";\nimport { TextColor } from \"../extensions/TextColor/TextColorMark.js\";\nimport {\n  BlockNoDefaults,\n  BlockSchema,\n  BlockSpecs,\n  InlineContentSchema,\n  InlineContentSpecs,\n  PartialBlockNoDefaults,\n  StyleSchema,\n  StyleSpecs,\n  createStyleSpecFromTipTapMark,\n  getBlockSchemaFromSpecs,\n  getInlineContentSchemaFromSpecs,\n  getStyleSchemaFromSpecs,\n} from \"../schema/index.js\";\n\nimport { AudioBlock } from \"./AudioBlockContent/AudioBlockContent.js\";\nimport { CodeBlock } from \"./CodeBlockContent/CodeBlockContent.js\";\nimport { FileBlock } from \"./FileBlockContent/FileBlockContent.js\";\nimport { Heading } from \"./HeadingBlockContent/HeadingBlockContent.js\";\nimport { ImageBlock } from \"./ImageBlockContent/ImageBlockContent.js\";\nimport { ToggleListItem } from \"./ListItemBlockContent/ToggleListItemBlockContent/ToggleListItemBlockContent.js\";\nimport { BulletListItem } from \"./ListItemBlockContent/BulletListItemBlockContent/BulletListItemBlockContent.js\";\nimport { CheckListItem } from \"./ListItemBlockContent/CheckListItemBlockContent/CheckListItemBlockContent.js\";\nimport { NumberedListItem } from \"./ListItemBlockContent/NumberedListItemBlockContent/NumberedListItemBlockContent.js\";\nimport { Paragraph } from \"./ParagraphBlockContent/ParagraphBlockContent.js\";\nimport { Quote } from \"./QuoteBlockContent/QuoteBlockContent.js\";\nimport { Table } from \"./TableBlockContent/TableBlockContent.js\";\nimport { VideoBlock } from \"./VideoBlockContent/VideoBlockContent.js\";\n\nexport const defaultBlockSpecs = {\n  paragraph: Paragraph,\n  heading: Heading,\n  quote: Quote,\n  codeBlock: CodeBlock,\n  toggleListItem: ToggleListItem,\n  bulletListItem: BulletListItem,\n  numberedListItem: NumberedListItem,\n  checkListItem: CheckListItem,\n  table: Table,\n  file: FileBlock,\n  image: ImageBlock,\n  video: VideoBlock,\n  audio: AudioBlock,\n} satisfies BlockSpecs;\n\nexport const defaultBlockSchema = getBlockSchemaFromSpecs(defaultBlockSpecs);\n\n// underscore is used that in case a user overrides DefaultBlockSchema,\n// they can still access the original default block schema\nexport type _DefaultBlockSchema = typeof defaultBlockSchema;\nexport type DefaultBlockSchema = _DefaultBlockSchema;\n\nexport const defaultStyleSpecs = {\n  bold: createStyleSpecFromTipTapMark(Bold, \"boolean\"),\n  italic: createStyleSpecFromTipTapMark(Italic, \"boolean\"),\n  underline: createStyleSpecFromTipTapMark(Underline, \"boolean\"),\n  strike: createStyleSpecFromTipTapMark(Strike, \"boolean\"),\n  code: createStyleSpecFromTipTapMark(Code, \"boolean\"),\n  textColor: TextColor,\n  backgroundColor: BackgroundColor,\n} satisfies StyleSpecs;\n\nexport const defaultStyleSchema = getStyleSchemaFromSpecs(defaultStyleSpecs);\n\n// underscore is used that in case a user overrides DefaultStyleSchema,\n// they can still access the original default style schema\nexport type _DefaultStyleSchema = typeof defaultStyleSchema;\nexport type DefaultStyleSchema = _DefaultStyleSchema;\n\nexport const defaultInlineContentSpecs = {\n  text: { config: \"text\", implementation: {} as any },\n  link: { config: \"link\", implementation: {} as any },\n} satisfies InlineContentSpecs;\n\nexport const defaultInlineContentSchema = getInlineContentSchemaFromSpecs(\n  defaultInlineContentSpecs,\n);\n\n// underscore is used that in case a user overrides DefaultInlineContentSchema,\n// they can still access the original default inline content schema\nexport type _DefaultInlineContentSchema = typeof defaultInlineContentSchema;\nexport type DefaultInlineContentSchema = _DefaultInlineContentSchema;\n\nexport type PartialBlock<\n  BSchema extends BlockSchema = DefaultBlockSchema,\n  I extends InlineContentSchema = DefaultInlineContentSchema,\n  S extends StyleSchema = DefaultStyleSchema,\n> = PartialBlockNoDefaults<BSchema, I, S>;\n\nexport type Block<\n  BSchema extends BlockSchema = DefaultBlockSchema,\n  I extends InlineContentSchema = DefaultInlineContentSchema,\n  S extends StyleSchema = DefaultStyleSchema,\n> = BlockNoDefaults<BSchema, I, S>;\n","import { CellSelection } from \"prosemirror-tables\";\nimport type { BlockNoteEditor } from \"../editor/BlockNoteEditor.js\";\nimport {\n  BlockConfig,\n  BlockFromConfig,\n  BlockSchema,\n  FileBlockConfig,\n  InlineContentConfig,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../schema/index.js\";\nimport {\n  Block,\n  DefaultBlockSchema,\n  DefaultInlineContentSchema,\n  defaultBlockSchema,\n  defaultInlineContentSchema,\n} from \"./defaultBlocks.js\";\nimport { defaultProps } from \"./defaultProps.js\";\nimport { Selection } from \"prosemirror-state\";\n\nexport function checkDefaultBlockTypeInSchema<\n  BlockType extends keyof DefaultBlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  blockType: BlockType,\n  editor: BlockNoteEditor<any, I, S>,\n): editor is BlockNoteEditor<\n  { [K in BlockType]: DefaultBlockSchema[BlockType] },\n  I,\n  S\n> {\n  return (\n    blockType in editor.schema.blockSchema &&\n    editor.schema.blockSchema[blockType] === defaultBlockSchema[blockType]\n  );\n}\n\nexport function checkBlockTypeInSchema<\n  BlockType extends string,\n  Config extends BlockConfig,\n>(\n  blockType: BlockType,\n  blockConfig: Config,\n  editor: BlockNoteEditor<any, any, any>,\n): editor is BlockNoteEditor<{ [T in BlockType]: Config }, any, any> {\n  return (\n    blockType in editor.schema.blockSchema &&\n    editor.schema.blockSchema[blockType] === blockConfig\n  );\n}\n\nexport function checkDefaultInlineContentTypeInSchema<\n  InlineContentType extends keyof DefaultInlineContentSchema,\n  B extends BlockSchema,\n  S extends StyleSchema,\n>(\n  inlineContentType: InlineContentType,\n  editor: BlockNoteEditor<B, any, S>,\n): editor is BlockNoteEditor<\n  B,\n  { [K in InlineContentType]: DefaultInlineContentSchema[InlineContentType] },\n  S\n> {\n  return (\n    inlineContentType in editor.schema.inlineContentSchema &&\n    editor.schema.inlineContentSchema[inlineContentType] ===\n      defaultInlineContentSchema[inlineContentType]\n  );\n}\n\nexport function checkInlineContentTypeInSchema<\n  InlineContentType extends string,\n  Config extends InlineContentConfig,\n>(\n  inlineContentType: InlineContentType,\n  inlineContentConfig: Config,\n  editor: BlockNoteEditor<any, any, any>,\n): editor is BlockNoteEditor<any, { [T in InlineContentType]: Config }, any> {\n  return (\n    inlineContentType in editor.schema.inlineContentSchema &&\n    editor.schema.inlineContentSchema[inlineContentType] === inlineContentConfig\n  );\n}\n\nexport function checkBlockIsDefaultType<\n  BlockType extends keyof DefaultBlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  blockType: BlockType,\n  block: Block<any, I, S>,\n  editor: BlockNoteEditor<any, I, S>,\n): block is BlockFromConfig<DefaultBlockSchema[BlockType], I, S> {\n  return (\n    block.type === blockType &&\n    block.type in editor.schema.blockSchema &&\n    checkDefaultBlockTypeInSchema(block.type, editor)\n  );\n}\n\nexport function checkBlockIsFileBlock<\n  B extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  block: Block<any, I, S>,\n  editor: BlockNoteEditor<B, I, S>,\n): block is BlockFromConfig<FileBlockConfig, I, S> {\n  return (\n    (block.type in editor.schema.blockSchema &&\n      editor.schema.blockSchema[block.type].isFileBlock) ||\n    false\n  );\n}\n\nexport function checkBlockIsFileBlockWithPreview<\n  B extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  block: Block<any, I, S>,\n  editor: BlockNoteEditor<B, I, S>,\n): block is BlockFromConfig<\n  FileBlockConfig & {\n    propSchema: Required<FileBlockConfig[\"propSchema\"]>;\n  },\n  I,\n  S\n> {\n  return (\n    (block.type in editor.schema.blockSchema &&\n      editor.schema.blockSchema[block.type].isFileBlock &&\n      \"showPreview\" in editor.schema.blockSchema[block.type].propSchema) ||\n    false\n  );\n}\n\nexport function checkBlockIsFileBlockWithPlaceholder<\n  B extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(block: Block<B, I, S>, editor: BlockNoteEditor<B, I, S>) {\n  const config = editor.schema.blockSchema[block.type];\n  return config.isFileBlock && !block.props.url;\n}\n\nexport function checkBlockTypeHasDefaultProp<\n  Prop extends keyof typeof defaultProps,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  prop: Prop,\n  blockType: string,\n  editor: BlockNoteEditor<any, I, S>,\n): editor is BlockNoteEditor<\n  {\n    [BT in string]: {\n      type: BT;\n      propSchema: {\n        [P in Prop]: (typeof defaultProps)[P];\n      };\n      content: \"table\" | \"inline\" | \"none\";\n    };\n  },\n  I,\n  S\n> {\n  return (\n    blockType in editor.schema.blockSchema &&\n    prop in editor.schema.blockSchema[blockType].propSchema &&\n    editor.schema.blockSchema[blockType].propSchema[prop] === defaultProps[prop]\n  );\n}\n\nexport function checkBlockHasDefaultProp<\n  Prop extends keyof typeof defaultProps,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  prop: Prop,\n  block: Block<any, I, S>,\n  editor: BlockNoteEditor<any, I, S>,\n): block is BlockFromConfig<\n  {\n    type: string;\n    propSchema: {\n      [P in Prop]: (typeof defaultProps)[P];\n    };\n    content: \"table\" | \"inline\" | \"none\";\n  },\n  I,\n  S\n> {\n  return checkBlockTypeHasDefaultProp(prop, block.type, editor);\n}\n\nexport function isTableCellSelection(\n  selection: Selection,\n): selection is CellSelection {\n  return selection instanceof CellSelection;\n}\n","/**\n * Uploads a file to tmpfiles.org and returns the URL to the uploaded file.\n *\n * @warning This function should only be used for development purposes, replace with your own backend!\n */\nexport const uploadToTmpFilesDotOrg_DEV_ONLY = async (\n  file: File,\n): Promise<string> => {\n  const body = new FormData();\n  body.append(\"file\", file);\n\n  const ret = await fetch(\"https://tmpfiles.org/api/v1/upload\", {\n    method: \"POST\",\n    body: body,\n  });\n  return (await ret.json()).data.url.replace(\n    \"tmpfiles.org/\",\n    \"tmpfiles.org/dl/\",\n  );\n};\n","import { Block, PartialBlock } from \"../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\n\nimport { checkDefaultBlockTypeInSchema } from \"../../blocks/defaultBlockTypeGuards.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n  isStyledTextInlineContent,\n} from \"../../schema/index.js\";\nimport { formatKeyboardShortcut } from \"../../util/browser.js\";\nimport { DefaultSuggestionItem } from \"./DefaultSuggestionItem.js\";\n\n// Sets the editor's text cursor position to the next content editable block,\n// so either a block with inline content or a table. The last block is always a\n// paragraph, so this function won't try to set the cursor position past the\n// last block.\nfunction setSelectionToNextContentEditableBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(editor: BlockNoteEditor<BSchema, I, S>) {\n  let block: Block<BSchema, I, S> | undefined =\n    editor.getTextCursorPosition().block;\n  let contentType = editor.schema.blockSchema[block.type].content;\n\n  while (contentType === \"none\") {\n    block = editor.getTextCursorPosition().nextBlock;\n    if (block === undefined) {\n      return;\n    }\n    contentType = editor.schema.blockSchema[block.type].content as\n      | \"inline\"\n      | \"table\"\n      | \"none\";\n    editor.setTextCursorPosition(block, \"end\");\n  }\n}\n\n// Checks if the current block is empty or only contains a slash, and if so,\n// updates the current block instead of inserting a new one below. If the new\n// block doesn't contain editable content, the cursor is moved to the next block\n// that does.\nexport function insertOrUpdateBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  block: PartialBlock<BSchema, I, S>,\n): Block<BSchema, I, S> {\n  const currentBlock = editor.getTextCursorPosition().block;\n\n  if (currentBlock.content === undefined) {\n    throw new Error(\"Slash Menu open in a block that doesn't contain content.\");\n  }\n\n  let newBlock: Block<BSchema, I, S>;\n\n  if (\n    Array.isArray(currentBlock.content) &&\n    ((currentBlock.content.length === 1 &&\n      isStyledTextInlineContent(currentBlock.content[0]) &&\n      currentBlock.content[0].type === \"text\" &&\n      currentBlock.content[0].text === \"/\") ||\n      currentBlock.content.length === 0)\n  ) {\n    newBlock = editor.updateBlock(currentBlock, block);\n    // We make sure to reset the cursor position to the new block as calling\n    // `updateBlock` may move it out. This generally happens when the content\n    // changes, or the update makes the block multi-column.\n    editor.setTextCursorPosition(newBlock);\n  } else {\n    newBlock = editor.insertBlocks([block], currentBlock, \"after\")[0];\n    editor.setTextCursorPosition(editor.getTextCursorPosition().nextBlock!);\n  }\n\n  setSelectionToNextContentEditableBlock(editor);\n\n  return newBlock;\n}\n\nexport function getDefaultSlashMenuItems<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(editor: BlockNoteEditor<BSchema, I, S>) {\n  const items: DefaultSuggestionItem[] = [];\n\n  if (checkDefaultBlockTypeInSchema(\"heading\", editor)) {\n    items.push(\n      {\n        onItemClick: () => {\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: 1 },\n          });\n        },\n        badge: formatKeyboardShortcut(\"Mod-Alt-1\"),\n        key: \"heading\",\n        ...editor.dictionary.slash_menu.heading,\n      },\n      {\n        onItemClick: () => {\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: 2 },\n          });\n        },\n        badge: formatKeyboardShortcut(\"Mod-Alt-2\"),\n        key: \"heading_2\",\n        ...editor.dictionary.slash_menu.heading_2,\n      },\n      {\n        onItemClick: () => {\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: 3 },\n          });\n        },\n        badge: formatKeyboardShortcut(\"Mod-Alt-3\"),\n        key: \"heading_3\",\n        ...editor.dictionary.slash_menu.heading_3,\n      },\n    );\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"quote\", editor)) {\n    items.push({\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"quote\",\n        });\n      },\n      key: \"quote\",\n      ...editor.dictionary.slash_menu.quote,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"toggleListItem\", editor)) {\n    items.push({\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"toggleListItem\",\n        });\n      },\n      badge: formatKeyboardShortcut(\"Mod-Shift-6\"),\n      key: \"toggle_list\",\n      ...editor.dictionary.slash_menu.toggle_list,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"numberedListItem\", editor)) {\n    items.push({\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"numberedListItem\",\n        });\n      },\n      badge: formatKeyboardShortcut(\"Mod-Shift-7\"),\n      key: \"numbered_list\",\n      ...editor.dictionary.slash_menu.numbered_list,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"bulletListItem\", editor)) {\n    items.push({\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"bulletListItem\",\n        });\n      },\n      badge: formatKeyboardShortcut(\"Mod-Shift-8\"),\n      key: \"bullet_list\",\n      ...editor.dictionary.slash_menu.bullet_list,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"checkListItem\", editor)) {\n    items.push({\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"checkListItem\",\n        });\n      },\n      badge: formatKeyboardShortcut(\"Mod-Shift-9\"),\n      key: \"check_list\",\n      ...editor.dictionary.slash_menu.check_list,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"paragraph\", editor)) {\n    items.push({\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"paragraph\",\n        });\n      },\n      badge: formatKeyboardShortcut(\"Mod-Alt-0\"),\n      key: \"paragraph\",\n      ...editor.dictionary.slash_menu.paragraph,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"codeBlock\", editor)) {\n    items.push({\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"codeBlock\",\n        });\n      },\n      badge: formatKeyboardShortcut(\"Mod-Alt-c\"),\n      key: \"code_block\",\n      ...editor.dictionary.slash_menu.code_block,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"table\", editor)) {\n    items.push({\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"table\",\n          content: {\n            type: \"tableContent\",\n            rows: [\n              {\n                cells: [\"\", \"\", \"\"],\n              },\n              {\n                cells: [\"\", \"\", \"\"],\n              },\n            ],\n          },\n        });\n      },\n      badge: undefined,\n      key: \"table\",\n      ...editor.dictionary.slash_menu.table,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"image\", editor)) {\n    items.push({\n      onItemClick: () => {\n        const insertedBlock = insertOrUpdateBlock(editor, {\n          type: \"image\",\n        });\n\n        // Immediately open the file toolbar\n        editor.transact((tr) =>\n          tr.setMeta(editor.filePanel!.plugins[0], {\n            block: insertedBlock,\n          }),\n        );\n      },\n      key: \"image\",\n      ...editor.dictionary.slash_menu.image,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"video\", editor)) {\n    items.push({\n      onItemClick: () => {\n        const insertedBlock = insertOrUpdateBlock(editor, {\n          type: \"video\",\n        });\n\n        // Immediately open the file toolbar\n        editor.transact((tr) =>\n          tr.setMeta(editor.filePanel!.plugins[0], {\n            block: insertedBlock,\n          }),\n        );\n      },\n      key: \"video\",\n      ...editor.dictionary.slash_menu.video,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"audio\", editor)) {\n    items.push({\n      onItemClick: () => {\n        const insertedBlock = insertOrUpdateBlock(editor, {\n          type: \"audio\",\n        });\n\n        // Immediately open the file toolbar\n        editor.transact((tr) =>\n          tr.setMeta(editor.filePanel!.plugins[0], {\n            block: insertedBlock,\n          }),\n        );\n      },\n      key: \"audio\",\n      ...editor.dictionary.slash_menu.audio,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"file\", editor)) {\n    items.push({\n      onItemClick: () => {\n        const insertedBlock = insertOrUpdateBlock(editor, {\n          type: \"file\",\n        });\n\n        // Immediately open the file toolbar\n        editor.transact((tr) =>\n          tr.setMeta(editor.filePanel!.plugins[0], {\n            block: insertedBlock,\n          }),\n        );\n      },\n      key: \"file\",\n      ...editor.dictionary.slash_menu.file,\n    });\n  }\n\n  if (checkDefaultBlockTypeInSchema(\"heading\", editor)) {\n    items.push(\n      {\n        onItemClick: () => {\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: 1, isToggleable: true },\n          });\n        },\n        key: \"toggle_heading\",\n        ...editor.dictionary.slash_menu.toggle_heading,\n      },\n      {\n        onItemClick: () => {\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: 2, isToggleable: true },\n          });\n        },\n\n        key: \"toggle_heading_2\",\n        ...editor.dictionary.slash_menu.toggle_heading_2,\n      },\n      {\n        onItemClick: () => {\n          insertOrUpdateBlock(editor, {\n            type: \"heading\",\n            props: { level: 3, isToggleable: true },\n          });\n        },\n        key: \"toggle_heading_3\",\n        ...editor.dictionary.slash_menu.toggle_heading_3,\n      },\n    );\n\n    editor.settings.heading.levels\n      .filter((level): level is 4 | 5 | 6 => level > 3)\n      .forEach((level) => {\n        items.push({\n          onItemClick: () => {\n            insertOrUpdateBlock(editor, {\n              type: \"heading\",\n              props: { level: level },\n            });\n          },\n          key: `heading_${level}`,\n          ...editor.dictionary.slash_menu[`heading_${level}`],\n        });\n      });\n  }\n\n  items.push({\n    onItemClick: () => {\n      editor.openSuggestionMenu(\":\", {\n        deleteTriggerCharacter: true,\n        ignoreQueryLength: true,\n      });\n    },\n    key: \"emoji\",\n    ...editor.dictionary.slash_menu.emoji,\n  });\n\n  return items;\n}\n\nexport function filterSuggestionItems<\n  T extends { title: string; aliases?: readonly string[] },\n>(items: T[], query: string) {\n  return items.filter(\n    ({ title, aliases }) =>\n      title.toLowerCase().includes(query.toLowerCase()) ||\n      (aliases &&\n        aliases.filter((alias) =>\n          alias.toLowerCase().includes(query.toLowerCase()),\n        ).length !== 0),\n  );\n}\n","import {\n  defaultBlockSpecs,\n  defaultInlineContentSpecs,\n  defaultStyleSpecs,\n} from \"../blocks/defaultBlocks.js\";\nimport type {\n  BlockNoDefaults,\n  PartialBlockNoDefaults,\n} from \"../schema/blocks/types.js\";\nimport {\n  BlockSchema,\n  BlockSchemaFromSpecs,\n  BlockSpecs,\n  InlineContentSchema,\n  InlineContentSchemaFromSpecs,\n  InlineContentSpecs,\n  StyleSchema,\n  StyleSchemaFromSpecs,\n  StyleSpecs,\n  getBlockSchemaFromSpecs,\n  getInlineContentSchemaFromSpecs,\n  getStyleSchemaFromSpecs,\n} from \"../schema/index.js\";\nimport type { BlockNoteEditor } from \"./BlockNoteEditor.js\";\n\nfunction removeUndefined<T extends Record<string, any> | undefined>(obj: T): T {\n  if (!obj) {\n    return obj;\n  }\n  return Object.fromEntries(\n    Object.entries(obj).filter(([, value]) => value !== undefined),\n  ) as T;\n}\n\nexport class BlockNoteSchema<\n  BSchema extends BlockSchema,\n  ISchema extends InlineContentSchema,\n  SSchema extends StyleSchema,\n> {\n  public readonly blockSpecs: BlockSpecs;\n  public readonly inlineContentSpecs: InlineContentSpecs;\n  public readonly styleSpecs: StyleSpecs;\n\n  public readonly blockSchema: BSchema;\n  public readonly inlineContentSchema: ISchema;\n  public readonly styleSchema: SSchema;\n\n  // Helper so that you can use typeof schema.BlockNoteEditor\n  public readonly BlockNoteEditor: BlockNoteEditor<BSchema, ISchema, SSchema> =\n    \"only for types\" as any;\n\n  public readonly Block: BlockNoDefaults<BSchema, ISchema, SSchema> =\n    \"only for types\" as any;\n\n  public readonly PartialBlock: PartialBlockNoDefaults<\n    BSchema,\n    ISchema,\n    SSchema\n  > = \"only for types\" as any;\n\n  public static create<\n    BSpecs extends BlockSpecs = typeof defaultBlockSpecs,\n    ISpecs extends InlineContentSpecs = typeof defaultInlineContentSpecs,\n    SSpecs extends StyleSpecs = typeof defaultStyleSpecs,\n  >(options?: {\n    /**\n     * A list of custom block types that should be available in the editor.\n     */\n    blockSpecs?: BSpecs;\n    /**\n     * A list of custom InlineContent types that should be available in the editor.\n     */\n    inlineContentSpecs?: ISpecs;\n    /**\n     * A list of custom Styles that should be available in the editor.\n     */\n    styleSpecs?: SSpecs;\n  }) {\n    return new BlockNoteSchema<\n      BlockSchemaFromSpecs<BSpecs>,\n      InlineContentSchemaFromSpecs<ISpecs>,\n      StyleSchemaFromSpecs<SSpecs>\n    >(options);\n    // as BlockNoteSchema<\n    // BlockSchemaFromSpecs<BSpecs>,\n    // InlineContentSchemaFromSpecs<ISpecs>,\n    // StyleSchemaFromSpecs<SSpecs>\n    // >;\n  }\n\n  constructor(opts?: {\n    blockSpecs?: BlockSpecs;\n    inlineContentSpecs?: InlineContentSpecs;\n    styleSpecs?: StyleSpecs;\n  }) {\n    this.blockSpecs = removeUndefined(opts?.blockSpecs) || defaultBlockSpecs;\n    this.inlineContentSpecs =\n      removeUndefined(opts?.inlineContentSpecs) || defaultInlineContentSpecs;\n    this.styleSpecs = removeUndefined(opts?.styleSpecs) || defaultStyleSpecs;\n\n    this.blockSchema = getBlockSchemaFromSpecs(this.blockSpecs) as any;\n    this.inlineContentSchema = getInlineContentSchemaFromSpecs(\n      this.inlineContentSpecs,\n    ) as any;\n    this.styleSchema = getStyleSchemaFromSpecs(this.styleSpecs) as any;\n  }\n}\n","import {\n  createBlockSpec,\n  CustomBlockConfig,\n  Props,\n} from \"../../schema/index.js\";\n\nexport const pageBreakConfig = {\n  type: \"pageBreak\" as const,\n  propSchema: {},\n  content: \"none\",\n  isFileBlock: false,\n  isSelectable: false,\n} satisfies CustomBlockConfig;\nexport const pageBreakRender = () => {\n  const pageBreak = document.createElement(\"div\");\n\n  pageBreak.className = \"bn-page-break\";\n  pageBreak.setAttribute(\"data-page-break\", \"\");\n\n  return {\n    dom: pageBreak,\n  };\n};\nexport const pageBreakParse = (\n  element: HTMLElement,\n): Partial<Props<typeof pageBreakConfig.propSchema>> | undefined => {\n  if (element.tagName === \"DIV\" && element.hasAttribute(\"data-page-break\")) {\n    return {\n      type: \"pageBreak\",\n    };\n  }\n\n  return undefined;\n};\nexport const pageBreakToExternalHTML = () => {\n  const pageBreak = document.createElement(\"div\");\n\n  pageBreak.setAttribute(\"data-page-break\", \"\");\n\n  return {\n    dom: pageBreak,\n  };\n};\n\nexport const PageBreak = createBlockSpec(pageBreakConfig, {\n  render: pageBreakRender,\n  parse: pageBreakParse,\n  toExternalHTML: pageBreakToExternalHTML,\n});\n","import { BlockNoteSchema } from \"../../editor/BlockNoteSchema.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\nimport { PageBreak } from \"./PageBreakBlockContent.js\";\n\nexport const pageBreakSchema = BlockNoteSchema.create({\n  blockSpecs: {\n    pageBreak: PageBreak,\n  },\n});\n\n/**\n * Adds page break support to the given schema.\n */\nexport const withPageBreak = <\n  B extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  schema: BlockNoteSchema<B, I, S>,\n) => {\n  return BlockNoteSchema.create({\n    blockSpecs: {\n      ...schema.blockSpecs,\n      ...pageBreakSchema.blockSpecs,\n    },\n    inlineContentSpecs: schema.inlineContentSpecs,\n    styleSpecs: schema.styleSpecs,\n  }) as any as BlockNoteSchema<\n    // typescript needs some help here\n    B & {\n      pageBreak: typeof PageBreak.config;\n    },\n    I,\n    S\n  >;\n};\n","import { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { DefaultSuggestionItem } from \"../../extensions/SuggestionMenu/DefaultSuggestionItem.js\";\nimport { insertOrUpdateBlock } from \"../../extensions/SuggestionMenu/getDefaultSlashMenuItems.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\nimport { pageBreakSchema } from \"./schema.js\";\n\nexport function checkPageBreakBlocksInSchema<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<any, I, S>,\n): editor is BlockNoteEditor<typeof pageBreakSchema.blockSchema, I, S> {\n  return (\n    \"pageBreak\" in editor.schema.blockSchema &&\n    editor.schema.blockSchema[\"pageBreak\"] ===\n      pageBreakSchema.blockSchema[\"pageBreak\"]\n  );\n}\n\nexport function getPageBreakSlashMenuItems<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(editor: BlockNoteEditor<BSchema, I, S>) {\n  const items: (Omit<DefaultSuggestionItem, \"key\"> & { key: \"page_break\" })[] =\n    [];\n\n  if (checkPageBreakBlocksInSchema(editor)) {\n    items.push({\n      ...editor.dictionary.slash_menu.page_break,\n      onItemClick: () => {\n        insertOrUpdateBlock(editor, {\n          type: \"pageBreak\",\n        });\n      },\n      key: \"page_break\",\n    });\n  }\n\n  return items;\n}\n","import {\n  NodeSelection,\n  Selection,\n  TextSelection,\n  Transaction,\n} from \"prosemirror-state\";\nimport { CellSelection } from \"prosemirror-tables\";\n\nimport { Block } from \"../../../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../../../editor/BlockNoteEditor\";\nimport { BlockIdentifier } from \"../../../../schema/index.js\";\nimport { getNearestBlockPos } from \"../../../getBlockInfoFromPos.js\";\nimport { getNodeById } from \"../../../nodeUtil.js\";\n\ntype BlockSelectionData = (\n  | {\n      type: \"text\";\n      headBlockId: string;\n      anchorOffset: number;\n      headOffset: number;\n    }\n  | {\n      type: \"node\";\n    }\n  | {\n      type: \"cell\";\n      anchorCellOffset: number;\n      headCellOffset: number;\n    }\n) & {\n  anchorBlockId: string;\n};\n\n/**\n * `getBlockSelectionData` and `updateBlockSelectionFromData` are used to save\n * and restore the selection within a block, when the block is moved. This is\n * done by first saving the offsets of the anchor and head from the before\n * positions of their surrounding blocks, as well as the IDs of those blocks. We\n * can then recreate the selection by finding the blocks with those IDs, getting\n * their before positions, and adding the offsets to those positions.\n * @param editor The BlockNote editor instance to get the selection data from.\n */\nfunction getBlockSelectionData(\n  editor: BlockNoteEditor<any, any, any>,\n): BlockSelectionData {\n  return editor.transact((tr) => {\n    const anchorBlockPosInfo = getNearestBlockPos(tr.doc, tr.selection.anchor);\n\n    if (tr.selection instanceof CellSelection) {\n      return {\n        type: \"cell\" as const,\n        anchorBlockId: anchorBlockPosInfo.node.attrs.id,\n        anchorCellOffset:\n          tr.selection.$anchorCell.pos - anchorBlockPosInfo.posBeforeNode,\n        headCellOffset:\n          tr.selection.$headCell.pos - anchorBlockPosInfo.posBeforeNode,\n      };\n    } else if (tr.selection instanceof NodeSelection) {\n      return {\n        type: \"node\" as const,\n        anchorBlockId: anchorBlockPosInfo.node.attrs.id,\n      };\n    } else {\n      const headBlockPosInfo = getNearestBlockPos(tr.doc, tr.selection.head);\n\n      return {\n        type: \"text\" as const,\n        anchorBlockId: anchorBlockPosInfo.node.attrs.id,\n        headBlockId: headBlockPosInfo.node.attrs.id,\n        anchorOffset: tr.selection.anchor - anchorBlockPosInfo.posBeforeNode,\n        headOffset: tr.selection.head - headBlockPosInfo.posBeforeNode,\n      };\n    }\n  });\n}\n\n/**\n * `getBlockSelectionData` and `updateBlockSelectionFromData` are used to save\n * and restore the selection within a block, when the block is moved. This is\n * done by first saving the offsets of the anchor and head from the before\n * positions of their surrounding blocks, as well as the IDs of those blocks. We\n * can then recreate the selection by finding the blocks with those IDs, getting\n * their before positions, and adding the offsets to those positions.\n * @param tr The transaction to update the selection in.\n * @param data The selection data to update the selection with (generated by\n * `getBlockSelectionData`).\n */\nfunction updateBlockSelectionFromData(\n  tr: Transaction,\n  data: BlockSelectionData,\n) {\n  const anchorBlockPos = getNodeById(data.anchorBlockId, tr.doc)?.posBeforeNode;\n  if (anchorBlockPos === undefined) {\n    throw new Error(\n      `Could not find block with ID ${data.anchorBlockId} to update selection`,\n    );\n  }\n\n  let selection: Selection;\n  if (data.type === \"cell\") {\n    selection = CellSelection.create(\n      tr.doc,\n      anchorBlockPos + data.anchorCellOffset,\n      anchorBlockPos + data.headCellOffset,\n    );\n  } else if (data.type === \"node\") {\n    selection = NodeSelection.create(tr.doc, anchorBlockPos + 1);\n  } else {\n    const headBlockPos = getNodeById(data.headBlockId, tr.doc)?.posBeforeNode;\n    if (headBlockPos === undefined) {\n      throw new Error(\n        `Could not find block with ID ${data.headBlockId} to update selection`,\n      );\n    }\n\n    selection = TextSelection.create(\n      tr.doc,\n      anchorBlockPos + data.anchorOffset,\n      headBlockPos + data.headOffset,\n    );\n  }\n\n  tr.setSelection(selection);\n}\n\n/**\n * Replaces any `columnList` blocks with the children of their columns. This is\n * done here instead of in `getSelection` as we still need to remove the entire\n * `columnList` node but only insert the `blockContainer` nodes inside it.\n * @param blocks The blocks to flatten.\n */\nfunction flattenColumns(\n  blocks: Block<any, any, any>[],\n): Block<any, any, any>[] {\n  return blocks\n    .map((block) => {\n      if (block.type === \"columnList\") {\n        return block.children\n          .map((column) => flattenColumns(column.children))\n          .flat();\n      }\n\n      return {\n        ...block,\n        children: flattenColumns(block.children),\n      };\n    })\n    .flat();\n}\n\n/**\n * Removes the selected blocks from the editor, then inserts them before/after a\n * reference block. Also updates the selection to match the original selection\n * using `getBlockSelectionData` and `updateBlockSelectionFromData`.\n * @param editor The BlockNote editor instance to move the blocks in.\n * @param referenceBlock The reference block to insert the selected blocks\n * before/after.\n * @param placement Whether to insert the selected blocks before or after the\n * reference block.\n */\nexport function moveSelectedBlocksAndSelection(\n  editor: BlockNoteEditor<any, any, any>,\n  referenceBlock: BlockIdentifier,\n  placement: \"before\" | \"after\",\n) {\n  // We want this to be a single step in the undo history\n  editor.transact((tr) => {\n    const blocks = editor.getSelection()?.blocks || [\n      editor.getTextCursorPosition().block,\n    ];\n    const selectionData = getBlockSelectionData(editor);\n\n    editor.removeBlocks(blocks);\n    editor.insertBlocks(flattenColumns(blocks), referenceBlock, placement);\n\n    updateBlockSelectionFromData(tr, selectionData);\n  });\n}\n\n// Checks if a block is in a valid place after being moved. This check is\n// primitive at the moment and only returns false if the block's parent is a\n// `columnList` block. This is because regular blocks cannot be direct children\n// of `columnList` blocks.\nfunction checkPlacementIsValid(parentBlock?: Block<any, any, any>): boolean {\n  return !parentBlock || parentBlock.type !== \"columnList\";\n}\n\n// Gets the placement for moving a block up. This has 3 cases:\n// 1. If the block has a previous sibling without children, the placement is\n// before it.\n// 2. If the block has a previous sibling with children, the placement is after\n// the last child.\n// 3. If the block has no previous sibling, but is nested, the placement is\n// before its parent.\n// If the placement is invalid, the function is called recursively until a valid\n// placement is found. Returns undefined if no valid placement is found, meaning\n// the block is already at the top of the document.\nfunction getMoveUpPlacement(\n  editor: BlockNoteEditor<any, any, any>,\n  prevBlock?: Block<any, any, any>,\n  parentBlock?: Block<any, any, any>,\n):\n  | { referenceBlock: BlockIdentifier; placement: \"before\" | \"after\" }\n  | undefined {\n  let referenceBlock: Block<any, any, any> | undefined;\n  let placement: \"before\" | \"after\" | undefined;\n\n  if (!prevBlock) {\n    if (parentBlock) {\n      referenceBlock = parentBlock;\n      placement = \"before\";\n    }\n  } else if (prevBlock.children.length > 0) {\n    referenceBlock = prevBlock.children[prevBlock.children.length - 1];\n    placement = \"after\";\n  } else {\n    referenceBlock = prevBlock;\n    placement = \"before\";\n  }\n\n  // Case when the block is already at the top of the document.\n  if (!referenceBlock || !placement) {\n    return undefined;\n  }\n\n  const referenceBlockParent = editor.getParentBlock(referenceBlock);\n  if (!checkPlacementIsValid(referenceBlockParent)) {\n    return getMoveUpPlacement(\n      editor,\n      placement === \"after\"\n        ? referenceBlock\n        : editor.getPrevBlock(referenceBlock),\n      referenceBlockParent,\n    );\n  }\n\n  return { referenceBlock, placement };\n}\n\n// Gets the placement for moving a block down. This has 3 cases:\n// 1. If the block has a next sibling without children, the placement is  after\n// it.\n// 2. If the block has a next sibling with children, the placement is before the\n// first child.\n// 3. If the block has no next sibling, but is nested, the placement is\n// after its parent.\n// If the placement is invalid, the function is called recursively until a valid\n// placement is found. Returns undefined if no valid placement is found, meaning\n// the block is already at the bottom of the document.\nfunction getMoveDownPlacement(\n  editor: BlockNoteEditor<any, any, any>,\n  nextBlock?: Block<any, any, any>,\n  parentBlock?: Block<any, any, any>,\n):\n  | { referenceBlock: BlockIdentifier; placement: \"before\" | \"after\" }\n  | undefined {\n  let referenceBlock: Block<any, any, any> | undefined;\n  let placement: \"before\" | \"after\" | undefined;\n\n  if (!nextBlock) {\n    if (parentBlock) {\n      referenceBlock = parentBlock;\n      placement = \"after\";\n    }\n  } else if (nextBlock.children.length > 0) {\n    referenceBlock = nextBlock.children[0];\n    placement = \"before\";\n  } else {\n    referenceBlock = nextBlock;\n    placement = \"after\";\n  }\n\n  // Case when the block is already at the bottom of the document.\n  if (!referenceBlock || !placement) {\n    return undefined;\n  }\n\n  const referenceBlockParent = editor.getParentBlock(referenceBlock);\n  if (!checkPlacementIsValid(referenceBlockParent)) {\n    return getMoveDownPlacement(\n      editor,\n      placement === \"before\"\n        ? referenceBlock\n        : editor.getNextBlock(referenceBlock),\n      referenceBlockParent,\n    );\n  }\n\n  return { referenceBlock, placement };\n}\n\nexport function moveBlocksUp(editor: BlockNoteEditor<any, any, any>) {\n  editor.transact(() => {\n    const selection = editor.getSelection();\n    const block = selection?.blocks[0] || editor.getTextCursorPosition().block;\n\n    const moveUpPlacement = getMoveUpPlacement(\n      editor,\n      editor.getPrevBlock(block),\n      editor.getParentBlock(block),\n    );\n\n    if (!moveUpPlacement) {\n      return;\n    }\n\n    moveSelectedBlocksAndSelection(\n      editor,\n      moveUpPlacement.referenceBlock,\n      moveUpPlacement.placement,\n    );\n  });\n}\n\nexport function moveBlocksDown(editor: BlockNoteEditor<any, any, any>) {\n  editor.transact(() => {\n    const selection = editor.getSelection();\n    const block =\n      selection?.blocks[selection?.blocks.length - 1] ||\n      editor.getTextCursorPosition().block;\n\n    const moveDownPlacement = getMoveDownPlacement(\n      editor,\n      editor.getNextBlock(block),\n      editor.getParentBlock(block),\n    );\n\n    if (!moveDownPlacement) {\n      return;\n    }\n\n    moveSelectedBlocksAndSelection(\n      editor,\n      moveDownPlacement.referenceBlock,\n      moveDownPlacement.placement,\n    );\n  });\n}\n","import { Fragment, NodeType, Slice } from \"prosemirror-model\";\nimport { Transaction } from \"prosemirror-state\";\nimport { ReplaceAroundStep } from \"prosemirror-transform\";\n\nimport { BlockNoteEditor } from \"../../../../editor/BlockNoteEditor.js\";\nimport { getBlockInfoFromTransaction } from \"../../../getBlockInfoFromPos.js\";\n\n// TODO: Unit tests\n/**\n * This is a modified version of https://github.com/ProseMirror/prosemirror-schema-list/blob/569c2770cbb8092d8f11ea53ecf78cb7a4e8f15a/src/schema-list.ts#L232\n *\n * The original function derives too many information from the parentnode and itemtype\n */\nfunction sinkListItem(\n  tr: Transaction,\n  itemType: NodeType,\n  groupType: NodeType,\n) {\n  const { $from, $to } = tr.selection;\n  const range = $from.blockRange(\n    $to,\n    (node) =>\n      node.childCount > 0 &&\n      (node.type.name === \"blockGroup\" || node.type.name === \"column\"), // change necessary to not look at first item child type\n  );\n  if (!range) {\n    return false;\n  }\n  const startIndex = range.startIndex;\n  if (startIndex === 0) {\n    return false;\n  }\n  const parent = range.parent;\n  const nodeBefore = parent.child(startIndex - 1);\n  if (nodeBefore.type !== itemType) {\n    return false;\n  }\n  const nestedBefore =\n    nodeBefore.lastChild && nodeBefore.lastChild.type === groupType; // change necessary to check groupType instead of parent.type\n  const inner = Fragment.from(nestedBefore ? itemType.create() : null);\n  const slice = new Slice(\n    Fragment.from(\n      itemType.create(null, Fragment.from(groupType.create(null, inner))), // change necessary to create \"groupType\" instead of parent.type\n    ),\n    nestedBefore ? 3 : 1,\n    0,\n  );\n\n  const before = range.start;\n  const after = range.end;\n\n  tr.step(\n    new ReplaceAroundStep(\n      before - (nestedBefore ? 3 : 1),\n      after,\n      before,\n      after,\n      slice,\n      1,\n      true,\n    ),\n  ).scrollIntoView();\n\n  return true;\n}\n\nexport function nestBlock(editor: BlockNoteEditor<any, any, any>) {\n  return editor.transact((tr) => {\n    return sinkListItem(\n      tr,\n      editor.pmSchema.nodes[\"blockContainer\"],\n      editor.pmSchema.nodes[\"blockGroup\"],\n    );\n  });\n}\n\nexport function unnestBlock(editor: BlockNoteEditor<any, any, any>) {\n  editor._tiptapEditor.commands.liftListItem(\"blockContainer\");\n}\n\nexport function canNestBlock(editor: BlockNoteEditor<any, any, any>) {\n  return editor.transact((tr) => {\n    const { bnBlock: blockContainer } = getBlockInfoFromTransaction(tr);\n\n    return tr.doc.resolve(blockContainer.beforePos).nodeBefore !== null;\n  });\n}\n\nexport function canUnnestBlock(editor: BlockNoteEditor<any, any, any>) {\n  return editor.transact((tr) => {\n    const { bnBlock: blockContainer } = getBlockInfoFromTransaction(tr);\n\n    return tr.doc.resolve(blockContainer.beforePos).depth > 1;\n  });\n}\n","import type { Node } from \"prosemirror-model\";\nimport type { Block } from \"../../../blocks/defaultBlocks.js\";\nimport type {\n  BlockIdentifier,\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { nodeToBlock } from \"../../nodeConversions/nodeToBlock.js\";\nimport { getNodeById } from \"../../nodeUtil.js\";\nimport { getPmSchema } from \"../../pmUtil.js\";\n\nexport function getBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  doc: Node,\n  blockIdentifier: BlockIdentifier,\n): Block<BSchema, I, S> | undefined {\n  const id =\n    typeof blockIdentifier === \"string\" ? blockIdentifier : blockIdentifier.id;\n  const pmSchema = getPmSchema(doc);\n\n  const posInfo = getNodeById(id, doc);\n  if (!posInfo) {\n    return undefined;\n  }\n\n  return nodeToBlock(posInfo.node, pmSchema);\n}\n\nexport function getPrevBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  doc: Node,\n  blockIdentifier: BlockIdentifier,\n): Block<BSchema, I, S> | undefined {\n  const id =\n    typeof blockIdentifier === \"string\" ? blockIdentifier : blockIdentifier.id;\n\n  const posInfo = getNodeById(id, doc);\n  const pmSchema = getPmSchema(doc);\n  if (!posInfo) {\n    return undefined;\n  }\n\n  const $posBeforeNode = doc.resolve(posInfo.posBeforeNode);\n  const nodeToConvert = $posBeforeNode.nodeBefore;\n  if (!nodeToConvert) {\n    return undefined;\n  }\n\n  return nodeToBlock(nodeToConvert, pmSchema);\n}\n\nexport function getNextBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  doc: Node,\n  blockIdentifier: BlockIdentifier,\n): Block<BSchema, I, S> | undefined {\n  const id =\n    typeof blockIdentifier === \"string\" ? blockIdentifier : blockIdentifier.id;\n  const posInfo = getNodeById(id, doc);\n  const pmSchema = getPmSchema(doc);\n  if (!posInfo) {\n    return undefined;\n  }\n\n  const $posAfterNode = doc.resolve(\n    posInfo.posBeforeNode + posInfo.node.nodeSize,\n  );\n  const nodeToConvert = $posAfterNode.nodeAfter;\n  if (!nodeToConvert) {\n    return undefined;\n  }\n\n  return nodeToBlock(nodeToConvert, pmSchema);\n}\n\nexport function getParentBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  doc: Node,\n  blockIdentifier: BlockIdentifier,\n): Block<BSchema, I, S> | undefined {\n  const id =\n    typeof blockIdentifier === \"string\" ? blockIdentifier : blockIdentifier.id;\n  const pmSchema = getPmSchema(doc);\n  const posInfo = getNodeById(id, doc);\n  if (!posInfo) {\n    return undefined;\n  }\n\n  const $posBeforeNode = doc.resolve(posInfo.posBeforeNode);\n  const parentNode = $posBeforeNode.node();\n  const grandparentNode = $posBeforeNode.node(-1);\n  const nodeToConvert =\n    grandparentNode.type.name !== \"doc\"\n      ? parentNode.type.name === \"blockGroup\"\n        ? grandparentNode\n        : parentNode\n      : undefined;\n  if (!nodeToConvert) {\n    return undefined;\n  }\n\n  return nodeToBlock(nodeToConvert, pmSchema);\n}\n","import { selectionToInsertionEnd } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\n\nimport type { Transaction } from \"prosemirror-state\";\n\n// similar to tiptap insertContentAt\nexport function insertContentAt(\n  tr: Transaction,\n  position: number | { from: number; to: number },\n  nodes: Node[],\n  options: {\n    updateSelection: boolean;\n  } = { updateSelection: true },\n) {\n  // donâ€™t dispatch an empty fragment because this can lead to strange errors\n  // if (content.toString() === \"<>\") {\n  //   return true;\n  // }\n\n  let { from, to } =\n    typeof position === \"number\"\n      ? { from: position, to: position }\n      : { from: position.from, to: position.to };\n\n  let isOnlyTextContent = true;\n  let isOnlyBlockContent = true;\n  // const nodes = isFragment(content) ? content : [content];\n\n  let text = \"\";\n\n  nodes.forEach((node) => {\n    // check if added node is valid\n    node.check();\n\n    if (isOnlyTextContent && node.isText && node.marks.length === 0) {\n      text += node.text;\n    } else {\n      isOnlyTextContent = false;\n    }\n\n    isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n  });\n\n  // check if we can replace the wrapping node by\n  // the newly inserted content\n  // example:\n  // replace an empty paragraph by an inserted image\n  // instead of inserting the image below the paragraph\n  if (from === to && isOnlyBlockContent) {\n    const { parent } = tr.doc.resolve(from);\n    const isEmptyTextBlock =\n      parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n\n    if (isEmptyTextBlock) {\n      from -= 1;\n      to += 1;\n    }\n  }\n\n  // if there is only plain text we have to use `insertText`\n  // because this will keep the current marks\n  if (isOnlyTextContent) {\n    // if value is string, we can use it directly\n    // otherwise if it is an array, we have to join it\n    // if (Array.isArray(value)) {\n    //   tr.insertText(value.map((v) => v.text || \"\").join(\"\"), from, to);\n    // } else if (typeof value === \"object\" && !!value && !!value.text) {\n    //   tr.insertText(value.text, from, to);\n    // } else {\n    //   tr.insertText(value as string, from, to);\n    // }\n    tr.insertText(text, from, to);\n  } else {\n    tr.replaceWith(from, to, nodes);\n  }\n\n  // set cursor at end of inserted content\n  if (options.updateSelection) {\n    selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n  }\n\n  return true;\n}\n","import { TextSelection, type Transaction } from \"prosemirror-state\";\nimport { TableMap } from \"prosemirror-tables\";\n\nimport { Block } from \"../../../blocks/defaultBlocks.js\";\nimport { Selection } from \"../../../editor/selectionTypes.js\";\nimport {\n  BlockIdentifier,\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { getBlockInfo, getNearestBlockPos } from \"../../getBlockInfoFromPos.js\";\nimport {\n  nodeToBlock,\n  prosemirrorSliceToSlicedBlocks,\n} from \"../../nodeConversions/nodeToBlock.js\";\nimport { getNodeById } from \"../../nodeUtil.js\";\nimport { getBlockNoteSchema, getPmSchema } from \"../../pmUtil.js\";\n\nexport function getSelection<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(tr: Transaction): Selection<BSchema, I, S> | undefined {\n  const pmSchema = getPmSchema(tr);\n  // Return undefined if the selection is collapsed or a node is selected.\n  if (tr.selection.empty || \"node\" in tr.selection) {\n    return undefined;\n  }\n\n  const $startBlockBeforePos = tr.doc.resolve(\n    getNearestBlockPos(tr.doc, tr.selection.from).posBeforeNode,\n  );\n  const $endBlockBeforePos = tr.doc.resolve(\n    getNearestBlockPos(tr.doc, tr.selection.to).posBeforeNode,\n  );\n\n  // Converts the node at the given index and depth around `$startBlockBeforePos`\n  // to a block. Used to get blocks at given indices at the shared depth and\n  // at the depth of `$startBlockBeforePos`.\n  const indexToBlock = (\n    index: number,\n    depth?: number,\n  ): Block<BSchema, I, S> => {\n    const pos = $startBlockBeforePos.posAtIndex(index, depth);\n    const node = tr.doc.resolve(pos).nodeAfter;\n\n    if (!node) {\n      throw new Error(\n        `Error getting selection - node not found at position ${pos}`,\n      );\n    }\n\n    return nodeToBlock(node, pmSchema);\n  };\n\n  const blocks: Block<BSchema, I, S>[] = [];\n  // Minimum depth at which the blocks share a common ancestor.\n  const sharedDepth = $startBlockBeforePos.sharedDepth($endBlockBeforePos.pos);\n  const startIndex = $startBlockBeforePos.index(sharedDepth);\n  const endIndex = $endBlockBeforePos.index(sharedDepth);\n\n  // In most cases, we want to return the blocks spanned by the selection at the\n  // shared depth. However, when the block in which the selection starts is at a\n  // higher depth than the shared depth, we omit the first block at the shared\n  // depth. Instead, we include the first block at its depth, and any blocks at\n  // a higher index up to the shared depth. The following  example illustrates\n  // this:\n  // - id-0\n  //   - id-1\n  //     - >|id-2\n  //     - id-3\n  //   - id-4\n  //     - id-5\n  //   - id-6\n  // - id-7\n  // - id-8\n  // - id-9|<\n  //   - id-10\n  // Here, each block is represented by its ID, and the selection is represented\n  // by the `>|` and `|<` markers. So the selection starts in block `id-2` and\n  // ends in block `id-8`. In this case, the shared depth is 0, since the blocks\n  // `id-6`, `id-7`, and `id-8` set the shared depth, as they are the least\n  // nested blocks spanned by the selection. Therefore, these blocks are all\n  // added to the `blocks` array. However, the selection starts in block `id-2`,\n  // which is at a higher depth than the shared depth. So we add block `id-2` to\n  // the `blocks` array, as well as any later siblings (in this case, `id-3`),\n  // and move up one level of depth. The ancestor of block `id-2` at this depth\n  // is block `id-1`, so we add all its later siblings to the `blocks` array as\n  // well, again moving up one level of depth. Since we're now at the shared\n  // depth, we are done. The final `blocks` array for this example would be:\n  // [ id-2, id-3, id-4, id-6, id-7, id-8, id-9 ]\n  if ($startBlockBeforePos.depth > sharedDepth) {\n    // Adds the block that the selection starts in.\n    blocks.push(nodeToBlock($startBlockBeforePos.nodeAfter!, pmSchema));\n\n    // Traverses all depths from the depth of the block in which the selection\n    // starts, up to the shared depth.\n    for (let depth = $startBlockBeforePos.depth; depth > sharedDepth; depth--) {\n      const parentNode = $startBlockBeforePos.node(depth);\n\n      if (parentNode.type.isInGroup(\"childContainer\")) {\n        const startIndexAtDepth = $startBlockBeforePos.index(depth) + 1;\n        const childCountAtDepth = $startBlockBeforePos.node(depth).childCount;\n\n        // Adds all blocks after the index of the block in which the selection\n        // starts (or its ancestors at lower depths).\n        for (let i = startIndexAtDepth; i < childCountAtDepth; i++) {\n          blocks.push(indexToBlock(i, depth));\n        }\n      }\n    }\n  } else {\n    // Adds the first block spanned by the selection at the shared depth.\n    blocks.push(indexToBlock(startIndex, sharedDepth));\n  }\n\n  // Adds all blocks spanned by the selection at the shared depth, excluding\n  // the first.\n  for (let i = startIndex + 1; i <= endIndex; i++) {\n    blocks.push(indexToBlock(i, sharedDepth));\n  }\n\n  if (blocks.length === 0) {\n    throw new Error(\n      `Error getting selection - selection doesn't span any blocks (${tr.selection})`,\n    );\n  }\n\n  return {\n    blocks,\n  };\n}\n\nexport function setSelection(\n  tr: Transaction,\n  startBlock: BlockIdentifier,\n  endBlock: BlockIdentifier,\n) {\n  const startBlockId =\n    typeof startBlock === \"string\" ? startBlock : startBlock.id;\n  const endBlockId = typeof endBlock === \"string\" ? endBlock : endBlock.id;\n  const pmSchema = getPmSchema(tr);\n  const schema = getBlockNoteSchema(pmSchema);\n\n  if (startBlockId === endBlockId) {\n    throw new Error(\n      `Attempting to set selection with the same anchor and head blocks (id ${startBlockId})`,\n    );\n  }\n  const anchorPosInfo = getNodeById(startBlockId, tr.doc);\n  if (!anchorPosInfo) {\n    throw new Error(`Block with ID ${startBlockId} not found`);\n  }\n  const headPosInfo = getNodeById(endBlockId, tr.doc);\n  if (!headPosInfo) {\n    throw new Error(`Block with ID ${endBlockId} not found`);\n  }\n\n  const anchorBlockInfo = getBlockInfo(anchorPosInfo);\n  const headBlockInfo = getBlockInfo(headPosInfo);\n\n  const anchorBlockConfig =\n    schema.blockSchema[\n      anchorBlockInfo.blockNoteType as keyof typeof schema.blockSchema\n    ];\n  const headBlockConfig =\n    schema.blockSchema[\n      headBlockInfo.blockNoteType as keyof typeof schema.blockSchema\n    ];\n\n  if (\n    !anchorBlockInfo.isBlockContainer ||\n    anchorBlockConfig.content === \"none\"\n  ) {\n    throw new Error(\n      `Attempting to set selection anchor in block without content (id ${startBlockId})`,\n    );\n  }\n  if (!headBlockInfo.isBlockContainer || headBlockConfig.content === \"none\") {\n    throw new Error(\n      `Attempting to set selection anchor in block without content (id ${endBlockId})`,\n    );\n  }\n\n  let startPos: number;\n  let endPos: number;\n\n  if (anchorBlockConfig.content === \"table\") {\n    const tableMap = TableMap.get(anchorBlockInfo.blockContent.node);\n    const firstCellPos =\n      anchorBlockInfo.blockContent.beforePos +\n      tableMap.positionAt(0, 0, anchorBlockInfo.blockContent.node) +\n      1;\n    startPos = firstCellPos + 2;\n  } else {\n    startPos = anchorBlockInfo.blockContent.beforePos + 1;\n  }\n\n  if (headBlockConfig.content === \"table\") {\n    const tableMap = TableMap.get(headBlockInfo.blockContent.node);\n    const lastCellPos =\n      headBlockInfo.blockContent.beforePos +\n      tableMap.positionAt(\n        tableMap.height - 1,\n        tableMap.width - 1,\n        headBlockInfo.blockContent.node,\n      ) +\n      1;\n    const lastCellNodeSize = tr.doc.resolve(lastCellPos).nodeAfter!.nodeSize;\n    endPos = lastCellPos + lastCellNodeSize - 2;\n  } else {\n    endPos = headBlockInfo.blockContent.afterPos - 1;\n  }\n\n  // TODO: We should polish up the `MultipleNodeSelection` and use that instead.\n  //  Right now it's missing a few things like a jsonID and styling to show\n  //  which nodes are selected. `TextSelection` is ok for now, but has the\n  //  restriction that the start/end blocks must have content.\n  tr.setSelection(TextSelection.create(tr.doc, startPos, endPos));\n}\n\nexport function getSelectionCutBlocks(tr: Transaction) {\n  // TODO: fix image node selection\n\n  const pmSchema = getPmSchema(tr);\n  let start = tr.selection.$from;\n  let end = tr.selection.$to;\n\n  // the selection moves below are used to make sure `prosemirrorSliceToSlicedBlocks` returns\n  // the correct information about whether content is cut at the start or end of a block\n\n  // if the end is at the end of a node (|</span></p>) move it forward so we include all closing tags (</span></p>|)\n  while (end.parentOffset >= end.parent.nodeSize - 2 && end.depth > 0) {\n    end = tr.doc.resolve(end.pos + 1);\n  }\n\n  // if the end is at the start of an empty node (</span></p><p>|) move it backwards so we drop empty start tags (</span></p>|)\n  while (end.parentOffset === 0 && end.depth > 0) {\n    end = tr.doc.resolve(end.pos - 1);\n  }\n\n  // if the start is at the start of a node (<p><span>|) move it backwards so we include all open tags (|<p><span>)\n  while (start.parentOffset === 0 && start.depth > 0) {\n    start = tr.doc.resolve(start.pos - 1);\n  }\n\n  // if the start is at the end of a node (|</p><p><span>|) move it forwards so we drop all closing tags (|<p><span>)\n  while (start.parentOffset >= start.parent.nodeSize - 2 && start.depth > 0) {\n    start = tr.doc.resolve(start.pos + 1);\n  }\n\n  const selectionInfo = prosemirrorSliceToSlicedBlocks(\n    tr.doc.slice(start.pos, end.pos, true),\n    pmSchema,\n  );\n\n  return {\n    _meta: {\n      startPos: start.pos,\n      endPos: end.pos,\n    },\n    ...selectionInfo,\n  };\n}\n","import type { Node } from \"prosemirror-model\";\nimport {\n  NodeSelection,\n  TextSelection,\n  type Transaction,\n} from \"prosemirror-state\";\nimport type { TextCursorPosition } from \"../../../editor/cursorPositionTypes.js\";\nimport type {\n  BlockIdentifier,\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { UnreachableCaseError } from \"../../../util/typescript.js\";\nimport {\n  getBlockInfo,\n  getBlockInfoFromTransaction,\n} from \"../../getBlockInfoFromPos.js\";\nimport { nodeToBlock } from \"../../nodeConversions/nodeToBlock.js\";\nimport { getNodeById } from \"../../nodeUtil.js\";\nimport { getBlockNoteSchema, getPmSchema } from \"../../pmUtil.js\";\n\nexport function getTextCursorPosition<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(tr: Transaction): TextCursorPosition<BSchema, I, S> {\n  const { bnBlock } = getBlockInfoFromTransaction(tr);\n  const pmSchema = getPmSchema(tr.doc);\n\n  const resolvedPos = tr.doc.resolve(bnBlock.beforePos);\n  // Gets previous blockContainer node at the same nesting level, if the current node isn't the first child.\n  const prevNode = resolvedPos.nodeBefore;\n\n  // Gets next blockContainer node at the same nesting level, if the current node isn't the last child.\n  const nextNode = tr.doc.resolve(bnBlock.afterPos).nodeAfter;\n\n  // Gets parent blockContainer node, if the current node is nested.\n  let parentNode: Node | undefined = undefined;\n  if (resolvedPos.depth > 1) {\n    // for nodes nested in bnBlocks\n    parentNode = resolvedPos.node();\n    if (!parentNode.type.isInGroup(\"bnBlock\")) {\n      // for blockGroups, we need to go one level up\n      parentNode = resolvedPos.node(resolvedPos.depth - 1);\n    }\n  }\n\n  return {\n    block: nodeToBlock(bnBlock.node, pmSchema),\n    prevBlock: prevNode === null ? undefined : nodeToBlock(prevNode, pmSchema),\n    nextBlock: nextNode === null ? undefined : nodeToBlock(nextNode, pmSchema),\n    parentBlock:\n      parentNode === undefined ? undefined : nodeToBlock(parentNode, pmSchema),\n  };\n}\n\nexport function setTextCursorPosition(\n  tr: Transaction,\n  targetBlock: BlockIdentifier,\n  placement: \"start\" | \"end\" = \"start\",\n) {\n  const id = typeof targetBlock === \"string\" ? targetBlock : targetBlock.id;\n  const pmSchema = getPmSchema(tr.doc);\n  const schema = getBlockNoteSchema(pmSchema);\n\n  const posInfo = getNodeById(id, tr.doc);\n  if (!posInfo) {\n    throw new Error(`Block with ID ${id} not found`);\n  }\n\n  const info = getBlockInfo(posInfo);\n\n  const contentType: \"none\" | \"inline\" | \"table\" =\n    schema.blockSchema[info.blockNoteType]!.content;\n\n  if (info.isBlockContainer) {\n    const blockContent = info.blockContent;\n    if (contentType === \"none\") {\n      tr.setSelection(NodeSelection.create(tr.doc, blockContent.beforePos));\n      return;\n    }\n\n    if (contentType === \"inline\") {\n      if (placement === \"start\") {\n        tr.setSelection(\n          TextSelection.create(tr.doc, blockContent.beforePos + 1),\n        );\n      } else {\n        tr.setSelection(\n          TextSelection.create(tr.doc, blockContent.afterPos - 1),\n        );\n      }\n    } else if (contentType === \"table\") {\n      if (placement === \"start\") {\n        // Need to offset the position as we have to get through the `tableRow`\n        // and `tableCell` nodes to get to the `tableParagraph` node we want to\n        // set the selection in.\n        tr.setSelection(\n          TextSelection.create(tr.doc, blockContent.beforePos + 4),\n        );\n      } else {\n        tr.setSelection(\n          TextSelection.create(tr.doc, blockContent.afterPos - 4),\n        );\n      }\n    } else {\n      throw new UnreachableCaseError(contentType);\n    }\n  } else {\n    const child =\n      placement === \"start\"\n        ? info.childContainer.node.firstChild!\n        : info.childContainer.node.lastChild!;\n\n    setTextCursorPosition(tr, child.attrs.id, placement);\n  }\n}\n","// some dependencies only export as ESM modules. This makes them incompatible with Node CJS.\n// To work around this, we load these dependencies as dynamic imports in a function that initializes them.\n\n// (to reproduce this issue, run ts-node on a file that users server-util)\nexport let esmDependencies:\n  | undefined\n  | {\n      rehypeParse: typeof import(\"rehype-parse\");\n      rehypeStringify: typeof import(\"rehype-stringify\");\n      unified: typeof import(\"unified\");\n      hastUtilFromDom: typeof import(\"hast-util-from-dom\");\n      rehypeRemark: typeof import(\"rehype-remark\");\n      remarkGfm: typeof import(\"remark-gfm\");\n      remarkStringify: typeof import(\"remark-stringify\");\n      remarkParse: typeof import(\"remark-parse\");\n      remarkRehype: typeof import(\"remark-rehype\");\n      rehypeFormat: typeof import(\"rehype-format\");\n    };\n\nexport async function initializeESMDependencies() {\n  if (esmDependencies) {\n    return esmDependencies;\n  }\n  const vals = await Promise.all([\n    import(\"rehype-parse\"),\n    import(\"rehype-stringify\"),\n    import(\"unified\"),\n    import(\"hast-util-from-dom\"),\n    import(\"rehype-remark\"),\n    import(\"remark-gfm\"),\n    import(\"remark-stringify\"),\n    import(\"remark-parse\"),\n    import(\"remark-rehype\"),\n    import(\"rehype-format\"),\n  ]);\n\n  esmDependencies = {\n    rehypeParse: vals[0],\n    rehypeStringify: vals[1],\n    unified: vals[2],\n    hastUtilFromDom: vals[3],\n    rehypeRemark: vals[4],\n    remarkGfm: vals[5],\n    remarkStringify: vals[6],\n    remarkParse: vals[7],\n    remarkRehype: vals[8],\n    rehypeFormat: vals[9],\n  };\n\n  return esmDependencies;\n}\n","import { Element as HASTElement, Parent as HASTParent } from \"hast\";\n\n/**\n * Rehype plugin which removes <u> tags. Used to remove underlines before converting HTML to markdown, as Markdown\n * doesn't support underlines.\n */\nexport function removeUnderlines() {\n  const removeUnderlinesHelper = (tree: HASTParent) => {\n    let numChildElements = tree.children.length;\n\n    for (let i = 0; i < numChildElements; i++) {\n      const node = tree.children[i];\n\n      if (node.type === \"element\") {\n        // Recursively removes underlines from child elements.\n        removeUnderlinesHelper(node);\n\n        if ((node as HASTElement).tagName === \"u\") {\n          // Lifts child nodes outside underline element, deletes the underline element, and updates current index &\n          // the number of child elements.\n          if (node.children.length > 0) {\n            tree.children.splice(i, 1, ...node.children);\n\n            const numElementsAdded = node.children.length - 1;\n            numChildElements += numElementsAdded;\n            i += numElementsAdded;\n          } else {\n            tree.children.splice(i, 1);\n\n            numChildElements--;\n            i--;\n          }\n        }\n      }\n    }\n  };\n\n  return removeUnderlinesHelper;\n}\n","import { Element as HASTElement, Parent as HASTParent } from \"hast\";\nimport { esmDependencies } from \"../../../../util/esmDependencies.js\";\n\n/**\n * Rehype plugin which adds a space after each checkbox input element. This is\n * because remark doesn't add any spaces between the checkbox input and the text\n * itself, but these are needed for correct Markdown syntax.\n */\nexport function addSpacesToCheckboxes() {\n  const deps = esmDependencies;\n\n  if (!deps) {\n    throw new Error(\n      \"addSpacesToCheckboxes requires ESM dependencies to be initialized\",\n    );\n  }\n\n  const helper = (tree: HASTParent) => {\n    if (tree.children && \"length\" in tree.children && tree.children.length) {\n      for (let i = tree.children.length - 1; i >= 0; i--) {\n        const child = tree.children[i];\n        const nextChild =\n          i + 1 < tree.children.length ? tree.children[i + 1] : undefined;\n\n        // Checks for paragraph element after checkbox input element.\n        if (\n          child.type === \"element\" &&\n          child.tagName === \"input\" &&\n          child.properties?.type === \"checkbox\" &&\n          nextChild?.type === \"element\" &&\n          nextChild.tagName === \"p\"\n        ) {\n          // Converts paragraph to span, otherwise remark will think it needs to\n          // be on a new line.\n          nextChild.tagName = \"span\";\n          // Adds a space after the checkbox input element.\n          nextChild.children.splice(\n            0,\n            0,\n            deps.hastUtilFromDom.fromDom(\n              document.createTextNode(\" \"),\n            ) as HASTElement,\n          );\n        } else {\n          helper(child as HASTParent);\n        }\n      }\n    }\n  };\n\n  return helper;\n}\n","import { Schema } from \"prosemirror-model\";\nimport { PartialBlock } from \"../../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../../editor/BlockNoteEditor.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport {\n  esmDependencies,\n  initializeESMDependencies,\n} from \"../../../util/esmDependencies.js\";\nimport { createExternalHTMLExporter } from \"../html/externalHTMLExporter.js\";\nimport { removeUnderlines } from \"./removeUnderlinesRehypePlugin.js\";\nimport { addSpacesToCheckboxes } from \"./util/addSpacesToCheckboxesRehypePlugin.js\";\n\n// Needs to be sync because it's used in drag handler event (SideMenuPlugin)\n// Ideally, call `await initializeESMDependencies()` before calling this function\nexport function cleanHTMLToMarkdown(cleanHTMLString: string) {\n  const deps = esmDependencies;\n\n  if (!deps) {\n    throw new Error(\n      \"cleanHTMLToMarkdown requires ESM dependencies to be initialized\",\n    );\n  }\n\n  const markdownString = deps.unified\n    .unified()\n    .use(deps.rehypeParse.default, { fragment: true })\n    .use(removeUnderlines)\n    .use(addSpacesToCheckboxes)\n    .use(deps.rehypeRemark.default)\n    .use(deps.remarkGfm.default)\n    .use(deps.remarkStringify.default, {\n      handlers: { text: (node) => node.value },\n    })\n    .processSync(cleanHTMLString);\n\n  return markdownString.value as string;\n}\n\nexport async function blocksToMarkdown<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  blocks: PartialBlock<BSchema, I, S>[],\n  schema: Schema,\n  editor: BlockNoteEditor<BSchema, I, S>,\n  options: { document?: Document },\n): Promise<string> {\n  await initializeESMDependencies();\n  const exporter = createExternalHTMLExporter(schema, editor);\n  const externalHTML = exporter.exportBlocks(blocks, options);\n\n  return cleanHTMLToMarkdown(externalHTML);\n}\n","function getChildIndex(node: Element) {\n  return Array.prototype.indexOf.call(node.parentElement!.childNodes, node);\n}\n\nfunction isWhitespaceNode(node: Node) {\n  return node.nodeType === 3 && !/\\S/.test(node.nodeValue || \"\");\n}\n\n/**\n * Step 1, Turns:\n *\n * <ul>\n *  <li>item</li>\n *  <li>\n *   <ul>\n *      <li>...</li>\n *      <li>...</li>\n *   </ul>\n * </li>\n *\n * Into:\n * <ul>\n *  <li>item</li>\n *  <ul>\n *      <li>...</li>\n *      <li>...</li>\n *  </ul>\n * </ul>\n *\n */\nfunction liftNestedListsToParent(element: HTMLElement) {\n  element.querySelectorAll(\"li > ul, li > ol\").forEach((list) => {\n    const index = getChildIndex(list);\n    const parentListItem = list.parentElement!;\n    const siblingsAfter = Array.from(parentListItem.childNodes).slice(\n      index + 1,\n    );\n    list.remove();\n    siblingsAfter.forEach((sibling) => {\n      sibling.remove();\n    });\n\n    parentListItem.insertAdjacentElement(\"afterend\", list);\n\n    siblingsAfter.reverse().forEach((sibling) => {\n      if (isWhitespaceNode(sibling)) {\n        return;\n      }\n      const siblingContainer = document.createElement(\"li\");\n      siblingContainer.append(sibling);\n      list.insertAdjacentElement(\"afterend\", siblingContainer);\n    });\n    if (parentListItem.childNodes.length === 0) {\n      parentListItem.remove();\n    }\n  });\n}\n\n/**\n * Step 2, Turns (output of liftNestedListsToParent):\n *\n * <li>item</li>\n * <ul>\n *   <li>...</li>\n *   <li>...</li>\n * </ul>\n *\n * Into:\n * <div>\n *  <li>item</li>\n *  <div data-node-type=\"blockGroup\">\n *      <ul>\n *          <li>...</li>\n *          <li>...</li>\n *      </ul>\n *  </div>\n * </div>\n *\n * This resulting format is parsed\n */\nfunction createGroups(element: HTMLElement) {\n  element.querySelectorAll(\"li + ul, li + ol\").forEach((list) => {\n    const listItem = list.previousElementSibling as HTMLElement;\n    const blockContainer = document.createElement(\"div\");\n\n    listItem.insertAdjacentElement(\"afterend\", blockContainer);\n    blockContainer.append(listItem);\n\n    const blockGroup = document.createElement(\"div\");\n    blockGroup.setAttribute(\"data-node-type\", \"blockGroup\");\n    blockContainer.append(blockGroup);\n\n    while (\n      blockContainer.nextElementSibling?.nodeName === \"UL\" ||\n      blockContainer.nextElementSibling?.nodeName === \"OL\"\n    ) {\n      blockGroup.append(blockContainer.nextElementSibling);\n    }\n  });\n}\n\n// prevent XSS, similar to https://github.com/ProseMirror/prosemirror-view/blob/1251b2b412656a2a06263e4187574beb43651273/src/clipboard.ts#L204\n// https://github.com/TypeCellOS/BlockNote/issues/601\nlet _detachedDoc: Document | null = null;\nfunction detachedDoc() {\n  return (\n    _detachedDoc ||\n    (_detachedDoc = document.implementation.createHTMLDocument(\"title\"))\n  );\n}\n\nexport function nestedListsToBlockNoteStructure(\n  elementOrHTML: HTMLElement | string,\n) {\n  if (typeof elementOrHTML === \"string\") {\n    const element = detachedDoc().createElement(\"div\");\n    element.innerHTML = elementOrHTML;\n    elementOrHTML = element;\n  }\n  liftNestedListsToParent(elementOrHTML);\n  createGroups(elementOrHTML);\n  return elementOrHTML;\n}\n","import { DOMParser, Schema } from \"prosemirror-model\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\n\nimport { Block } from \"../../../blocks/defaultBlocks.js\";\nimport { nodeToBlock } from \"../../nodeConversions/nodeToBlock.js\";\nimport { nestedListsToBlockNoteStructure } from \"./util/nestedLists.js\";\nexport async function HTMLToBlocks<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(html: string, pmSchema: Schema): Promise<Block<BSchema, I, S>[]> {\n  const htmlNode = nestedListsToBlockNoteStructure(html);\n  const parser = DOMParser.fromSchema(pmSchema);\n\n  // Other approach might be to use\n  // const doc = pmSchema.nodes[\"doc\"].createAndFill()!;\n  // and context: doc.resolve(3),\n\n  const parentNode = parser.parse(htmlNode, {\n    topNode: pmSchema.nodes[\"blockGroup\"].create(),\n  });\n\n  const blocks: Block<BSchema, I, S>[] = [];\n\n  for (let i = 0; i < parentNode.childCount; i++) {\n    blocks.push(nodeToBlock(parentNode.child(i), pmSchema));\n  }\n\n  return blocks;\n}\n","import { Schema } from \"prosemirror-model\";\n\nimport { Block } from \"../../../blocks/defaultBlocks.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { initializeESMDependencies } from \"../../../util/esmDependencies.js\";\nimport { HTMLToBlocks } from \"../html/parseHTML.js\";\n\n// modified version of https://github.com/syntax-tree/mdast-util-to-hast/blob/main/lib/handlers/code.js\n// that outputs a data-language attribute instead of a CSS class (e.g.: language-typescript)\nfunction code(state: any, node: any) {\n  const value = node.value ? node.value : \"\";\n  /** @type {Properties} */\n  const properties: any = {};\n\n  if (node.lang) {\n    // changed line\n    properties[\"data-language\"] = node.lang;\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result: any = {\n    type: \"element\",\n    tagName: \"code\",\n    properties,\n    children: [{ type: \"text\", value }],\n  };\n\n  if (node.meta) {\n    result.data = { meta: node.meta };\n  }\n\n  state.patch(node, result);\n  result = state.applyData(node, result);\n\n  // Create `<pre>`.\n  result = {\n    type: \"element\",\n    tagName: \"pre\",\n    properties: {},\n    children: [result],\n  };\n  state.patch(node, result);\n  return result;\n}\n\nexport async function markdownToHTML(markdown: string): Promise<string> {\n  const deps = await initializeESMDependencies();\n\n  const htmlString = deps.unified\n    .unified()\n    .use(deps.remarkParse.default)\n    .use(deps.remarkGfm.default)\n    .use(deps.remarkRehype.default, {\n      handlers: {\n        ...(deps.remarkRehype.defaultHandlers as any),\n        code,\n      },\n    })\n    .use(deps.rehypeStringify.default)\n    .processSync(markdown);\n\n  return htmlString.value as string;\n}\n\nexport async function markdownToBlocks<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(markdown: string, pmSchema: Schema): Promise<Block<BSchema, I, S>[]> {\n  const htmlString = await markdownToHTML(markdown);\n\n  return HTMLToBlocks(htmlString, pmSchema);\n}\n","export const acceptedMIMETypes = [\n  \"vscode-editor-data\",\n  \"blocknote/html\",\n  \"text/markdown\",\n  \"text/html\",\n  \"text/plain\",\n  \"Files\",\n] as const;\n","import { Block, PartialBlock } from \"../../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../../editor/BlockNoteEditor\";\nimport {\n  BlockSchema,\n  FileBlockConfig,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { getNearestBlockPos } from \"../../getBlockInfoFromPos.js\";\nimport { acceptedMIMETypes } from \"./acceptedMIMETypes.js\";\n\nfunction checkFileExtensionsMatch(\n  fileExtension1: string,\n  fileExtension2: string,\n) {\n  if (!fileExtension1.startsWith(\".\") || !fileExtension2.startsWith(\".\")) {\n    throw new Error(`The strings provided are not valid file extensions.`);\n  }\n\n  return fileExtension1 === fileExtension2;\n}\n\nfunction checkMIMETypesMatch(mimeType1: string, mimeType2: string) {\n  const types1 = mimeType1.split(\"/\");\n  const types2 = mimeType2.split(\"/\");\n\n  if (types1.length !== 2) {\n    throw new Error(`The string ${mimeType1} is not a valid MIME type.`);\n  }\n  if (types2.length !== 2) {\n    throw new Error(`The string ${mimeType2} is not a valid MIME type.`);\n  }\n\n  if (types1[1] === \"*\" || types2[1] === \"*\") {\n    return types1[0] === types2[0];\n  }\n  if (types1[0] === \"*\" || types2[0] === \"*\") {\n    return types1[1] === types2[1];\n  }\n\n  return types1[0] === types2[0] && types1[1] === types2[1];\n}\n\nfunction insertOrUpdateBlock<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  referenceBlock: Block<BSchema, I, S>,\n  newBlock: PartialBlock<BSchema, I, S>,\n  placement: \"before\" | \"after\" = \"after\",\n) {\n  let insertedBlockId: string | undefined;\n\n  if (\n    Array.isArray(referenceBlock.content) &&\n    referenceBlock.content.length === 0\n  ) {\n    insertedBlockId = editor.updateBlock(referenceBlock, newBlock).id;\n  } else {\n    insertedBlockId = editor.insertBlocks(\n      [newBlock],\n      referenceBlock,\n      placement,\n    )[0].id;\n  }\n\n  return insertedBlockId;\n}\n\nexport async function handleFileInsertion<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(event: DragEvent | ClipboardEvent, editor: BlockNoteEditor<BSchema, I, S>) {\n  if (!editor.uploadFile) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"Attempted ot insert file, but uploadFile is not set in the BlockNote editor options\",\n    );\n    return;\n  }\n\n  const dataTransfer =\n    \"dataTransfer\" in event ? event.dataTransfer : event.clipboardData;\n  if (dataTransfer === null) {\n    return;\n  }\n\n  let format: (typeof acceptedMIMETypes)[number] | null = null;\n  for (const mimeType of acceptedMIMETypes) {\n    if (dataTransfer.types.includes(mimeType)) {\n      format = mimeType;\n      break;\n    }\n  }\n  if (format !== \"Files\") {\n    return;\n  }\n\n  const items = dataTransfer.items;\n  if (!items) {\n    return;\n  }\n\n  event.preventDefault();\n\n  const fileBlockConfigs = Object.values(editor.schema.blockSchema).filter(\n    (blockConfig) => blockConfig.isFileBlock,\n  ) as FileBlockConfig[];\n\n  for (let i = 0; i < items.length; i++) {\n    // Gets file block corresponding to MIME type.\n    let fileBlockType = \"file\";\n    for (const fileBlockConfig of fileBlockConfigs) {\n      for (const mimeType of fileBlockConfig.fileBlockAccept || []) {\n        const isFileExtension = mimeType.startsWith(\".\");\n        const file = items[i].getAsFile();\n\n        if (file) {\n          if (\n            (!isFileExtension &&\n              file.type &&\n              checkMIMETypesMatch(items[i].type, mimeType)) ||\n            (isFileExtension &&\n              checkFileExtensionsMatch(\n                \".\" + file.name.split(\".\").pop(),\n                mimeType,\n              ))\n          ) {\n            fileBlockType = fileBlockConfig.type;\n            break;\n          }\n        }\n      }\n    }\n\n    const file = items[i].getAsFile();\n    if (file) {\n      const fileBlock = {\n        type: fileBlockType,\n        props: {\n          name: file.name,\n        },\n      } as PartialBlock<BSchema, I, S>;\n\n      let insertedBlockId: string | undefined = undefined;\n\n      if (event.type === \"paste\") {\n        const currentBlock = editor.getTextCursorPosition().block;\n        insertedBlockId = insertOrUpdateBlock(editor, currentBlock, fileBlock);\n      } else if (event.type === \"drop\") {\n        const coords = {\n          left: (event as DragEvent).clientX,\n          top: (event as DragEvent).clientY,\n        };\n\n        const pos = editor.prosemirrorView?.posAtCoords(coords);\n\n        if (!pos) {\n          return;\n        }\n\n        insertedBlockId = editor.transact((tr) => {\n          const posInfo = getNearestBlockPos(tr.doc, pos.pos);\n          const blockElement = editor.prosemirrorView?.dom.querySelector(\n            `[data-id=\"${posInfo.node.attrs.id}\"]`,\n          );\n\n          const blockRect = blockElement?.getBoundingClientRect();\n\n          return insertOrUpdateBlock(\n            editor,\n            editor.getBlock(posInfo.node.attrs.id)!,\n            fileBlock,\n            blockRect && (blockRect.top + blockRect.bottom) / 2 > coords.top\n              ? \"before\"\n              : \"after\",\n          );\n        });\n      } else {\n        return;\n      }\n\n      const updateData = await editor.uploadFile(file, insertedBlockId);\n\n      const updatedFileBlock =\n        typeof updateData === \"string\"\n          ? ({\n              props: {\n                url: updateData,\n              },\n            } as PartialBlock<BSchema, I, S>)\n          : { ...updateData };\n\n      editor.updateBlock(insertedBlockId, updatedFileBlock);\n    }\n  }\n}\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\n\nimport type { BlockNoteEditor } from \"../../../editor/BlockNoteEditor.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { acceptedMIMETypes } from \"./acceptedMIMETypes.js\";\nimport { handleFileInsertion } from \"./handleFileInsertion.js\";\n\nexport const createDropFileExtension = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n) =>\n  Extension.create<{ editor: BlockNoteEditor<BSchema, I, S> }, undefined>({\n    name: \"dropFile\",\n    addProseMirrorPlugins() {\n      return [\n        new Plugin({\n          props: {\n            handleDOMEvents: {\n              drop(_view, event) {\n                if (!editor.isEditable) {\n                  return;\n                }\n\n                let format: (typeof acceptedMIMETypes)[number] | null = null;\n                for (const mimeType of acceptedMIMETypes) {\n                  if (event.dataTransfer!.types.includes(mimeType)) {\n                    format = mimeType;\n                    break;\n                  }\n                }\n                if (format === null) {\n                  return true;\n                }\n\n                if (format === \"Files\") {\n                  handleFileInsertion(event, editor);\n                  return true;\n                }\n\n                return false;\n              },\n            },\n          },\n        }),\n      ];\n    },\n  });\n","// Headings H1-H6.\nconst h1 = /(^|\\n) {0,3}#{1,6} {1,8}[^\\n]{1,64}\\r?\\n\\r?\\n\\s{0,32}\\S/;\n\n// Bold, italic, underline, strikethrough, highlight.\nconst bold =\n  /(_|__|\\*|\\*\\*|~~|==|\\+\\+)(?!\\s)(?:[^\\s](?:.{0,62}[^\\s])?|\\S)(?=\\1)/;\n\n// Basic inline link (also captures images).\nconst link = /\\[[^\\]]{1,128}\\]\\(https?:\\/\\/\\S{1,999}\\)/;\n\n// Inline code.\nconst code = /(?:\\s|^)`(?!\\s)(?:[^\\s`](?:[^`]{0,46}[^\\s`])?|[^\\s`])`([^\\w]|$)/;\n\n// Unordered list.\nconst ul = /(?:^|\\n)\\s{0,5}-\\s{1}[^\\n]+\\n\\s{0,15}-\\s/;\n\n// Ordered list.\nconst ol = /(?:^|\\n)\\s{0,5}\\d+\\.\\s{1}[^\\n]+\\n\\s{0,15}\\d+\\.\\s/;\n\n// Horizontal rule.\nconst hr = /\\n{2} {0,3}-{2,48}\\n{2}/;\n\n// Fenced code block.\nconst fences =\n  /(?:\\n|^)(```|~~~|\\$\\$)(?!`|~)[^\\s]{0,64} {0,64}[^\\n]{0,64}\\n[\\s\\S]{0,9999}?\\s*\\1 {0,64}(?:\\n+|$)/;\n\n// Classical underlined H1 and H2 headings.\nconst title = /(?:\\n|^)(?!\\s)\\w[^\\n]{0,64}\\r?\\n(-|=)\\1{0,64}\\n\\n\\s{0,64}(\\w|$)/;\n\n// Blockquote.\nconst blockquote =\n  /(?:^|(\\r?\\n\\r?\\n))( {0,3}>[^\\n]{1,333}\\n){1,999}($|(\\r?\\n))/;\n\n// Table Header\nconst tableHeader = /^\\s*\\|(.+\\|)+\\s*$/m;\n\n// Table Divider\nconst tableDivider = /^\\s*\\|(\\s*[-:]+[-:]\\s*\\|)+\\s*$/m;\n\n// Table Row\nconst tableRow = /^\\s*\\|(.+\\|)+\\s*$/m;\n\n/**\n * Returns `true` if the source text might be a markdown document.\n *\n * @param src Source text to analyze.\n */\nexport const isMarkdown = (src: string): boolean =>\n  h1.test(src) ||\n  bold.test(src) ||\n  link.test(src) ||\n  code.test(src) ||\n  ul.test(src) ||\n  ol.test(src) ||\n  hr.test(src) ||\n  fences.test(src) ||\n  title.test(src) ||\n  blockquote.test(src) ||\n  tableHeader.test(src) ||\n  tableDivider.test(src) ||\n  tableRow.test(src);\n","import { EditorView } from \"prosemirror-view\";\n\nexport async function handleVSCodePaste(\n  event: ClipboardEvent,\n  view: EditorView,\n) {\n  const { schema } = view.state;\n\n  if (!event.clipboardData) {\n    return false;\n  }\n\n  const text = event.clipboardData!.getData(\"text/plain\");\n\n  if (!text) {\n    return false;\n  }\n\n  if (!schema.nodes.codeBlock) {\n    view.pasteText(text);\n    return true;\n  }\n\n  const vscode = event.clipboardData!.getData(\"vscode-editor-data\");\n  const vscodeData = vscode ? JSON.parse(vscode) : undefined;\n  const language = vscodeData?.mode;\n\n  if (!language) {\n    return false;\n  }\n\n  // strip carriage return chars from text pasted as code\n  // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd\n  view.pasteHTML(\n    `<pre><code class=\"language-${language}\">${text.replace(\n      /\\r\\n?/g,\n      \"\\n\",\n    )}</code></pre>`,\n  );\n\n  return true;\n}\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin } from \"prosemirror-state\";\n\nimport type {\n  BlockNoteEditor,\n  BlockNoteEditorOptions,\n} from \"../../../editor/BlockNoteEditor\";\nimport { isMarkdown } from \"../../parsers/markdown/detectMarkdown.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { acceptedMIMETypes } from \"./acceptedMIMETypes.js\";\nimport { handleFileInsertion } from \"./handleFileInsertion.js\";\nimport { handleVSCodePaste } from \"./handleVSCodePaste.js\";\n\nfunction defaultPasteHandler({\n  event,\n  editor,\n  prioritizeMarkdownOverHTML,\n  plainTextAsMarkdown,\n}: {\n  event: ClipboardEvent;\n  editor: BlockNoteEditor<any, any, any>;\n  prioritizeMarkdownOverHTML: boolean;\n  plainTextAsMarkdown: boolean;\n}) {\n  // Special case for code blocks, as they do not support any rich text\n  // formatting, so we force pasting plain text.\n  const isInCodeBlock = editor.transact(\n    (tr) =>\n      tr.selection.$from.parent.type.spec.code &&\n      tr.selection.$to.parent.type.spec.code,\n  );\n\n  if (isInCodeBlock) {\n    const data = event.clipboardData?.getData(\"text/plain\");\n\n    if (data) {\n      editor.pasteText(data);\n\n      return true;\n    }\n  }\n\n  let format: (typeof acceptedMIMETypes)[number] | undefined;\n  for (const mimeType of acceptedMIMETypes) {\n    if (event.clipboardData!.types.includes(mimeType)) {\n      format = mimeType;\n      break;\n    }\n  }\n\n  if (!format) {\n    return true;\n  }\n\n  if (format === \"vscode-editor-data\") {\n    handleVSCodePaste(event, editor.prosemirrorView!);\n    return true;\n  }\n\n  if (format === \"Files\") {\n    handleFileInsertion(event, editor);\n    return true;\n  }\n\n  const data = event.clipboardData!.getData(format);\n\n  if (format === \"blocknote/html\") {\n    // Is blocknote/html, so no need to convert it\n    editor.pasteHTML(data, true);\n    return true;\n  }\n\n  if (format === \"text/markdown\") {\n    editor.pasteMarkdown(data);\n    return true;\n  }\n\n  if (prioritizeMarkdownOverHTML) {\n    // Use plain text instead of HTML if it looks like Markdown\n    const plainText = event.clipboardData!.getData(\"text/plain\");\n\n    if (isMarkdown(plainText)) {\n      editor.pasteMarkdown(plainText);\n      return true;\n    }\n  }\n\n  if (format === \"text/html\") {\n    editor.pasteHTML(data);\n    return true;\n  }\n\n  if (plainTextAsMarkdown) {\n    editor.pasteMarkdown(data);\n    return true;\n  }\n\n  editor.pasteText(data);\n  return true;\n}\n\nexport const createPasteFromClipboardExtension = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  pasteHandler: Exclude<\n    BlockNoteEditorOptions<any, any, any>[\"pasteHandler\"],\n    undefined\n  >,\n) =>\n  Extension.create({\n    name: \"pasteFromClipboard\",\n    addProseMirrorPlugins() {\n      return [\n        new Plugin({\n          props: {\n            handleDOMEvents: {\n              paste(_view, event) {\n                event.preventDefault();\n\n                if (!editor.isEditable) {\n                  return;\n                }\n\n                return pasteHandler({\n                  event,\n                  editor,\n                  defaultPasteHandler: ({\n                    prioritizeMarkdownOverHTML = true,\n                    plainTextAsMarkdown = true,\n                  } = {}) => {\n                    return defaultPasteHandler({\n                      event,\n                      editor,\n                      prioritizeMarkdownOverHTML,\n                      plainTextAsMarkdown,\n                    });\n                  },\n                });\n              },\n            },\n          },\n        }),\n      ];\n    },\n  });\n","import { Fragment } from \"@tiptap/pm/model\";\nimport {\n  BlockNoDefaults,\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\nimport { getPmSchema } from \"../pmUtil.js\";\nimport { nodeToBlock } from \"./nodeToBlock.js\";\n\n/**\n * Converts all Blocks within a fragment to BlockNote blocks.\n */\nexport function fragmentToBlocks<\n  B extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(fragment: Fragment) {\n  // first convert selection to blocknote-style blocks, and then\n  // pass these to the exporter\n  const blocks: BlockNoDefaults<B, I, S>[] = [];\n  fragment.descendants((node) => {\n    const pmSchema = getPmSchema(node);\n    if (node.type.name === \"blockContainer\") {\n      if (node.firstChild?.type.name === \"blockGroup\") {\n        // selection started within a block group\n        // in this case the fragment starts with:\n        // <blockContainer>\n        //   <blockGroup>\n        //     <blockContainer ... />\n        //     <blockContainer ... />\n        //   </blockGroup>\n        // </blockContainer>\n        //\n        // instead of:\n        // <blockContainer>\n        //   <blockContent ... />\n        //   <blockGroup>\n        //     <blockContainer ... />\n        //     <blockContainer ... />\n        //   </blockGroup>\n        // </blockContainer>\n        //\n        // so we don't need to serialize this block, just descend into the children of the blockGroup\n        return true;\n      }\n    }\n\n    if (node.type.name === \"columnList\" && node.childCount === 1) {\n      // column lists with a single column should be flattened (not the entire column list has been selected)\n      node.firstChild?.forEach((child) => {\n        blocks.push(nodeToBlock(child, pmSchema));\n      });\n      return false;\n    }\n\n    if (node.type.isInGroup(\"bnBlock\")) {\n      blocks.push(nodeToBlock(node, pmSchema));\n      // don't descend into children, as they're already included in the block returned by nodeToBlock\n      return false;\n    }\n    return true;\n  });\n  return blocks;\n}\n","import { Extension } from \"@tiptap/core\";\nimport { Fragment, Node } from \"prosemirror-model\";\nimport { NodeSelection, Plugin } from \"prosemirror-state\";\nimport { CellSelection } from \"prosemirror-tables\";\nimport type { EditorView } from \"prosemirror-view\";\n\nimport type { BlockNoteEditor } from \"../../../editor/BlockNoteEditor.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../../schema/index.js\";\nimport { createExternalHTMLExporter } from \"../../exporters/html/externalHTMLExporter.js\";\nimport { cleanHTMLToMarkdown } from \"../../exporters/markdown/markdownExporter.js\";\nimport { fragmentToBlocks } from \"../../nodeConversions/fragmentToBlocks.js\";\nimport {\n  contentNodeToInlineContent,\n  contentNodeToTableContent,\n} from \"../../nodeConversions/nodeToBlock.js\";\n\nfunction fragmentToExternalHTML<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  view: EditorView,\n  selectedFragment: Fragment,\n  editor: BlockNoteEditor<BSchema, I, S>,\n) {\n  let isWithinBlockContent = false;\n  const isWithinTable = view.state.selection instanceof CellSelection;\n\n  if (!isWithinTable) {\n    // Checks whether block ancestry should be included when creating external\n    // HTML. If the selection is within a block content node, the block ancestry\n    // is excluded as we only care about the inline content.\n    const fragmentWithoutParents = view.state.doc.slice(\n      view.state.selection.from,\n      view.state.selection.to,\n      false,\n    ).content;\n\n    const children = [];\n    for (let i = 0; i < fragmentWithoutParents.childCount; i++) {\n      children.push(fragmentWithoutParents.child(i));\n    }\n\n    isWithinBlockContent =\n      children.find(\n        (child) =>\n          child.type.isInGroup(\"bnBlock\") ||\n          child.type.name === \"blockGroup\" ||\n          child.type.spec.group === \"blockContent\",\n      ) === undefined;\n    if (isWithinBlockContent) {\n      selectedFragment = fragmentWithoutParents;\n    }\n  }\n\n  let externalHTML: string;\n\n  const externalHTMLExporter = createExternalHTMLExporter(\n    view.state.schema,\n    editor,\n  );\n\n  if (isWithinTable) {\n    if (selectedFragment.firstChild?.type.name === \"table\") {\n      // contentNodeToTableContent expects the fragment of the content of a table, not the table node itself\n      // but cellselection.content() returns the table node itself if all cells and columns are selected\n      selectedFragment = selectedFragment.firstChild.content;\n    }\n\n    // first convert selection to blocknote-style table content, and then\n    // pass this to the exporter\n    const ic = contentNodeToTableContent(\n      selectedFragment as any,\n      editor.schema.inlineContentSchema,\n      editor.schema.styleSchema,\n    );\n\n    // Wrap in table to ensure correct parsing by spreadsheet applications\n    externalHTML = `<table>${externalHTMLExporter.exportInlineContent(\n      ic as any,\n      {},\n    )}</table>`;\n  } else if (isWithinBlockContent) {\n    // first convert selection to blocknote-style inline content, and then\n    // pass this to the exporter\n    const ic = contentNodeToInlineContent(\n      selectedFragment as any,\n      editor.schema.inlineContentSchema,\n      editor.schema.styleSchema,\n    );\n    externalHTML = externalHTMLExporter.exportInlineContent(ic, {});\n  } else {\n    const blocks = fragmentToBlocks(selectedFragment);\n    externalHTML = externalHTMLExporter.exportBlocks(blocks, {});\n  }\n  return externalHTML;\n}\n\nexport function selectedFragmentToHTML<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  view: EditorView,\n  editor: BlockNoteEditor<BSchema, I, S>,\n): {\n  clipboardHTML: string;\n  externalHTML: string;\n  markdown: string;\n} {\n  // Checks if a `blockContent` node is being copied and expands\n  // the selection to the parent `blockContainer` node. This is\n  // for the use-case in which only a block without content is\n  // selected, e.g. an image block.\n  if (\n    \"node\" in view.state.selection &&\n    (view.state.selection.node as Node).type.spec.group === \"blockContent\"\n  ) {\n    editor.transact((tr) =>\n      tr.setSelection(\n        new NodeSelection(tr.doc.resolve(view.state.selection.from - 1)),\n      ),\n    );\n  }\n\n  // Uses default ProseMirror clipboard serialization.\n  const clipboardHTML: string = view.serializeForClipboard(\n    view.state.selection.content(),\n  ).dom.innerHTML;\n\n  const selectedFragment = view.state.selection.content().content;\n\n  const externalHTML = fragmentToExternalHTML<BSchema, I, S>(\n    view,\n    selectedFragment,\n    editor,\n  );\n\n  const markdown = cleanHTMLToMarkdown(externalHTML);\n\n  return { clipboardHTML, externalHTML, markdown };\n}\n\nconst checkIfSelectionInNonEditableBlock = () => {\n  // Let browser handle event if selection is empty (nothing\n  // happens).\n  const selection = window.getSelection();\n  if (!selection || selection.isCollapsed) {\n    return true;\n  }\n\n  // Let browser handle event if it's within a non-editable\n  // \"island\". This means it's in selectable content within a\n  // non-editable block. We only need to check one node as it's\n  // not possible for the browser selection to start in an\n  // editable block and end in a non-editable one.\n  let node = selection.focusNode;\n  while (node) {\n    if (\n      node instanceof HTMLElement &&\n      node.getAttribute(\"contenteditable\") === \"false\"\n    ) {\n      return true;\n    }\n\n    node = node.parentElement;\n  }\n\n  return false;\n};\n\nconst copyToClipboard = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  view: EditorView,\n  event: ClipboardEvent,\n) => {\n  // Stops the default browser copy behaviour.\n  event.preventDefault();\n  event.clipboardData!.clearData();\n\n  const { clipboardHTML, externalHTML, markdown } = selectedFragmentToHTML(\n    view,\n    editor,\n  );\n\n  // TODO: Writing to other MIME types not working in Safari for\n  //  some reason.\n  event.clipboardData!.setData(\"blocknote/html\", clipboardHTML);\n  event.clipboardData!.setData(\"text/html\", externalHTML);\n  event.clipboardData!.setData(\"text/plain\", markdown);\n};\n\nexport const createCopyToClipboardExtension = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n) =>\n  Extension.create<{ editor: BlockNoteEditor<BSchema, I, S> }, undefined>({\n    name: \"copyToClipboard\",\n    addProseMirrorPlugins() {\n      return [\n        new Plugin({\n          props: {\n            handleDOMEvents: {\n              copy(view, event) {\n                if (checkIfSelectionInNonEditableBlock()) {\n                  return true;\n                }\n\n                copyToClipboard(editor, view, event);\n                // Prevent default PM handler to be called\n                return true;\n              },\n              cut(view, event) {\n                if (checkIfSelectionInNonEditableBlock()) {\n                  return true;\n                }\n\n                copyToClipboard(editor, view, event);\n                if (view.editable) {\n                  view.dispatch(view.state.tr.deleteSelection());\n                }\n                // Prevent default PM handler to be called\n                return true;\n              },\n              // This is for the use-case in which only a block without content\n              // is selected, e.g. an image block, and dragged (not using the\n              // drag handle).\n              dragstart(view, event) {\n                // Checks if a `NodeSelection` is active.\n                if (!(\"node\" in view.state.selection)) {\n                  return;\n                }\n\n                // Checks if a `blockContent` node is being dragged.\n                if (\n                  (view.state.selection.node as Node).type.spec.group !==\n                  \"blockContent\"\n                ) {\n                  return;\n                }\n\n                // Expands the selection to the parent `blockContainer` node.\n                editor.transact((tr) =>\n                  tr.setSelection(\n                    new NodeSelection(\n                      tr.doc.resolve(view.state.selection.from - 1),\n                    ),\n                  ),\n                );\n\n                // Stops the default browser drag start behaviour.\n                event.preventDefault();\n                event.dataTransfer!.clearData();\n\n                const { clipboardHTML, externalHTML, markdown } =\n                  selectedFragmentToHTML(view, editor);\n\n                // TODO: Writing to other MIME types not working in Safari for\n                //  some reason.\n                event.dataTransfer!.setData(\"blocknote/html\", clipboardHTML);\n                event.dataTransfer!.setData(\"text/html\", externalHTML);\n                event.dataTransfer!.setData(\"text/plain\", markdown);\n\n                // Prevent default PM handler to be called\n                return true;\n              },\n            },\n          },\n        }),\n      ];\n    },\n  });\n","import { Extension } from \"@tiptap/core\";\nimport { defaultProps } from \"../../blocks/defaultProps.js\";\n\nexport const BackgroundColorExtension = Extension.create({\n  name: \"blockBackgroundColor\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\", \"tableCell\", \"tableHeader\"],\n        attributes: {\n          backgroundColor: {\n            default: defaultProps.backgroundColor.default,\n            parseHTML: (element) =>\n              element.hasAttribute(\"data-background-color\")\n                ? element.getAttribute(\"data-background-color\")\n                : defaultProps.backgroundColor.default,\n            renderHTML: (attributes) => {\n              if (\n                attributes.backgroundColor ===\n                defaultProps.backgroundColor.default\n              ) {\n                return {};\n              }\n              return {\n                \"data-background-color\": attributes.backgroundColor,\n              };\n            },\n          },\n        },\n      },\n    ];\n  },\n});\n","// from https://raw.githubusercontent.com/ueberdosis/tiptap/develop/packages/core/src/EventEmitter.ts (MIT)\n\ntype StringKeyOf<T> = Extract<keyof T, string>;\ntype CallbackType<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = T[EventName] extends any[] ? T[EventName] : [T[EventName]];\ntype CallbackFunction<\n  T extends Record<string, any>,\n  EventName extends StringKeyOf<T>,\n> = (...props: CallbackType<T, EventName>) => any;\n\nexport class EventEmitter<T extends Record<string, any>> {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  private callbacks: { [key: string]: Function[] } = {};\n\n  public on<EventName extends StringKeyOf<T>>(\n    event: EventName,\n    fn: CallbackFunction<T, EventName>,\n  ) {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n\n    this.callbacks[event].push(fn);\n\n    return () => this.off(event, fn);\n  }\n\n  protected emit<EventName extends StringKeyOf<T>>(\n    event: EventName,\n    ...args: CallbackType<T, EventName>\n  ) {\n    const callbacks = this.callbacks[event];\n\n    if (callbacks) {\n      callbacks.forEach((callback) => callback.apply(this, args));\n    }\n  }\n\n  public off<EventName extends StringKeyOf<T>>(\n    event: EventName,\n    fn?: CallbackFunction<T, EventName>,\n  ) {\n    const callbacks = this.callbacks[event];\n\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter((callback) => callback !== fn);\n      } else {\n        delete this.callbacks[event];\n      }\n    }\n  }\n\n  protected removeAllListeners(): void {\n    this.callbacks = {};\n  }\n}\n","import { Plugin } from \"prosemirror-state\";\nimport { EventEmitter } from \"../util/EventEmitter.js\";\n\nexport abstract class BlockNoteExtension<\n  TEvent extends Record<string, any> = any,\n> extends EventEmitter<TEvent> {\n  public static key(): string {\n    throw new Error(\"You must implement the key method in your extension\");\n  }\n\n  protected addProsemirrorPlugin(plugin: Plugin) {\n    this.plugins.push(plugin);\n  }\n\n  public readonly plugins: Plugin[] = [];\n  public get priority(): number | undefined {\n    return undefined;\n  }\n\n  // eslint-disable-next-line\n  constructor(..._args: any[]) {\n    super();\n    // Allow subclasses to have constructors with parameters\n    // without this, we can't easily implement BlockNoteEditor.extension(MyExtension) pattern\n  }\n}\n","import { Plugin, Transaction } from \"prosemirror-state\";\nimport { getBlocksChangedByTransaction } from \"../../api/nodeUtil.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\nimport { BlocksChanged } from \"../../index.js\";\n\n/**\n * This plugin can filter transactions before they are applied to the editor, but with a higher-level API than `filterTransaction` from prosemirror.\n */\nexport class BlockChangePlugin extends BlockNoteExtension {\n  public static key() {\n    return \"blockChange\";\n  }\n\n  private beforeChangeCallbacks: ((context: {\n    getChanges: () => BlocksChanged<any, any, any>;\n    tr: Transaction;\n  }) => boolean | void)[] = [];\n\n  constructor() {\n    super();\n\n    this.addProsemirrorPlugin(\n      new Plugin({\n        filterTransaction: (tr) => {\n          let changes:\n            | ReturnType<typeof getBlocksChangedByTransaction>\n            | undefined = undefined;\n\n          return this.beforeChangeCallbacks.reduce((acc, cb) => {\n            if (acc === false) {\n              // We only care that we hit a `false` result, so we can stop iterating.\n              return acc;\n            }\n            return (\n              cb({\n                getChanges() {\n                  if (changes) {\n                    return changes;\n                  }\n                  changes = getBlocksChangedByTransaction(tr);\n                  return changes;\n                },\n                tr,\n              }) !== false\n            );\n          }, true);\n        },\n      }),\n    );\n  }\n\n  public subscribe(\n    callback: (context: {\n      getChanges: () => BlocksChanged<any, any, any>;\n      tr: Transaction;\n    }) => boolean | void,\n  ) {\n    this.beforeChangeCallbacks.push(callback);\n\n    return () => {\n      this.beforeChangeCallbacks = this.beforeChangeCallbacks.filter(\n        (cb) => cb !== callback,\n      );\n    };\n  }\n}\n","import { defaultSelectionBuilder, yCursorPlugin } from \"y-prosemirror\";\nimport { Awareness } from \"y-protocols/awareness.js\";\nimport * as Y from \"yjs\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\n\nexport type CollaborationUser = {\n  name: string;\n  color: string;\n  [key: string]: string;\n};\n\nexport class CursorPlugin extends BlockNoteExtension {\n  public static key() {\n    return \"yCursorPlugin\";\n  }\n\n  private provider: { awareness: Awareness };\n  private recentlyUpdatedCursors: Map<\n    number,\n    { element: HTMLElement; hideTimeout: NodeJS.Timeout | undefined }\n  >;\n  constructor(\n    private collaboration: {\n      fragment: Y.XmlFragment;\n      user: CollaborationUser;\n      provider: { awareness: Awareness };\n      renderCursor?: (user: CollaborationUser) => HTMLElement;\n      showCursorLabels?: \"always\" | \"activity\";\n    },\n  ) {\n    super();\n    this.provider = collaboration.provider;\n    this.recentlyUpdatedCursors = new Map();\n\n    this.provider.awareness.setLocalStateField(\"user\", collaboration.user);\n\n    if (collaboration.showCursorLabels !== \"always\") {\n      this.provider.awareness.on(\n        \"change\",\n        ({\n          updated,\n        }: {\n          added: Array<number>;\n          updated: Array<number>;\n          removed: Array<number>;\n        }) => {\n          for (const clientID of updated) {\n            const cursor = this.recentlyUpdatedCursors.get(clientID);\n\n            if (cursor) {\n              cursor.element.setAttribute(\"data-active\", \"\");\n\n              if (cursor.hideTimeout) {\n                clearTimeout(cursor.hideTimeout);\n              }\n\n              this.recentlyUpdatedCursors.set(clientID, {\n                element: cursor.element,\n                hideTimeout: setTimeout(() => {\n                  cursor.element.removeAttribute(\"data-active\");\n                }, 2000),\n              });\n            }\n          }\n        },\n      );\n    }\n\n    this.addProsemirrorPlugin(\n      yCursorPlugin(this.provider.awareness, {\n        selectionBuilder: defaultSelectionBuilder,\n        cursorBuilder: this.renderCursor,\n      }),\n    );\n  }\n\n  public get priority() {\n    return 999;\n  }\n\n  private renderCursor = (user: CollaborationUser, clientID: number) => {\n    let cursorData = this.recentlyUpdatedCursors.get(clientID);\n\n    if (!cursorData) {\n      const cursorElement = (\n        this.collaboration.renderCursor ?? CursorPlugin.defaultCursorRender\n      )(user);\n\n      if (this.collaboration.showCursorLabels !== \"always\") {\n        cursorElement.addEventListener(\"mouseenter\", () => {\n          const cursor = this.recentlyUpdatedCursors.get(clientID)!;\n          cursor.element.setAttribute(\"data-active\", \"\");\n\n          if (cursor.hideTimeout) {\n            clearTimeout(cursor.hideTimeout);\n            this.recentlyUpdatedCursors.set(clientID, {\n              element: cursor.element,\n              hideTimeout: undefined,\n            });\n          }\n        });\n\n        cursorElement.addEventListener(\"mouseleave\", () => {\n          const cursor = this.recentlyUpdatedCursors.get(clientID)!;\n\n          this.recentlyUpdatedCursors.set(clientID, {\n            element: cursor.element,\n            hideTimeout: setTimeout(() => {\n              cursor.element.removeAttribute(\"data-active\");\n            }, 2000),\n          });\n        });\n      }\n\n      cursorData = {\n        element: cursorElement,\n        hideTimeout: undefined,\n      };\n\n      this.recentlyUpdatedCursors.set(clientID, cursorData);\n    }\n\n    return cursorData.element;\n  };\n\n  public updateUser = (user: {\n    name: string;\n    color: string;\n    [key: string]: string;\n  }) => {\n    this.provider.awareness.setLocalStateField(\"user\", user);\n  };\n\n  /**\n   * Determine whether the foreground color should be white or black based on a provided background color\n   * Inspired by: https://stackoverflow.com/a/3943023\n   *\n   */\n  public static isDarkColor(bgColor: string): boolean {\n    const color = bgColor.charAt(0) === \"#\" ? bgColor.substring(1, 7) : bgColor;\n    const r = parseInt(color.substring(0, 2), 16); // hexToR\n    const g = parseInt(color.substring(2, 4), 16); // hexToG\n    const b = parseInt(color.substring(4, 6), 16); // hexToB\n    const uicolors = [r / 255, g / 255, b / 255];\n    const c = uicolors.map((col) => {\n      if (col <= 0.03928) {\n        return col / 12.92;\n      }\n      return Math.pow((col + 0.055) / 1.055, 2.4);\n    });\n    const L = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];\n    return L <= 0.179;\n  }\n\n  public static defaultCursorRender = (user: CollaborationUser) => {\n    const cursorElement = document.createElement(\"span\");\n\n    cursorElement.classList.add(\"bn-collaboration-cursor__base\");\n\n    const caretElement = document.createElement(\"span\");\n    caretElement.setAttribute(\"contentedEditable\", \"false\");\n    caretElement.classList.add(\"bn-collaboration-cursor__caret\");\n    caretElement.setAttribute(\n      \"style\",\n      `background-color: ${user.color}; color: ${\n        CursorPlugin.isDarkColor(user.color) ? \"white\" : \"black\"\n      }`,\n    );\n\n    const labelElement = document.createElement(\"span\");\n\n    labelElement.classList.add(\"bn-collaboration-cursor__label\");\n    labelElement.setAttribute(\n      \"style\",\n      `background-color: ${user.color}; color: ${\n        CursorPlugin.isDarkColor(user.color) ? \"white\" : \"black\"\n      }`,\n    );\n    labelElement.insertBefore(document.createTextNode(user.name), null);\n\n    caretElement.insertBefore(labelElement, null);\n\n    cursorElement.insertBefore(document.createTextNode(\"\\u2060\"), null); // Non-breaking space\n    cursorElement.insertBefore(caretElement, null);\n    cursorElement.insertBefore(document.createTextNode(\"\\u2060\"), null); // Non-breaking space\n\n    return cursorElement;\n  };\n}\n","import { ySyncPlugin } from \"y-prosemirror\";\nimport type * as Y from \"yjs\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\n\nexport class SyncPlugin extends BlockNoteExtension {\n  public static key() {\n    return \"ySyncPlugin\";\n  }\n\n  constructor(fragment: Y.XmlFragment) {\n    super();\n    this.addProsemirrorPlugin(ySyncPlugin(fragment));\n  }\n\n  public get priority() {\n    return 1001;\n  }\n}\n","import { yUndoPlugin } from \"y-prosemirror\";\nimport { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\n\nexport class UndoPlugin extends BlockNoteExtension {\n  public static key() {\n    return \"yUndoPlugin\";\n  }\n\n  constructor({ editor }: { editor: BlockNoteEditor<any, any, any> }) {\n    super();\n    this.addProsemirrorPlugin(yUndoPlugin({ trackedOrigins: [editor] }));\n  }\n\n  public get priority() {\n    return 1000;\n  }\n}\n","import { Mark, mergeAttributes } from \"@tiptap/core\";\n\nexport const CommentMark = Mark.create({\n  name: \"comment\",\n  excludes: \"\",\n  inclusive: false,\n  keepOnSplit: true,\n\n  addAttributes() {\n    // Return an object with attribute configuration\n    return {\n      // orphans are marks that currently don't have an active thread. It could be\n      // that users have resolved the thread. Resolved threads by default are not shown in the document,\n      // but we need to keep the mark (positioning) data so we can still \"revive\" it when the thread is unresolved\n      // or we enter a \"comments\" view that includes resolved threads.\n      orphan: {\n        parseHTML: (element) => !!element.getAttribute(\"data-orphan\"),\n        renderHTML: (attributes) => {\n          return (attributes as { orphan: boolean }).orphan\n            ? {\n                \"data-orphan\": \"true\",\n              }\n            : {};\n        },\n        default: false,\n      },\n      threadId: {\n        parseHTML: (element) => element.getAttribute(\"data-bn-thread-id\"),\n        renderHTML: (attributes) => {\n          return {\n            \"data-bn-thread-id\": (attributes as { threadId: string }).threadId,\n          };\n        },\n        default: \"\",\n      },\n    };\n  },\n\n  renderHTML({ HTMLAttributes }: { HTMLAttributes: Record<string, any> }) {\n    return [\n      \"span\",\n      mergeAttributes(HTMLAttributes, {\n        class: \"bn-thread-mark\",\n      }),\n    ];\n  },\n\n  parseHTML() {\n    return [{ tag: \"span.bn-thread-mark\" }];\n  },\n\n  extendMarkSchema(extension) {\n    if (extension.name === \"comment\") {\n      return {\n        blocknoteIgnore: true,\n      };\n    }\n    return {};\n  },\n});\n","import type { User } from \"../../../comments/index.js\";\nimport { EventEmitter } from \"../../../util/EventEmitter.js\";\n\n/**\n * The `UserStore` is used to retrieve and cache information about users.\n *\n * It does this by calling `resolveUsers` (which is user-defined in the Editor Options)\n * for users that are not yet cached.\n */\nexport class UserStore<U extends User> extends EventEmitter<any> {\n  private userCache: Map<string, U> = new Map();\n\n  // avoid duplicate loads\n  private loadingUsers = new Set<string>();\n\n  public constructor(\n    private readonly resolveUsers: (userIds: string[]) => Promise<U[]>,\n  ) {\n    super();\n  }\n\n  /**\n   * Load information about users based on an array of user ids.\n   */\n  public async loadUsers(userIds: string[]) {\n    const missingUsers = userIds.filter(\n      (id) => !this.userCache.has(id) && !this.loadingUsers.has(id),\n    );\n\n    if (missingUsers.length === 0) {\n      return;\n    }\n\n    for (const id of missingUsers) {\n      this.loadingUsers.add(id);\n    }\n\n    try {\n      const users = await this.resolveUsers(missingUsers);\n      for (const user of users) {\n        this.userCache.set(user.id, user);\n      }\n      this.emit(\"update\", this.userCache);\n    } finally {\n      for (const id of missingUsers) {\n        // delete the users from the loading set\n        // on a next call to `loadUsers` we will either\n        // return the cached user or retry loading the user if the request failed failed\n        this.loadingUsers.delete(id);\n      }\n    }\n  }\n\n  /**\n   * Retrieve information about a user based on their id, if cached.\n   *\n   * The user will have to be loaded via `loadUsers` first\n   */\n  public getUser(userId: string): U | undefined {\n    return this.userCache.get(userId);\n  }\n\n  /**\n   * Subscribe to changes in the user store.\n   *\n   * @param cb - The callback to call when the user store changes.\n   * @returns A function to unsubscribe from the user store.\n   */\n  public subscribe(cb: (users: Map<string, U>) => void): () => void {\n    return this.on(\"update\", cb);\n  }\n}\n","import { Node } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\nimport { getRelativeSelection, ySyncPluginKey } from \"y-prosemirror\";\nimport type {\n  CommentBody,\n  ThreadData,\n  ThreadStore,\n  User,\n} from \"../../comments/index.js\";\nimport { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\nimport { UserStore } from \"./userstore/UserStore.js\";\n\nconst PLUGIN_KEY = new PluginKey(`blocknote-comments`);\nconst SET_SELECTED_THREAD_ID = \"SET_SELECTED_THREAD_ID\";\n\ntype CommentsPluginState = {\n  /**\n   * Decorations to be rendered, specifically to indicate the selected thread\n   */\n  decorations: DecorationSet;\n};\n\n/**\n * Calculate the thread positions from the current document state\n */\nfunction getUpdatedThreadPositions(doc: Node, markType: string) {\n  const threadPositions = new Map<string, { from: number; to: number }>();\n\n  // find all thread marks and store their position + create decoration for selected thread\n  doc.descendants((node, pos) => {\n    node.marks.forEach((mark) => {\n      if (mark.type.name === markType) {\n        const thisThreadId = (mark.attrs as { threadId: string | undefined })\n          .threadId;\n        if (!thisThreadId) {\n          return;\n        }\n        const from = pos;\n        const to = from + node.nodeSize;\n\n        // FloatingThreads component uses \"to\" as the position, so always store the largest \"to\" found\n        // AnchoredThreads component uses \"from\" as the position, so always store the smallest \"from\" found\n        const currentPosition = threadPositions.get(thisThreadId) ?? {\n          from: Infinity,\n          to: 0,\n        };\n        threadPositions.set(thisThreadId, {\n          from: Math.min(from, currentPosition.from),\n          to: Math.max(to, currentPosition.to),\n        });\n      }\n    });\n  });\n  return threadPositions;\n}\n\nexport class CommentsPlugin extends BlockNoteExtension {\n  public static key() {\n    return \"comments\";\n  }\n\n  public readonly userStore: UserStore<User>;\n\n  /**\n   * Whether a comment is currently being composed\n   */\n  private pendingComment = false;\n\n  /**\n   * The currently selected thread id\n   */\n  private selectedThreadId: string | undefined;\n\n  /**\n   * Store the positions of all threads in the document.\n   * this can be used later to implement a floating sidebar\n   */\n  private threadPositions: Map<string, { from: number; to: number }> =\n    new Map();\n\n  private emitStateUpdate() {\n    this.emit(\"update\", {\n      selectedThreadId: this.selectedThreadId,\n      pendingComment: this.pendingComment,\n      threadPositions: this.threadPositions,\n    });\n  }\n\n  /**\n   * when a thread is resolved or deleted, we need to update the marks to reflect the new state\n   */\n  private updateMarksFromThreads = (threads: Map<string, ThreadData>) => {\n    this.editor.transact((tr) => {\n      tr.doc.descendants((node, pos) => {\n        node.marks.forEach((mark) => {\n          if (mark.type.name === this.markType) {\n            const markType = mark.type;\n            const markThreadId = mark.attrs.threadId;\n            const thread = threads.get(markThreadId);\n            const isOrphan = !!(!thread || thread.resolved || thread.deletedAt);\n\n            if (isOrphan !== mark.attrs.orphan) {\n              const trimmedFrom = Math.max(pos, 0);\n              const trimmedTo = Math.min(\n                pos + node.nodeSize,\n                tr.doc.content.size - 1,\n                tr.doc.content.size - 1,\n              );\n              tr.removeMark(trimmedFrom, trimmedTo, mark);\n              tr.addMark(\n                trimmedFrom,\n                trimmedTo,\n                markType.create({\n                  ...mark.attrs,\n                  orphan: isOrphan,\n                }),\n              );\n\n              if (isOrphan && this.selectedThreadId === markThreadId) {\n                // unselect\n                this.selectedThreadId = undefined;\n                this.emitStateUpdate();\n              }\n            }\n          }\n        });\n      });\n    });\n  };\n\n  constructor(\n    private readonly editor: BlockNoteEditor<any, any, any>,\n    public readonly threadStore: ThreadStore,\n    private readonly markType: string,\n  ) {\n    super();\n\n    if (!editor.resolveUsers) {\n      throw new Error(\"resolveUsers is required for comments\");\n    }\n    this.userStore = new UserStore<User>(editor.resolveUsers);\n\n    // Note: Plugins are currently not destroyed when the editor is destroyed.\n    // We should unsubscribe from the threadStore when the editor is destroyed.\n    this.threadStore.subscribe(this.updateMarksFromThreads);\n\n    editor.onCreate(() => {\n      // Need to wait for TipTap editor state to be initialized\n      this.updateMarksFromThreads(this.threadStore.getThreads());\n      editor.onSelectionChange(() => {\n        if (this.pendingComment) {\n          this.pendingComment = false;\n          this.emitStateUpdate();\n        }\n      });\n    });\n\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self = this;\n\n    this.addProsemirrorPlugin(\n      new Plugin<CommentsPluginState>({\n        key: PLUGIN_KEY,\n        state: {\n          init() {\n            return {\n              decorations: DecorationSet.empty,\n            };\n          },\n          apply(tr, state) {\n            const action = tr.getMeta(PLUGIN_KEY);\n\n            if (!tr.docChanged && !action) {\n              return state;\n            }\n\n            // only update threadPositions if the doc changed\n            const threadPositions = tr.docChanged\n              ? getUpdatedThreadPositions(tr.doc, self.markType)\n              : self.threadPositions;\n\n            if (threadPositions.size > 0 || self.threadPositions.size > 0) {\n              // small optimization; don't emit event if threadPositions before / after were both empty\n              self.threadPositions = threadPositions;\n              self.emitStateUpdate();\n            }\n\n            // update decorations if doc or selected thread changed\n            const decorations = [];\n\n            if (self.selectedThreadId) {\n              const selectedThreadPosition = threadPositions.get(\n                self.selectedThreadId,\n              );\n\n              if (selectedThreadPosition) {\n                decorations.push(\n                  Decoration.inline(\n                    selectedThreadPosition.from,\n                    selectedThreadPosition.to,\n                    {\n                      class: \"bn-thread-mark-selected\",\n                    },\n                  ),\n                );\n              }\n            }\n\n            return {\n              decorations: DecorationSet.create(tr.doc, decorations),\n            };\n          },\n        },\n        props: {\n          decorations(state) {\n            return (\n              PLUGIN_KEY.getState(state)?.decorations ?? DecorationSet.empty\n            );\n          },\n          /**\n           * Handle click on a thread mark and mark it as selected\n           */\n          handleClick: (view, pos, event) => {\n            if (event.button !== 0) {\n              return;\n            }\n\n            const node = view.state.doc.nodeAt(pos);\n\n            if (!node) {\n              self.selectThread(undefined);\n              return;\n            }\n\n            const commentMark = node.marks.find(\n              (mark) =>\n                mark.type.name === markType && mark.attrs.orphan !== true,\n            );\n\n            const threadId = commentMark?.attrs.threadId as string | undefined;\n            self.selectThread(threadId, false);\n          },\n        },\n      }),\n    );\n  }\n\n  /**\n   * Subscribe to state updates\n   */\n  public onUpdate(\n    callback: (state: {\n      pendingComment: boolean;\n      selectedThreadId: string | undefined;\n      threadPositions: Map<string, { from: number; to: number }>;\n    }) => void,\n  ) {\n    return this.on(\"update\", callback);\n  }\n\n  /**\n   * Set the selected thread\n   */\n  public selectThread(threadId: string | undefined, scrollToThread = true) {\n    if (this.selectedThreadId === threadId) {\n      return;\n    }\n    this.selectedThreadId = threadId;\n    this.emitStateUpdate();\n    this.editor.transact((tr) =>\n      tr.setMeta(PLUGIN_KEY, {\n        name: SET_SELECTED_THREAD_ID,\n      }),\n    );\n\n    if (threadId && scrollToThread) {\n      const selectedThreadPosition = this.threadPositions.get(threadId);\n\n      if (!selectedThreadPosition) {\n        return;\n      }\n\n      // When a new thread is selected, scrolls the page to its reference text in\n      // the editor.\n      (\n        this.editor.prosemirrorView?.domAtPos(selectedThreadPosition.from)\n          .node as Element | undefined\n      )?.scrollIntoView({\n        behavior: \"smooth\",\n        block: \"center\",\n      });\n    }\n  }\n\n  /**\n   * Start a pending comment (e.g.: when clicking the \"Add comment\" button)\n   */\n  public startPendingComment() {\n    this.pendingComment = true;\n    this.emitStateUpdate();\n  }\n\n  /**\n   * Stop a pending comment (e.g.: user closes the comment composer)\n   */\n  public stopPendingComment() {\n    this.pendingComment = false;\n    this.emitStateUpdate();\n  }\n\n  /**\n   * Create a thread at the current selection\n   */\n  public async createThread(options: {\n    initialComment: {\n      body: CommentBody;\n      metadata?: any;\n    };\n    metadata?: any;\n  }) {\n    const thread = await this.threadStore.createThread(options);\n\n    if (this.threadStore.addThreadToDocument) {\n      // creating the mark is handled by the store\n      // this is useful if we don't have write-access to the document.\n      // We can then offload the responsibility of creating the mark to the server.\n      // (e.g.: RESTYjsThreadStore)\n      const view = this.editor.prosemirrorView!;\n      const pmSelection = view.state.selection;\n\n      const ystate = ySyncPluginKey.getState(view.state);\n\n      const selection = {\n        prosemirror: {\n          head: pmSelection.head,\n          anchor: pmSelection.anchor,\n        },\n        yjs: ystate\n          ? getRelativeSelection(ystate.binding, view.state)\n          : undefined, // if we're not using yjs\n      };\n\n      await this.threadStore.addThreadToDocument({\n        threadId: thread.id,\n        selection,\n      });\n    } else {\n      // we create the mark directly in the document\n      this.editor._tiptapEditor.commands.setMark(this.markType, {\n        orphan: false,\n        threadId: thread.id,\n      });\n    }\n  }\n}\n","import { EditorState, Plugin, PluginKey, PluginView } from \"prosemirror-state\";\nimport { EditorView } from \"prosemirror-view\";\n\nimport { ySyncPluginKey } from \"y-prosemirror\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\nimport { UiElementPosition } from \"../../extensions-shared/UiElementPosition.js\";\nimport type {\n  BlockFromConfig,\n  FileBlockConfig,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\n\nexport type FilePanelState<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> = UiElementPosition & {\n  // TODO: This typing is not quite right (children should be from BSchema)\n  block: BlockFromConfig<FileBlockConfig, I, S>;\n};\n\nexport class FilePanelView<I extends InlineContentSchema, S extends StyleSchema>\n  implements PluginView\n{\n  public state?: FilePanelState<I, S>;\n  public emitUpdate: () => void;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<\n      Record<string, FileBlockConfig>,\n      I,\n      S\n    >,\n    private readonly pluginKey: PluginKey<FilePanelState<I, S>>,\n    private readonly pmView: EditorView,\n    emitUpdate: (state: FilePanelState<I, S>) => void,\n  ) {\n    this.emitUpdate = () => {\n      if (!this.state) {\n        throw new Error(\"Attempting to update uninitialized file panel\");\n      }\n\n      emitUpdate(this.state);\n    };\n\n    pmView.dom.addEventListener(\"mousedown\", this.mouseDownHandler);\n    pmView.dom.addEventListener(\"dragstart\", this.dragstartHandler);\n\n    // Setting capture=true ensures that any parent container of the editor that\n    // gets scrolled will trigger the scroll event. Scroll events do not bubble\n    // and so won't propagate to the document by default.\n    pmView.root.addEventListener(\"scroll\", this.scrollHandler, true);\n  }\n\n  mouseDownHandler = () => {\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  };\n\n  // For dragging the whole editor.\n  dragstartHandler = () => {\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  };\n\n  scrollHandler = () => {\n    if (this.state?.show) {\n      const blockElement = this.pmView.root.querySelector(\n        `[data-node-type=\"blockContainer\"][data-id=\"${this.state.block.id}\"]`,\n      );\n      if (!blockElement) {\n        return;\n      }\n      this.state.referencePos = blockElement.getBoundingClientRect();\n      this.emitUpdate();\n    }\n  };\n\n  update(view: EditorView, prevState: EditorState) {\n    const pluginState = this.pluginKey.getState(view.state);\n    const prevPluginState = this.pluginKey.getState(prevState);\n\n    if (!this.state?.show && pluginState?.block && this.editor.isEditable) {\n      const blockElement = this.pmView.root.querySelector(\n        `[data-node-type=\"blockContainer\"][data-id=\"${pluginState.block.id}\"]`,\n      );\n      if (!blockElement) {\n        return;\n      }\n      this.state = {\n        show: true,\n        referencePos: blockElement.getBoundingClientRect(),\n        block: pluginState.block,\n      };\n\n      this.emitUpdate();\n\n      return;\n    }\n\n    const isOpening = pluginState?.block && !prevPluginState?.block;\n    const isClosing = !pluginState?.block && prevPluginState?.block;\n    if (isOpening && this.state && !this.state.show) {\n      this.state.show = true;\n      this.emitUpdate();\n    }\n    if (isClosing && this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  }\n\n  closeMenu = () => {\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  };\n\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.mouseDownHandler);\n\n    this.pmView.dom.removeEventListener(\"dragstart\", this.dragstartHandler);\n\n    this.pmView.root.removeEventListener(\"scroll\", this.scrollHandler, true);\n  }\n}\n\nconst filePanelPluginKey = new PluginKey<FilePanelState<any, any>>(\n  \"FilePanelPlugin\",\n);\n\nexport class FilePanelProsemirrorPlugin<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> extends BlockNoteExtension {\n  public static key() {\n    return \"filePanel\";\n  }\n\n  private view: FilePanelView<I, S> | undefined;\n\n  constructor(editor: BlockNoteEditor<Record<string, FileBlockConfig>, I, S>) {\n    super();\n    this.addProsemirrorPlugin(\n      new Plugin<{\n        block: BlockFromConfig<FileBlockConfig, I, S> | undefined;\n      }>({\n        key: filePanelPluginKey,\n        view: (editorView) => {\n          this.view = new FilePanelView<I, S>(\n            editor,\n            filePanelPluginKey,\n            editorView,\n            (state) => {\n              this.emit(\"update\", state);\n            },\n          );\n          return this.view;\n        },\n        props: {\n          handleKeyDown: (_view, event: KeyboardEvent) => {\n            if (event.key === \"Escape\" && this.shown) {\n              this.view?.closeMenu();\n              return true;\n            }\n            return false;\n          },\n        },\n        state: {\n          init: () => {\n            return {\n              block: undefined,\n            };\n          },\n          apply: (transaction, prev) => {\n            const state: FilePanelState<I, S> | undefined =\n              transaction.getMeta(filePanelPluginKey);\n\n            if (state) {\n              return state;\n            }\n\n            if (\n              !transaction.getMeta(ySyncPluginKey) &&\n              (transaction.selectionSet || transaction.docChanged)\n            ) {\n              return { block: undefined };\n            }\n            return prev;\n          },\n        },\n      }),\n    );\n  }\n\n  public get shown() {\n    return this.view?.state?.show || false;\n  }\n\n  public onUpdate(callback: (state: FilePanelState<I, S>) => void) {\n    return this.on(\"update\", callback);\n  }\n\n  public closeMenu = () => this.view?.closeMenu();\n}\n","import { isNodeSelection, isTextSelection, posToDOMRect } from \"@tiptap/core\";\nimport { EditorState, Plugin, PluginKey, PluginView } from \"prosemirror-state\";\nimport { EditorView } from \"prosemirror-view\";\n\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\nimport { UiElementPosition } from \"../../extensions-shared/UiElementPosition.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\n\nexport type FormattingToolbarState = UiElementPosition;\n\nexport class FormattingToolbarView implements PluginView {\n  public state?: FormattingToolbarState;\n  public emitUpdate: () => void;\n\n  public preventHide = false;\n  public preventShow = false;\n\n  public shouldShow: (props: {\n    view: EditorView;\n    state: EditorState;\n    from: number;\n    to: number;\n  }) => boolean = ({ view, state, from, to }) => {\n    const { doc, selection } = state;\n    const { empty } = selection;\n\n    // Sometime check for `empty` is not enough.\n    // Doubleclick an empty paragraph returns a node size of 2.\n    // So we check also for an empty text size.\n    const isEmptyTextBlock =\n      !doc.textBetween(from, to).length && isTextSelection(state.selection);\n\n    // Don't show toolbar inside code blocks\n    if (\n      selection.$from.parent.type.spec.code ||\n      (isNodeSelection(selection) && selection.node.type.spec.code)\n    ) {\n      return false;\n    }\n\n    if (empty || isEmptyTextBlock) {\n      return false;\n    }\n\n    const focusedElement = document.activeElement;\n    if (!this.isElementWithinEditorWrapper(focusedElement) && view.editable) {\n      // editable editors must have focus for the toolbar to show\n      return false;\n    }\n    return true;\n  };\n\n  constructor(\n    private readonly editor: BlockNoteEditor<\n      BlockSchema,\n      InlineContentSchema,\n      StyleSchema\n    >,\n    private readonly pmView: EditorView,\n    emitUpdate: (state: FormattingToolbarState) => void,\n  ) {\n    this.emitUpdate = () => {\n      if (!this.state) {\n        throw new Error(\n          \"Attempting to update uninitialized formatting toolbar\",\n        );\n      }\n\n      emitUpdate(this.state);\n    };\n\n    pmView.dom.addEventListener(\"mousedown\", this.viewMousedownHandler);\n    pmView.root.addEventListener(\"mouseup\", this.mouseupHandler);\n    pmView.dom.addEventListener(\"dragstart\", this.dragHandler);\n    pmView.dom.addEventListener(\"dragover\", this.dragHandler);\n    pmView.dom.addEventListener(\"blur\", this.blurHandler);\n\n    // Setting capture=true ensures that any parent container of the editor that\n    // gets scrolled will trigger the scroll event. Scroll events do not bubble\n    // and so won't propagate to the document by default.\n    pmView.root.addEventListener(\"scroll\", this.scrollHandler, true);\n  }\n\n  blurHandler = (event: FocusEvent) => {\n    if (this.preventHide) {\n      this.preventHide = false;\n\n      return;\n    }\n\n    const editorWrapper = this.pmView.dom.parentElement!;\n\n    // Checks if the focus is moving to an element outside the editor. If it is,\n    // the toolbar is hidden.\n    if (\n      // An element is clicked.\n      event &&\n      event.relatedTarget &&\n      // Element is inside the editor.\n      (editorWrapper === (event.relatedTarget as Node) ||\n        editorWrapper.contains(event.relatedTarget as Node) ||\n        (event.relatedTarget as HTMLElement).matches(\n          \".bn-ui-container, .bn-ui-container *\",\n        ))\n    ) {\n      return;\n    }\n\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  };\n\n  isElementWithinEditorWrapper = (element: Node | null) => {\n    if (!element) {\n      return false;\n    }\n    const editorWrapper = this.pmView.dom.parentElement;\n    if (!editorWrapper) {\n      return false;\n    }\n\n    return editorWrapper.contains(element);\n  };\n\n  viewMousedownHandler = (e: MouseEvent) => {\n    if (\n      !this.isElementWithinEditorWrapper(e.target as Node) ||\n      e.button === 0\n    ) {\n      this.preventShow = true;\n    }\n  };\n\n  mouseupHandler = () => {\n    if (this.preventShow) {\n      this.preventShow = false;\n      setTimeout(() => this.update(this.pmView));\n    }\n  };\n\n  // For dragging the whole editor.\n  dragHandler = () => {\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  };\n\n  scrollHandler = () => {\n    if (this.state?.show) {\n      this.state.referencePos = this.getSelectionBoundingBox();\n      this.emitUpdate();\n    }\n  };\n\n  update(view: EditorView, oldState?: EditorState) {\n    // Delays the update to handle edge case with drag and drop, where the view\n    // is blurred asynchronously and happens only after the state update.\n    // Wrapping in a setTimeout gives enough time to wait for the blur event to\n    // occur before updating the toolbar.\n    const { state, composing } = view;\n    const { doc, selection } = state;\n    const isSame =\n      oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n\n    if (composing || isSame) {\n      return;\n    }\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    const shouldShow = this.shouldShow({\n      view,\n      state,\n      from,\n      to,\n    });\n\n    // in jsdom, Range.prototype.getClientRects is not implemented,\n    // this would cause `getSelectionBoundingBox` to fail\n    // we can just ignore jsdom for now and not show the toolbar\n    const jsdom = typeof Range.prototype.getClientRects === \"undefined\";\n\n    // Checks if menu should be shown/updated.\n    if (!this.preventShow && (shouldShow || this.preventHide) && !jsdom) {\n      // Unlike other UI elements, we don't prevent the formatting toolbar from\n      // showing when the editor is not editable. This is because some buttons,\n      // e.g. the download file button, should still be accessible. Therefore,\n      // logic for hiding when the editor is non-editable is handled\n      // individually in each button.\n      const nextState = {\n        show: true,\n        referencePos: this.getSelectionBoundingBox(),\n      };\n\n      if (\n        nextState.show !== this.state?.show ||\n        nextState.referencePos.toJSON() !== this.state?.referencePos.toJSON()\n      ) {\n        this.state = nextState;\n        this.emitUpdate();\n      }\n\n      return;\n    }\n\n    // Checks if menu should be hidden.\n    if (\n      this.state?.show &&\n      !this.preventHide &&\n      (!shouldShow || this.preventShow || !this.editor.isEditable)\n    ) {\n      this.state.show = false;\n      this.emitUpdate();\n\n      return;\n    }\n  }\n\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler);\n    this.pmView.root.removeEventListener(\"mouseup\", this.mouseupHandler);\n    this.pmView.dom.removeEventListener(\"dragstart\", this.dragHandler);\n    this.pmView.dom.removeEventListener(\"dragover\", this.dragHandler);\n    this.pmView.dom.removeEventListener(\"blur\", this.blurHandler);\n\n    this.pmView.root.removeEventListener(\"scroll\", this.scrollHandler, true);\n  }\n\n  closeMenu = () => {\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  };\n\n  getSelectionBoundingBox() {\n    const { state } = this.pmView;\n    const { selection } = state;\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    if (isNodeSelection(selection)) {\n      const node = this.pmView.nodeDOM(from) as HTMLElement;\n      if (node) {\n        return node.getBoundingClientRect();\n      }\n    }\n\n    return posToDOMRect(this.pmView, from, to);\n  }\n}\n\nexport const formattingToolbarPluginKey = new PluginKey(\n  \"FormattingToolbarPlugin\",\n);\n\nexport class FormattingToolbarProsemirrorPlugin extends BlockNoteExtension {\n  public static key() {\n    return \"formattingToolbar\";\n  }\n\n  private view: FormattingToolbarView | undefined;\n\n  constructor(editor: BlockNoteEditor<any, any, any>) {\n    super();\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: formattingToolbarPluginKey,\n        view: (editorView) => {\n          this.view = new FormattingToolbarView(editor, editorView, (state) => {\n            this.emit(\"update\", state);\n          });\n          return this.view;\n        },\n        props: {\n          handleKeyDown: (_view, event: KeyboardEvent) => {\n            if (event.key === \"Escape\" && this.shown) {\n              this.view!.closeMenu();\n              return true;\n            }\n            return false;\n          },\n        },\n      }),\n    );\n  }\n\n  public get shown() {\n    return this.view?.state?.show || false;\n  }\n\n  public onUpdate(callback: (state: FormattingToolbarState) => void) {\n    return this.on(\"update\", callback);\n  }\n\n  public closeMenu = () => this.view!.closeMenu();\n}\n","// Stripped down version of the TipTap HardBreak extension:\n// https://github.com/ueberdosis/tiptap/blob/f3258d9ee5fb7979102fe63434f6ea4120507311/packages/extension-hard-break/src/hard-break.ts#L80\n// Changes:\n// - Removed options\n// - Removed keyboard shortcuts & moved them to the `KeyboardShortcutsExtension`\n// - Removed `setHardBreak` command (added a simpler version in the Shift+Enter\n// handler in `KeyboardShortcutsExtension`).\n// - Added priority\nimport { mergeAttributes, Node } from \"@tiptap/core\";\n\nexport const HardBreak = Node.create({\n  name: \"hardBreak\",\n\n  inline: true,\n\n  group: \"inline\",\n\n  selectable: false,\n\n  linebreakReplacement: true,\n\n  priority: 10,\n\n  parseHTML() {\n    return [{ tag: \"br\" }];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"br\", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];\n  },\n\n  renderText() {\n    return \"\\n\";\n  },\n});\n","import { Node } from \"prosemirror-model\";\nimport { EditorState } from \"prosemirror-state\";\n\nimport {\n  BlockInfo,\n  getBlockInfoFromResolvedPos,\n} from \"../../../getBlockInfoFromPos.js\";\n\n/**\n * Returns the block info from the parent block\n * or undefined if we're at the root\n */\nexport const getParentBlockInfo = (doc: Node, beforePos: number) => {\n  const $pos = doc.resolve(beforePos);\n\n  if ($pos.depth <= 1) {\n    return undefined;\n  }\n\n  // get start pos of parent\n  const parentBeforePos = $pos.posAtIndex(\n    $pos.index($pos.depth - 1),\n    $pos.depth - 1,\n  );\n\n  const parentBlockInfo = getBlockInfoFromResolvedPos(\n    doc.resolve(parentBeforePos),\n  );\n  return parentBlockInfo;\n};\n\n/**\n * Returns the block info from the sibling block before (above) the given block,\n * or undefined if the given block is the first sibling.\n */\nexport const getPrevBlockInfo = (doc: Node, beforePos: number) => {\n  const $pos = doc.resolve(beforePos);\n\n  const indexInParent = $pos.index();\n\n  if (indexInParent === 0) {\n    return undefined;\n  }\n\n  const prevBlockBeforePos = $pos.posAtIndex(indexInParent - 1);\n\n  const prevBlockInfo = getBlockInfoFromResolvedPos(\n    doc.resolve(prevBlockBeforePos),\n  );\n  return prevBlockInfo;\n};\n\n/**\n * If a block has children like this:\n * A\n * - B\n * - C\n * -- D\n *\n * Then the bottom nested block returned is D.\n */\nexport const getBottomNestedBlockInfo = (doc: Node, blockInfo: BlockInfo) => {\n  while (blockInfo.childContainer) {\n    const group = blockInfo.childContainer.node;\n\n    const newPos = doc\n      .resolve(blockInfo.childContainer.beforePos + 1)\n      .posAtIndex(group.childCount - 1);\n    blockInfo = getBlockInfoFromResolvedPos(doc.resolve(newPos));\n  }\n\n  return blockInfo;\n};\n\nconst canMerge = (prevBlockInfo: BlockInfo, nextBlockInfo: BlockInfo) => {\n  return (\n    prevBlockInfo.isBlockContainer &&\n    prevBlockInfo.blockContent.node.type.spec.content === \"inline*\" &&\n    prevBlockInfo.blockContent.node.childCount > 0 &&\n    nextBlockInfo.isBlockContainer &&\n    nextBlockInfo.blockContent.node.type.spec.content === \"inline*\"\n  );\n};\n\nconst mergeBlocks = (\n  state: EditorState,\n  dispatch: ((args?: any) => any) | undefined,\n  prevBlockInfo: BlockInfo,\n  nextBlockInfo: BlockInfo,\n) => {\n  // Un-nests all children of the next block.\n  if (!nextBlockInfo.isBlockContainer) {\n    throw new Error(\n      `Attempted to merge block at position ${nextBlockInfo.bnBlock.beforePos} into previous block at position ${prevBlockInfo.bnBlock.beforePos}, but next block is not a block container`,\n    );\n  }\n\n  // Removes a level of nesting all children of the next block by 1 level, if it contains both content and block\n  // group nodes.\n  if (nextBlockInfo.childContainer) {\n    const childBlocksStart = state.doc.resolve(\n      nextBlockInfo.childContainer.beforePos + 1,\n    );\n    const childBlocksEnd = state.doc.resolve(\n      nextBlockInfo.childContainer.afterPos - 1,\n    );\n    const childBlocksRange = childBlocksStart.blockRange(childBlocksEnd);\n\n    if (dispatch) {\n      const pos = state.doc.resolve(nextBlockInfo.bnBlock.beforePos);\n      state.tr.lift(childBlocksRange!, pos.depth);\n    }\n  }\n\n  // Deletes the boundary between the two blocks. Can be thought of as\n  // removing the closing tags of the first block and the opening tags of the\n  // second one to stitch them together.\n  if (dispatch) {\n    if (!prevBlockInfo.isBlockContainer) {\n      throw new Error(\n        `Attempted to merge block at position ${nextBlockInfo.bnBlock.beforePos} into previous block at position ${prevBlockInfo.bnBlock.beforePos}, but previous block is not a block container`,\n      );\n    }\n\n    // TODO: test merging between a columnList and paragraph, between two columnLists, and v.v.\n    dispatch(\n      state.tr.delete(\n        prevBlockInfo.blockContent.afterPos - 1,\n        nextBlockInfo.blockContent.beforePos + 1,\n      ),\n    );\n  }\n\n  return true;\n};\n\nexport const mergeBlocksCommand =\n  (posBetweenBlocks: number) =>\n  ({\n    state,\n    dispatch,\n  }: {\n    state: EditorState;\n    dispatch: ((args?: any) => any) | undefined;\n  }) => {\n    const $pos = state.doc.resolve(posBetweenBlocks);\n    const nextBlockInfo = getBlockInfoFromResolvedPos($pos);\n\n    const prevBlockInfo = getPrevBlockInfo(\n      state.doc,\n      nextBlockInfo.bnBlock.beforePos,\n    );\n\n    if (!prevBlockInfo) {\n      return false;\n    }\n\n    const bottomNestedBlockInfo = getBottomNestedBlockInfo(\n      state.doc,\n      prevBlockInfo,\n    );\n\n    if (!canMerge(bottomNestedBlockInfo, nextBlockInfo)) {\n      return false;\n    }\n\n    return mergeBlocks(state, dispatch, bottomNestedBlockInfo, nextBlockInfo);\n  };\n","import { Extension } from \"@tiptap/core\";\n\nimport { TextSelection } from \"prosemirror-state\";\nimport { ReplaceAroundStep } from \"prosemirror-transform\";\nimport {\n  getBottomNestedBlockInfo,\n  getParentBlockInfo,\n  getPrevBlockInfo,\n  mergeBlocksCommand,\n} from \"../../api/blockManipulation/commands/mergeBlocks/mergeBlocks.js\";\nimport { nestBlock } from \"../../api/blockManipulation/commands/nestBlock/nestBlock.js\";\nimport { splitBlockCommand } from \"../../api/blockManipulation/commands/splitBlock/splitBlock.js\";\nimport { updateBlockCommand } from \"../../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport { getBlockInfoFromSelection } from \"../../api/getBlockInfoFromPos.js\";\nimport { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\n\nexport const KeyboardShortcutsExtension = Extension.create<{\n  editor: BlockNoteEditor<any, any, any>;\n  tabBehavior: \"prefer-navigate-ui\" | \"prefer-indent\";\n}>({\n  priority: 50,\n\n  // TODO: The shortcuts need a refactor. Do we want to use a command priority\n  //  design as there is now, or clump the logic into a single function?\n  addKeyboardShortcuts() {\n    // handleBackspace is partially adapted from https://github.com/ueberdosis/tiptap/blob/ed56337470efb4fd277128ab7ef792b37cfae992/packages/core/src/extensions/keymap.ts\n    const handleBackspace = () =>\n      this.editor.commands.first(({ chain, commands }) => [\n        // Deletes the selection if it's not empty.\n        () => commands.deleteSelection(),\n        // Undoes an input rule if one was triggered in the last editor state change.\n        () => commands.undoInputRule(),\n        // Reverts block content type to a paragraph if the selection is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n\n            const selectionAtBlockStart =\n              state.selection.from === blockInfo.blockContent.beforePos + 1;\n            const isParagraph =\n              blockInfo.blockContent.node.type.name === \"paragraph\";\n\n            if (selectionAtBlockStart && !isParagraph) {\n              return commands.command(\n                updateBlockCommand(blockInfo.bnBlock.beforePos, {\n                  type: \"paragraph\",\n                  props: {},\n                }),\n              );\n            }\n\n            return false;\n          }),\n        // Removes a level of nesting if the block is indented if the selection is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n            const { blockContent } = blockInfo;\n\n            const selectionAtBlockStart =\n              state.selection.from === blockContent.beforePos + 1;\n\n            if (selectionAtBlockStart) {\n              return commands.liftListItem(\"blockContainer\");\n            }\n\n            return false;\n          }),\n        // Merges block with the previous one if it isn't indented, and the selection is at the start of the\n        // block. The target block for merging must contain inline content.\n        () =>\n          commands.command(({ state }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n            const { bnBlock: blockContainer, blockContent } = blockInfo;\n\n            const selectionAtBlockStart =\n              state.selection.from === blockContent.beforePos + 1;\n            const selectionEmpty = state.selection.empty;\n\n            const posBetweenBlocks = blockContainer.beforePos;\n\n            if (selectionAtBlockStart && selectionEmpty) {\n              return chain()\n                .command(mergeBlocksCommand(posBetweenBlocks))\n                .scrollIntoView()\n                .run();\n            }\n\n            return false;\n          }),\n        () =>\n          commands.command(({ state, dispatch }) => {\n            // when at the start of a first block in a column\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n\n            const selectionAtBlockStart =\n              state.selection.from === blockInfo.blockContent.beforePos + 1;\n\n            if (!selectionAtBlockStart) {\n              return false;\n            }\n\n            const prevBlockInfo = getPrevBlockInfo(\n              state.doc,\n              blockInfo.bnBlock.beforePos,\n            );\n\n            if (prevBlockInfo) {\n              // should be no previous block\n              return false;\n            }\n\n            const parentBlockInfo = getParentBlockInfo(\n              state.doc,\n              blockInfo.bnBlock.beforePos,\n            );\n\n            if (parentBlockInfo?.blockNoteType !== \"column\") {\n              return false;\n            }\n\n            const column = parentBlockInfo;\n\n            const columnList = getParentBlockInfo(\n              state.doc,\n              column.bnBlock.beforePos,\n            );\n            if (columnList?.blockNoteType !== \"columnList\") {\n              throw new Error(\"parent of column is not a column list\");\n            }\n\n            const shouldRemoveColumn =\n              column.childContainer!.node.childCount === 1;\n\n            const shouldRemoveColumnList =\n              shouldRemoveColumn &&\n              columnList.childContainer!.node.childCount === 2;\n\n            const isFirstColumn =\n              columnList.childContainer!.node.firstChild ===\n              column.bnBlock.node;\n\n            if (dispatch) {\n              const blockToMove = state.doc.slice(\n                blockInfo.bnBlock.beforePos,\n                blockInfo.bnBlock.afterPos,\n                false,\n              );\n\n              /*\n              There are 3 different cases:\n              a) remove entire column list (if no columns would be remaining)\n              b) remove just a column (if no blocks inside a column would be remaining)\n              c) keep columns (if there are blocks remaining inside a column)\n\n              Each of these 3 cases has 2 sub-cases, depending on whether the backspace happens at the start of the first (most-left) column,\n              or at the start of a non-first column.\n              */\n              if (shouldRemoveColumnList) {\n                if (isFirstColumn) {\n                  state.tr.step(\n                    new ReplaceAroundStep(\n                      // replace entire column list\n                      columnList.bnBlock.beforePos,\n                      columnList.bnBlock.afterPos,\n                      // select content of remaining column:\n                      column.bnBlock.afterPos + 1,\n                      columnList.bnBlock.afterPos - 2,\n                      blockToMove,\n                      blockToMove.size, // append existing content to blockToMove\n                      false,\n                    ),\n                  );\n                  const pos = state.tr.doc.resolve(column.bnBlock.beforePos);\n                  state.tr.setSelection(TextSelection.between(pos, pos));\n                } else {\n                  // replaces the column list with the blockToMove slice, prepended with the content of the remaining column\n                  state.tr.step(\n                    new ReplaceAroundStep(\n                      // replace entire column list\n                      columnList.bnBlock.beforePos,\n                      columnList.bnBlock.afterPos,\n                      // select content of existing column:\n                      columnList.bnBlock.beforePos + 2,\n                      column.bnBlock.beforePos - 1,\n                      blockToMove,\n                      0, // prepend existing content to blockToMove\n                      false,\n                    ),\n                  );\n                  const pos = state.tr.doc.resolve(\n                    state.tr.mapping.map(column.bnBlock.beforePos - 1),\n                  );\n                  state.tr.setSelection(TextSelection.between(pos, pos));\n                }\n              } else if (shouldRemoveColumn) {\n                if (isFirstColumn) {\n                  // delete column\n                  state.tr.delete(\n                    column.bnBlock.beforePos,\n                    column.bnBlock.afterPos,\n                  );\n\n                  // move before columnlist\n                  state.tr.insert(\n                    columnList.bnBlock.beforePos,\n                    blockToMove.content,\n                  );\n\n                  const pos = state.tr.doc.resolve(\n                    columnList.bnBlock.beforePos,\n                  );\n                  state.tr.setSelection(TextSelection.between(pos, pos));\n                } else {\n                  // just delete the </column><column> closing and opening tags to merge the columns\n                  state.tr.delete(\n                    column.bnBlock.beforePos - 1,\n                    column.bnBlock.beforePos + 1,\n                  );\n                }\n              } else {\n                // delete block\n                state.tr.delete(\n                  blockInfo.bnBlock.beforePos,\n                  blockInfo.bnBlock.afterPos,\n                );\n                if (isFirstColumn) {\n                  // move before columnlist\n                  state.tr.insert(\n                    columnList.bnBlock.beforePos - 1,\n                    blockToMove.content,\n                  );\n                } else {\n                  // append block to previous column\n                  state.tr.insert(\n                    column.bnBlock.beforePos - 1,\n                    blockToMove.content,\n                  );\n                }\n                const pos = state.tr.doc.resolve(column.bnBlock.beforePos - 1);\n                state.tr.setSelection(TextSelection.between(pos, pos));\n              }\n            }\n\n            return true;\n          }),\n        // Deletes the current block if it's an empty block with inline content,\n        // and moves the selection to the previous block.\n        () =>\n          commands.command(({ state }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n\n            const blockEmpty =\n              blockInfo.blockContent.node.childCount === 0 &&\n              blockInfo.blockContent.node.type.spec.content === \"inline*\";\n\n            if (blockEmpty) {\n              const prevBlockInfo = getPrevBlockInfo(\n                state.doc,\n                blockInfo.bnBlock.beforePos,\n              );\n              if (!prevBlockInfo || !prevBlockInfo.isBlockContainer) {\n                return false;\n              }\n\n              let chainedCommands = chain();\n\n              if (\n                prevBlockInfo.blockContent.node.type.spec.content ===\n                \"tableRow+\"\n              ) {\n                const tableBlockEndPos = blockInfo.bnBlock.beforePos - 1;\n                const tableBlockContentEndPos = tableBlockEndPos - 1;\n                const lastRowEndPos = tableBlockContentEndPos - 1;\n                const lastCellEndPos = lastRowEndPos - 1;\n                const lastCellParagraphEndPos = lastCellEndPos - 1;\n\n                chainedCommands = chainedCommands.setTextSelection(\n                  lastCellParagraphEndPos,\n                );\n              } else if (\n                prevBlockInfo.blockContent.node.type.spec.content === \"\"\n              ) {\n                const nonEditableBlockContentStartPos =\n                  prevBlockInfo.blockContent.afterPos -\n                  prevBlockInfo.blockContent.node.nodeSize;\n\n                chainedCommands = chainedCommands.setNodeSelection(\n                  nonEditableBlockContentStartPos,\n                );\n              } else {\n                const blockContentStartPos =\n                  prevBlockInfo.blockContent.afterPos -\n                  prevBlockInfo.blockContent.node.nodeSize;\n\n                chainedCommands =\n                  chainedCommands.setTextSelection(blockContentStartPos);\n              }\n\n              return chainedCommands\n                .deleteRange({\n                  from: blockInfo.bnBlock.beforePos,\n                  to: blockInfo.bnBlock.afterPos,\n                })\n                .scrollIntoView()\n                .run();\n            }\n\n            return false;\n          }),\n        // Deletes previous block if it contains no content and isn't a table,\n        // when the selection is empty and at the start of the block. Moves the\n        // current block into the deleted block's place.\n        () =>\n          commands.command(({ state }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n\n            if (!blockInfo.isBlockContainer) {\n              // TODO\n              throw new Error(`todo`);\n            }\n\n            const selectionAtBlockStart =\n              state.selection.from === blockInfo.blockContent.beforePos + 1;\n            const selectionEmpty = state.selection.empty;\n\n            const prevBlockInfo = getPrevBlockInfo(\n              state.doc,\n              blockInfo.bnBlock.beforePos,\n            );\n\n            if (prevBlockInfo && selectionAtBlockStart && selectionEmpty) {\n              const bottomBlock = getBottomNestedBlockInfo(\n                state.doc,\n                prevBlockInfo,\n              );\n\n              if (!bottomBlock.isBlockContainer) {\n                // TODO\n                throw new Error(`todo`);\n              }\n\n              const prevBlockNotTableAndNoContent =\n                bottomBlock.blockContent.node.type.spec.content === \"\" ||\n                (bottomBlock.blockContent.node.type.spec.content ===\n                  \"inline*\" &&\n                  bottomBlock.blockContent.node.childCount === 0);\n\n              if (prevBlockNotTableAndNoContent) {\n                return chain()\n                  .cut(\n                    {\n                      from: blockInfo.bnBlock.beforePos,\n                      to: blockInfo.bnBlock.afterPos,\n                    },\n                    bottomBlock.bnBlock.afterPos,\n                  )\n                  .deleteRange({\n                    from: bottomBlock.bnBlock.beforePos,\n                    to: bottomBlock.bnBlock.afterPos,\n                  })\n                  .run();\n              }\n            }\n\n            return false;\n          }),\n      ]);\n\n    const handleDelete = () =>\n      this.editor.commands.first(({ commands }) => [\n        // Deletes the selection if it's not empty.\n        () => commands.deleteSelection(),\n        // Merges block with the next one (at the same nesting level or lower),\n        // if one exists, the block has no children, and the selection is at the\n        // end of the block.\n        () =>\n          commands.command(({ state }) => {\n            // TODO: Change this to not rely on offsets & schema assumptions\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n            const {\n              bnBlock: blockContainer,\n              blockContent,\n              childContainer,\n            } = blockInfo;\n\n            const { depth } = state.doc.resolve(blockContainer.beforePos);\n            const blockAtDocEnd =\n              blockContainer.afterPos === state.doc.nodeSize - 3;\n            const selectionAtBlockEnd =\n              state.selection.from === blockContent.afterPos - 1;\n            const selectionEmpty = state.selection.empty;\n            const hasChildBlocks = childContainer !== undefined;\n\n            if (\n              !blockAtDocEnd &&\n              selectionAtBlockEnd &&\n              selectionEmpty &&\n              !hasChildBlocks\n            ) {\n              let oldDepth = depth;\n              let newPos = blockContainer.afterPos + 1;\n              let newDepth = state.doc.resolve(newPos).depth;\n\n              while (newDepth < oldDepth) {\n                oldDepth = newDepth;\n                newPos += 2;\n                newDepth = state.doc.resolve(newPos).depth;\n              }\n\n              return commands.command(mergeBlocksCommand(newPos - 1));\n            }\n\n            return false;\n          }),\n      ]);\n\n    const handleEnter = (withShift = false) => {\n      return this.editor.commands.first(({ commands, tr }) => [\n        // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start\n        // of the block.\n        () =>\n          commands.command(({ state }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n            const { bnBlock: blockContainer, blockContent } = blockInfo;\n\n            const { depth } = state.doc.resolve(blockContainer.beforePos);\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockEmpty = blockContent.node.childCount === 0;\n            const blockIndented = depth > 1;\n\n            if (\n              selectionAtBlockStart &&\n              selectionEmpty &&\n              blockEmpty &&\n              blockIndented\n            ) {\n              return commands.liftListItem(\"blockContainer\");\n            }\n\n            return false;\n          }),\n        // Creates a hard break if block is configured to do so.\n        () =>\n          commands.command(({ state }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n\n            const blockHardBreakShortcut: \"shift+enter\" | \"enter\" | \"none\" =\n              this.options.editor.schema.blockSchema[blockInfo.blockNoteType]\n                .hardBreakShortcut ?? \"shift+enter\";\n\n            if (blockHardBreakShortcut === \"none\") {\n              return false;\n            }\n\n            if (\n              // If shortcut is not configured, or is configured as \"shift+enter\",\n              // create a hard break for shift+enter, but not for enter.\n              (blockHardBreakShortcut === \"shift+enter\" && withShift) ||\n              // If shortcut is configured as \"enter\", create a hard break for\n              // both enter and shift+enter.\n              blockHardBreakShortcut === \"enter\"\n            ) {\n              const marks =\n                tr.storedMarks ||\n                tr.selection.$head\n                  .marks()\n                  .filter((m) =>\n                    this.editor.extensionManager.splittableMarks.includes(\n                      m.type.name,\n                    ),\n                  );\n\n              tr.insert(\n                tr.selection.head,\n                tr.doc.type.schema.nodes.hardBreak.create(),\n              ).ensureMarks(marks);\n              return true;\n            }\n\n            return false;\n          }),\n        // Creates a new block and moves the selection to it if the current one is empty, while the selection is also\n        // empty & at the start of the block.\n        () =>\n          commands.command(({ state, dispatch }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n            const { bnBlock: blockContainer, blockContent } = blockInfo;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockEmpty = blockContent.node.childCount === 0;\n\n            if (selectionAtBlockStart && selectionEmpty && blockEmpty) {\n              const newBlockInsertionPos = blockContainer.afterPos;\n              const newBlockContentPos = newBlockInsertionPos + 2;\n\n              if (dispatch) {\n                const newBlock =\n                  state.schema.nodes[\"blockContainer\"].createAndFill()!;\n\n                state.tr\n                  .insert(newBlockInsertionPos, newBlock)\n                  .scrollIntoView();\n                state.tr.setSelection(\n                  new TextSelection(state.doc.resolve(newBlockContentPos)),\n                );\n              }\n\n              return true;\n            }\n\n            return false;\n          }),\n        // Splits the current block, moving content inside that's after the cursor to a new text block below. Also\n        // deletes the selection beforehand, if it's not empty.\n        () =>\n          commands.command(({ state, chain }) => {\n            const blockInfo = getBlockInfoFromSelection(state);\n            if (!blockInfo.isBlockContainer) {\n              return false;\n            }\n            const { blockContent } = blockInfo;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const blockEmpty = blockContent.node.childCount === 0;\n\n            if (!blockEmpty) {\n              chain()\n                .deleteSelection()\n                .command(\n                  splitBlockCommand(\n                    state.selection.from,\n                    selectionAtBlockStart,\n                    selectionAtBlockStart,\n                  ),\n                )\n                .run();\n\n              return true;\n            }\n\n            return false;\n          }),\n      ]);\n    };\n\n    return {\n      Backspace: handleBackspace,\n      Delete: handleDelete,\n      Enter: () => handleEnter(),\n      \"Shift-Enter\": () => handleEnter(true),\n      // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the\n      // editor since the browser will try to use tab for keyboard navigation.\n      Tab: () => {\n        if (\n          this.options.tabBehavior !== \"prefer-indent\" &&\n          (this.options.editor.formattingToolbar?.shown ||\n            this.options.editor.linkToolbar?.shown ||\n            this.options.editor.filePanel?.shown)\n        ) {\n          // don't handle tabs if a toolbar is shown, so we can tab into / out of it\n          return false;\n        }\n        return nestBlock(this.options.editor);\n        // return true;\n      },\n      \"Shift-Tab\": () => {\n        if (\n          this.options.tabBehavior !== \"prefer-indent\" &&\n          (this.options.editor.formattingToolbar?.shown ||\n            this.options.editor.linkToolbar?.shown ||\n            this.options.editor.filePanel?.shown)\n        ) {\n          // don't handle tabs if a toolbar is shown, so we can tab into / out of it\n          return false;\n        }\n        this.editor.commands.liftListItem(\"blockContainer\");\n        return true;\n      },\n      \"Shift-Mod-ArrowUp\": () => {\n        this.options.editor.moveBlocksUp();\n        return true;\n      },\n      \"Shift-Mod-ArrowDown\": () => {\n        this.options.editor.moveBlocksDown();\n        return true;\n      },\n      \"Mod-z\": () => this.options.editor.undo(),\n      \"Mod-y\": () => this.options.editor.redo(),\n      \"Shift-Mod-z\": () => this.options.editor.redo(),\n    };\n  },\n});\n","import { getMarkRange, posToDOMRect, Range } from \"@tiptap/core\";\n\nimport { EditorView } from \"@tiptap/pm/view\";\nimport { Mark } from \"prosemirror-model\";\nimport { EditorState, Plugin, PluginKey, PluginView } from \"prosemirror-state\";\n\nimport { getPmSchema } from \"../../api/pmUtil.js\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\nimport { UiElementPosition } from \"../../extensions-shared/UiElementPosition.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\n\nexport type LinkToolbarState = UiElementPosition & {\n  // The hovered link's URL, and the text it's displayed with in the\n  // editor.\n  url: string;\n  text: string;\n};\n\nclass LinkToolbarView implements PluginView {\n  public state?: LinkToolbarState;\n  public emitUpdate: () => void;\n\n  menuUpdateTimer: ReturnType<typeof setTimeout> | undefined;\n  startMenuUpdateTimer: () => void;\n  stopMenuUpdateTimer: () => void;\n\n  mouseHoveredLinkMark: Mark | undefined;\n  mouseHoveredLinkMarkRange: Range | undefined;\n\n  keyboardHoveredLinkMark: Mark | undefined;\n  keyboardHoveredLinkMarkRange: Range | undefined;\n\n  linkMark: Mark | undefined;\n  linkMarkRange: Range | undefined;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<any, any, any>,\n    private readonly pmView: EditorView,\n    emitUpdate: (state: LinkToolbarState) => void,\n  ) {\n    this.emitUpdate = () => {\n      if (!this.state) {\n        throw new Error(\"Attempting to update uninitialized link toolbar\");\n      }\n\n      emitUpdate(this.state);\n    };\n\n    this.startMenuUpdateTimer = () => {\n      this.menuUpdateTimer = setTimeout(() => {\n        this.update(this.pmView, undefined, true);\n      }, 250);\n    };\n\n    this.stopMenuUpdateTimer = () => {\n      if (this.menuUpdateTimer) {\n        clearTimeout(this.menuUpdateTimer);\n        this.menuUpdateTimer = undefined;\n      }\n\n      return false;\n    };\n\n    this.pmView.dom.addEventListener(\"mouseover\", this.mouseOverHandler);\n    this.pmView.root.addEventListener(\n      \"click\",\n      this.clickHandler as EventListener,\n      true,\n    );\n\n    // Setting capture=true ensures that any parent container of the editor that\n    // gets scrolled will trigger the scroll event. Scroll events do not bubble\n    // and so won't propagate to the document by default.\n    this.pmView.root.addEventListener(\"scroll\", this.scrollHandler, true);\n  }\n\n  mouseOverHandler = (event: MouseEvent) => {\n    // Resets the link mark currently hovered by the mouse cursor.\n    this.mouseHoveredLinkMark = undefined;\n    this.mouseHoveredLinkMarkRange = undefined;\n\n    this.stopMenuUpdateTimer();\n\n    if (\n      event.target instanceof HTMLAnchorElement &&\n      event.target.nodeName === \"A\"\n    ) {\n      // Finds link mark at the hovered element's position to update mouseHoveredLinkMark and\n      // mouseHoveredLinkMarkRange.\n      const hoveredLinkElement = event.target;\n      const posInHoveredLinkMark =\n        this.pmView.posAtDOM(hoveredLinkElement, 0) + 1;\n      const resolvedPosInHoveredLinkMark =\n        this.pmView.state.doc.resolve(posInHoveredLinkMark);\n      const marksAtPos = resolvedPosInHoveredLinkMark.marks();\n\n      for (const mark of marksAtPos) {\n        if (\n          mark.type.name === this.pmView.state.schema.mark(\"link\").type.name\n        ) {\n          this.mouseHoveredLinkMark = mark;\n          this.mouseHoveredLinkMarkRange =\n            getMarkRange(resolvedPosInHoveredLinkMark, mark.type, mark.attrs) ||\n            undefined;\n\n          break;\n        }\n      }\n    }\n\n    this.startMenuUpdateTimer();\n\n    return false;\n  };\n\n  clickHandler = (event: MouseEvent) => {\n    const editorWrapper = this.pmView.dom.parentElement!;\n\n    if (\n      // Toolbar is open.\n      this.linkMark &&\n      // An element is clicked.\n      event &&\n      event.target &&\n      // The clicked element is not the editor.\n      !(\n        editorWrapper === (event.target as Node) ||\n        editorWrapper.contains(event.target as Node)\n      )\n    ) {\n      if (this.state?.show) {\n        this.state.show = false;\n        this.emitUpdate();\n      }\n    }\n  };\n\n  scrollHandler = () => {\n    if (this.linkMark !== undefined) {\n      if (this.state?.show) {\n        this.state.referencePos = posToDOMRect(\n          this.pmView,\n          this.linkMarkRange!.from,\n          this.linkMarkRange!.to,\n        );\n        this.emitUpdate();\n      }\n    }\n  };\n\n  editLink(url: string, text: string) {\n    this.editor.transact((tr) => {\n      const pmSchema = getPmSchema(tr);\n      tr.insertText(text, this.linkMarkRange!.from, this.linkMarkRange!.to);\n      tr.addMark(\n        this.linkMarkRange!.from,\n        this.linkMarkRange!.from + text.length,\n        pmSchema.mark(\"link\", { href: url }),\n      );\n    });\n    this.pmView.focus();\n\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  }\n\n  deleteLink() {\n    this.editor.transact((tr) =>\n      tr\n        .removeMark(\n          this.linkMarkRange!.from,\n          this.linkMarkRange!.to,\n          this.linkMark!.type,\n        )\n        .setMeta(\"preventAutolink\", true),\n    );\n    this.pmView.focus();\n\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  }\n\n  update(view: EditorView, oldState?: EditorState, fromMouseOver = false) {\n    const { state } = view;\n\n    const isSame =\n      oldState &&\n      oldState.selection.from === state.selection.from &&\n      oldState.selection.to === state.selection.to;\n\n    if (isSame || !this.pmView.hasFocus()) {\n      return;\n    }\n\n    // Saves the currently hovered link mark before it's updated.\n    const prevLinkMark = this.linkMark;\n\n    // Resets the currently hovered link mark.\n    this.linkMark = undefined;\n    this.linkMarkRange = undefined;\n\n    // Resets the link mark currently hovered by the keyboard cursor.\n    this.keyboardHoveredLinkMark = undefined;\n    this.keyboardHoveredLinkMarkRange = undefined;\n\n    // Finds link mark at the editor selection's position to update keyboardHoveredLinkMark and\n    // keyboardHoveredLinkMarkRange.\n    if (this.pmView.state.selection.empty) {\n      const marksAtPos = this.pmView.state.selection.$from.marks();\n\n      for (const mark of marksAtPos) {\n        if (\n          mark.type.name === this.pmView.state.schema.mark(\"link\").type.name\n        ) {\n          this.keyboardHoveredLinkMark = mark;\n          this.keyboardHoveredLinkMarkRange =\n            getMarkRange(\n              this.pmView.state.selection.$from,\n              mark.type,\n              mark.attrs,\n            ) || undefined;\n\n          break;\n        }\n      }\n    }\n\n    if (this.mouseHoveredLinkMark && fromMouseOver) {\n      this.linkMark = this.mouseHoveredLinkMark;\n      this.linkMarkRange = this.mouseHoveredLinkMarkRange;\n    }\n\n    // Keyboard cursor position takes precedence over mouse hovered link.\n    if (this.keyboardHoveredLinkMark) {\n      this.linkMark = this.keyboardHoveredLinkMark;\n      this.linkMarkRange = this.keyboardHoveredLinkMarkRange;\n    }\n\n    if (this.linkMark && this.editor.isEditable) {\n      this.state = {\n        show: true,\n        referencePos: posToDOMRect(\n          this.pmView,\n          this.linkMarkRange!.from,\n          this.linkMarkRange!.to,\n        ),\n        url: this.linkMark!.attrs.href,\n        text: this.pmView.state.doc.textBetween(\n          this.linkMarkRange!.from,\n          this.linkMarkRange!.to,\n        ),\n      };\n      this.emitUpdate();\n\n      return;\n    }\n\n    // Hides menu.\n    if (\n      this.state?.show &&\n      prevLinkMark &&\n      (!this.linkMark || !this.editor.isEditable)\n    ) {\n      this.state.show = false;\n      this.emitUpdate();\n\n      return;\n    }\n  }\n\n  closeMenu = () => {\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate();\n    }\n  };\n\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mouseover\", this.mouseOverHandler);\n    this.pmView.root.removeEventListener(\"scroll\", this.scrollHandler, true);\n    this.pmView.root.removeEventListener(\n      \"click\",\n      this.clickHandler as EventListener,\n      true,\n    );\n  }\n}\n\nexport const linkToolbarPluginKey = new PluginKey(\"LinkToolbarPlugin\");\n\nexport class LinkToolbarProsemirrorPlugin<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> extends BlockNoteExtension {\n  public static key() {\n    return \"linkToolbar\";\n  }\n\n  private view: LinkToolbarView | undefined;\n\n  constructor(editor: BlockNoteEditor<BSchema, I, S>) {\n    super();\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: linkToolbarPluginKey,\n        view: (editorView) => {\n          this.view = new LinkToolbarView(editor, editorView, (state) => {\n            this.emit(\"update\", state);\n          });\n          return this.view;\n        },\n        props: {\n          handleKeyDown: (_view, event: KeyboardEvent) => {\n            if (event.key === \"Escape\" && this.shown) {\n              this.view!.closeMenu();\n              return true;\n            }\n            return false;\n          },\n        },\n      }),\n    );\n  }\n\n  public onUpdate(callback: (state: LinkToolbarState) => void) {\n    return this.on(\"update\", callback);\n  }\n\n  /**\n   * Edit the currently hovered link.\n   */\n  public editLink = (url: string, text: string) => {\n    this.view!.editLink(url, text);\n  };\n\n  /**\n   * Delete the currently hovered link.\n   */\n  public deleteLink = () => {\n    this.view!.deleteLink();\n  };\n\n  /**\n   * When hovering on/off links using the mouse cursor, the link toolbar will\n   * open & close with a delay.\n   *\n   * This function starts the delay timer, and should be used for when the mouse\n   * cursor enters the link toolbar.\n   */\n  public startHideTimer = () => {\n    this.view!.startMenuUpdateTimer();\n  };\n\n  /**\n   * When hovering on/off links using the mouse cursor, the link toolbar will\n   * open & close with a delay.\n   *\n   * This function stops the delay timer, and should be used for when the mouse\n   * cursor exits the link toolbar.\n   */\n  public stopHideTimer = () => {\n    this.view!.stopMenuUpdateTimer();\n  };\n\n  public get shown() {\n    return this.view?.state?.show || false;\n  }\n\n  public closeMenu = () => this.view!.closeMenu();\n}\n","export const VALID_LINK_PROTOCOLS = [\n  \"http\",\n  \"https\",\n  \"ftp\",\n  \"ftps\",\n  \"mailto\",\n  \"tel\",\n  \"callto\",\n  \"sms\",\n  \"cid\",\n  \"xmpp\",\n];\nexport const DEFAULT_LINK_PROTOCOL = \"https\";\n","import { Plugin, PluginKey, TextSelection } from \"prosemirror-state\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\n\nconst PLUGIN_KEY = new PluginKey(\"node-selection-keyboard\");\n// By default, typing with a node selection active will cause ProseMirror to\n// replace the node with one that contains editable content. This plugin blocks\n// this behaviour without also blocking things like keyboard shortcuts:\n//\n// - Lets through key presses that do not include alphanumeric characters. This\n// includes things like backspace/delete/home/end/etc.\n// - Lets through any key presses that include ctrl/meta keys. These will be\n// shortcuts of some kind like ctrl+C/mod+C.\n// - Special case for Enter key which creates a new paragraph block below and\n// sets the selection to it. This is just to bring the UX closer to Notion\n//\n// While a more elegant solution would probably process transactions instead of\n// keystrokes, this brings us most of the way to Notion's UX without much added\n// complexity.\nexport class NodeSelectionKeyboardPlugin extends BlockNoteExtension {\n  public static key() {\n    return \"nodeSelectionKeyboard\";\n  }\n\n  constructor() {\n    super();\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: PLUGIN_KEY,\n        props: {\n          handleKeyDown: (view, event) => {\n            // Checks for node selection\n            if (\"node\" in view.state.selection) {\n              // Checks if key press uses ctrl/meta modifier\n              if (event.ctrlKey || event.metaKey) {\n                return false;\n              }\n              // Checks if key press is alphanumeric\n              if (event.key.length === 1) {\n                event.preventDefault();\n\n                return true;\n              }\n              // Checks if key press is Enter\n              if (\n                event.key === \"Enter\" &&\n                !event.shiftKey &&\n                !event.altKey &&\n                !event.ctrlKey &&\n                !event.metaKey\n              ) {\n                const tr = view.state.tr;\n                view.dispatch(\n                  tr\n                    .insert(\n                      view.state.tr.selection.$to.after(),\n                      view.state.schema.nodes[\"paragraph\"].createChecked(),\n                    )\n                    .setSelection(\n                      new TextSelection(\n                        tr.doc.resolve(view.state.tr.selection.$to.after() + 1),\n                      ),\n                    ),\n                );\n\n                return true;\n              }\n            }\n\n            return false;\n          },\n        },\n      }),\n    );\n  }\n}\n","import { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\nimport { v4 } from \"uuid\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\n\nconst PLUGIN_KEY = new PluginKey(`blocknote-placeholder`);\n\nexport class PlaceholderPlugin extends BlockNoteExtension {\n  public static key() {\n    return \"placeholder\";\n  }\n\n  constructor(\n    editor: BlockNoteEditor<any, any, any>,\n    placeholders: Record<\n      string | \"default\" | \"emptyDocument\",\n      string | undefined\n    >,\n  ) {\n    super();\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: PLUGIN_KEY,\n        view: (view) => {\n          const uniqueEditorSelector = `placeholder-selector-${v4()}`;\n          view.dom.classList.add(uniqueEditorSelector);\n          const styleEl = document.createElement(\"style\");\n\n          const nonce = editor._tiptapEditor.options.injectNonce;\n          if (nonce) {\n            styleEl.setAttribute(\"nonce\", nonce);\n          }\n\n          if (editor.prosemirrorView?.root instanceof ShadowRoot) {\n            editor.prosemirrorView.root.append(styleEl);\n          } else {\n            editor.prosemirrorView?.root.head.appendChild(styleEl);\n          }\n\n          const styleSheet = styleEl.sheet!;\n\n          const getSelector = (additionalSelectors = \"\") =>\n            `.${uniqueEditorSelector} .bn-block-content${additionalSelectors} .bn-inline-content:has(> .ProseMirror-trailingBreak:only-child):before`;\n\n          try {\n            // FIXME: the names \"default\" and \"emptyDocument\" are hardcoded\n            const {\n              default: defaultPlaceholder,\n              emptyDocument: emptyPlaceholder,\n              ...rest\n            } = placeholders;\n\n            // add block specific placeholders\n            for (const [blockType, placeholder] of Object.entries(rest)) {\n              const blockTypeSelector = `[data-content-type=\"${blockType}\"]`;\n\n              styleSheet.insertRule(\n                `${getSelector(blockTypeSelector)} { content: ${JSON.stringify(\n                  placeholder,\n                )}; }`,\n              );\n            }\n\n            const onlyBlockSelector = `[data-is-only-empty-block]`;\n            const mustBeFocusedSelector = `[data-is-empty-and-focused]`;\n\n            // placeholder for when there's only one empty block\n            styleSheet.insertRule(\n              `${getSelector(onlyBlockSelector)} { content: ${JSON.stringify(\n                emptyPlaceholder,\n              )}; }`,\n            );\n\n            // placeholder for default blocks, only when the cursor is in the block (mustBeFocused)\n            styleSheet.insertRule(\n              `${getSelector(mustBeFocusedSelector)} { content: ${JSON.stringify(\n                defaultPlaceholder,\n              )}; }`,\n            );\n          } catch (e) {\n            // eslint-disable-next-line no-console\n            console.warn(\n              `Failed to insert placeholder CSS rule - this is likely due to the browser not supporting certain CSS pseudo-element selectors (:has, :only-child:, or :before)`,\n              e,\n            );\n          }\n\n          return {\n            destroy: () => {\n              if (editor.prosemirrorView?.root instanceof ShadowRoot) {\n                editor.prosemirrorView.root.removeChild(styleEl);\n              } else {\n                editor.prosemirrorView?.root.head.removeChild(styleEl);\n              }\n            },\n          };\n        },\n        props: {\n          decorations: (state) => {\n            const { doc, selection } = state;\n\n            if (!editor.isEditable) {\n              return;\n            }\n\n            if (!selection.empty) {\n              return;\n            }\n\n            // Don't show placeholder when the cursor is inside a code block\n            if (selection.$from.parent.type.spec.code) {\n              return;\n            }\n\n            const decs = [];\n\n            // decoration for when there's only one empty block\n            // positions are hardcoded for now\n            if (state.doc.content.size === 6) {\n              decs.push(\n                Decoration.node(2, 4, {\n                  \"data-is-only-empty-block\": \"true\",\n                }),\n              );\n            }\n\n            const $pos = selection.$anchor;\n            const node = $pos.parent;\n\n            if (node.content.size === 0) {\n              const before = $pos.before();\n\n              decs.push(\n                Decoration.node(before, before + node.nodeSize, {\n                  \"data-is-empty-and-focused\": \"true\",\n                }),\n              );\n            }\n\n            return DecorationSet.create(doc, decs);\n          },\n        },\n      }),\n    );\n  }\n}\n","import { findChildren } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\n\nconst PLUGIN_KEY = new PluginKey(`previous-blocks`);\n\nconst nodeAttributes: Record<string, string> = {\n  // Numbered List Items\n  index: \"index\",\n  // Headings\n  level: \"level\",\n  // All Blocks\n  type: \"type\",\n  depth: \"depth\",\n  \"depth-change\": \"depth-change\",\n};\n\n/**\n * This plugin tracks transformation of Block node attributes, so we can support CSS transitions.\n *\n * Problem it solves: ProseMirror recreates the DOM when transactions happen. So when a transaction changes a Node attribute,\n * it results in a completely new DOM element. This means CSS transitions don't work.\n *\n * Solution: When attributes change on a node, this plugin sets a data-* attribute with the \"previous\" value. This way we can still use CSS transitions. (See block.module.css)\n */\nexport class PreviousBlockTypePlugin extends BlockNoteExtension {\n  public static key() {\n    return \"previousBlockType\";\n  }\n\n  constructor() {\n    super();\n    let timeout: ReturnType<typeof setTimeout>;\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: PLUGIN_KEY,\n        view(_editorView) {\n          return {\n            update: async (view, _prevState) => {\n              if (this.key?.getState(view.state).updatedBlocks.size > 0) {\n                // use setTimeout 0 to clear the decorations so that at least\n                // for one DOM-render the decorations have been applied\n                timeout = setTimeout(() => {\n                  view.dispatch(\n                    view.state.tr.setMeta(PLUGIN_KEY, { clearUpdate: true }),\n                  );\n                }, 0);\n              }\n            },\n            destroy: () => {\n              if (timeout) {\n                clearTimeout(timeout);\n              }\n            },\n          };\n        },\n        state: {\n          init() {\n            return {\n              // Block attributes, by block ID, from just before the previous transaction.\n              prevTransactionOldBlockAttrs: {} as any,\n              // Block attributes, by block ID, from just before the current transaction.\n              currentTransactionOldBlockAttrs: {} as any,\n              // Set of IDs of blocks whose attributes changed from the current transaction.\n              updatedBlocks: new Set<string>(),\n            };\n          },\n\n          apply(transaction, prev, oldState, newState) {\n            prev.currentTransactionOldBlockAttrs = {};\n            prev.updatedBlocks.clear();\n\n            if (!transaction.docChanged || oldState.doc.eq(newState.doc)) {\n              return prev;\n            }\n\n            // TODO: Instead of iterating through the entire document, only check nodes affected by the transactions. Will\n            //  also probably require checking nodes affected by the previous transaction too.\n            // We didn't get this to work yet:\n            // const transform = combineTransactionSteps(oldState.doc, [transaction]);\n            // // const { mapping } = transform;\n            // const changes = getChangedRanges(transform);\n            //\n            // changes.forEach(({ oldRange, newRange }) => {\n            // const oldNodes = findChildrenInRange(\n            //   oldState.doc,\n            //   oldRange,\n            //   (node) => node.attrs.id\n            // );\n            //\n            // const newNodes = findChildrenInRange(\n            //   newState.doc,\n            //   newRange,\n            //   (node) => node.attrs.id\n            // );\n\n            const currentTransactionOriginalOldBlockAttrs = {} as any;\n\n            const oldNodes = findChildren(\n              oldState.doc,\n              (node) => node.attrs.id,\n            );\n            const oldNodesById = new Map(\n              oldNodes.map((node) => [node.node.attrs.id, node]),\n            );\n            const newNodes = findChildren(\n              newState.doc,\n              (node) => node.attrs.id,\n            );\n\n            // Traverses all block containers in the new editor state.\n            for (const node of newNodes) {\n              const oldNode = oldNodesById.get(node.node.attrs.id);\n\n              const oldContentNode = oldNode?.node.firstChild;\n              const newContentNode = node.node.firstChild;\n\n              if (oldNode && oldContentNode && newContentNode) {\n                const newAttrs = {\n                  index: newContentNode.attrs.index,\n                  level: newContentNode.attrs.level,\n                  type: newContentNode.type.name,\n                  depth: newState.doc.resolve(node.pos).depth,\n                };\n\n                let oldAttrs = {\n                  index: oldContentNode.attrs.index,\n                  level: oldContentNode.attrs.level,\n                  type: oldContentNode.type.name,\n                  depth: oldState.doc.resolve(oldNode.pos).depth,\n                };\n\n                currentTransactionOriginalOldBlockAttrs[node.node.attrs.id] =\n                  oldAttrs;\n\n                // Whenever a transaction is appended by the OrderedListItemIndexPlugin, it's given the metadata:\n                // { \"orderedListIndexing\": true }\n                // These appended transactions happen immediately after any transaction which causes ordered list item\n                // indices to require updating, including those which trigger animations. Therefore, these animations are\n                // immediately overridden when the PreviousBlockTypePlugin processes the appended transaction, despite only\n                // the listItemIndex attribute changing. To solve this, oldAttrs must be edited for transactions with the\n                // \"orderedListIndexing\" metadata, so the correct animation can be re-triggered.\n                if (transaction.getMeta(\"numberedListIndexing\")) {\n                  // If the block existed before the transaction, gets the attributes from before the previous transaction\n                  // (i.e. the transaction that caused list item indices to need updating).\n                  if (node.node.attrs.id in prev.prevTransactionOldBlockAttrs) {\n                    oldAttrs =\n                      prev.prevTransactionOldBlockAttrs[node.node.attrs.id];\n                  }\n\n                  // Stops list item indices themselves being animated (looks smoother), unless the block's content type is\n                  // changing from a numbered list item to something else.\n                  if (newAttrs.type === \"numberedListItem\") {\n                    oldAttrs.index = newAttrs.index;\n                  }\n                }\n\n                prev.currentTransactionOldBlockAttrs[node.node.attrs.id] =\n                  oldAttrs;\n\n                // TODO: faster deep equal?\n                if (JSON.stringify(oldAttrs) !== JSON.stringify(newAttrs)) {\n                  (oldAttrs as any)[\"depth-change\"] =\n                    oldAttrs.depth - newAttrs.depth;\n\n                  // for debugging:\n                  // console.log(\n                  //   \"id:\",\n                  //   node.node.attrs.id,\n                  //   \"previousBlockTypePlugin changes detected, oldAttrs\",\n                  //   oldAttrs,\n                  //   \"new\",\n                  //   newAttrs\n                  // );\n\n                  prev.updatedBlocks.add(node.node.attrs.id);\n                }\n              }\n            }\n\n            prev.prevTransactionOldBlockAttrs =\n              currentTransactionOriginalOldBlockAttrs;\n\n            return prev;\n          },\n        },\n        props: {\n          decorations(state) {\n            const pluginState = (this as Plugin).getState(state);\n            if (pluginState.updatedBlocks.size === 0) {\n              return undefined;\n            }\n\n            const decorations: Decoration[] = [];\n\n            state.doc.descendants((node, pos) => {\n              if (!node.attrs.id) {\n                return;\n              }\n\n              if (!pluginState.updatedBlocks.has(node.attrs.id)) {\n                return;\n              }\n\n              const prevAttrs =\n                pluginState.currentTransactionOldBlockAttrs[node.attrs.id];\n              const decorationAttrs: any = {};\n\n              for (const [nodeAttr, val] of Object.entries(prevAttrs)) {\n                decorationAttrs[\"data-prev-\" + nodeAttributes[nodeAttr]] =\n                  val || \"none\";\n              }\n\n              // for debugging:\n              // console.log(\n              //   \"previousBlockTypePlugin committing decorations\",\n              //   decorationAttrs\n              // );\n\n              const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                ...decorationAttrs,\n              });\n\n              decorations.push(decoration);\n            });\n\n            return DecorationSet.create(state.doc, decorations);\n          },\n        },\n      }),\n    );\n  }\n}\n","import { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\nimport { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\n\nconst PLUGIN_KEY = new PluginKey(`blocknote-show-selection`);\n\n/**\n * Plugin that shows adds a decoration around the current selection\n * This can be used to highlight the current selection in the UI even when the\n * text editor is not focused.\n */\nexport class ShowSelectionPlugin extends BlockNoteExtension {\n  public static key() {\n    return \"showSelection\";\n  }\n\n  private enabled = false;\n\n  public constructor(private readonly editor: BlockNoteEditor<any, any, any>) {\n    super();\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: PLUGIN_KEY,\n        props: {\n          decorations: (state) => {\n            const { doc, selection } = state;\n\n            if (!this.enabled) {\n              return DecorationSet.empty;\n            }\n\n            const dec = Decoration.inline(selection.from, selection.to, {\n              \"data-show-selection\": \"true\",\n            });\n\n            return DecorationSet.create(doc, [dec]);\n          },\n        },\n      }),\n    );\n  }\n\n  public setEnabled(enabled: boolean) {\n    if (this.enabled === enabled) {\n      return;\n    }\n\n    this.enabled = enabled;\n\n    this.editor.transact((tr) => tr.setMeta(PLUGIN_KEY, {}));\n  }\n\n  public getEnabled() {\n    return this.enabled;\n  }\n}\n","import { EditorView } from \"prosemirror-view\";\n\nexport function getDraggableBlockFromElement(\n  element: Element,\n  view: EditorView,\n) {\n  while (\n    element &&\n    element.parentElement &&\n    element.parentElement !== view.dom &&\n    element.getAttribute?.(\"data-node-type\") !== \"blockContainer\"\n  ) {\n    element = element.parentElement;\n  }\n  if (element.getAttribute?.(\"data-node-type\") !== \"blockContainer\") {\n    return undefined;\n  }\n  return { node: element as HTMLElement, id: element.getAttribute(\"data-id\")! };\n}\n","import { Fragment, Node, ResolvedPos, Slice } from \"prosemirror-model\";\nimport { Selection } from \"prosemirror-state\";\nimport { Mappable } from \"prosemirror-transform\";\n\n/**\n * This class represents an editor selection which spans multiple nodes/blocks. It's currently only used to allow users\n * to drag multiple blocks at the same time. Expects the selection anchor and head to be between nodes, i.e. just before\n * the first target node and just after the last, and that anchor and head are at the same nesting level.\n *\n * Partially based on ProseMirror's NodeSelection implementation:\n * (https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.ts)\n * MultipleNodeSelection differs from NodeSelection in the following ways:\n * 1. Stores which nodes are included in the selection instead of just a single node.\n * 2. Already expects the selection to start just before the first target node and ends just after the last, while a\n * NodeSelection automatically sets both anchor and head to just before the single target node.\n */\nexport class MultipleNodeSelection extends Selection {\n  nodes: Array<Node>;\n\n  constructor($anchor: ResolvedPos, $head: ResolvedPos) {\n    super($anchor, $head);\n\n    // Parent is at the same nesting level as anchor/head since they are just before/ just after target nodes.\n    const parentNode = $anchor.node();\n\n    this.nodes = [];\n    $anchor.doc.nodesBetween($anchor.pos, $head.pos, (node, _pos, parent) => {\n      if (parent !== null && parent.eq(parentNode)) {\n        this.nodes.push(node);\n        return false;\n      }\n      return;\n    });\n  }\n\n  static create(doc: Node, from: number, to = from): MultipleNodeSelection {\n    return new MultipleNodeSelection(doc.resolve(from), doc.resolve(to));\n  }\n\n  content(): Slice {\n    return new Slice(Fragment.from(this.nodes), 0, 0);\n  }\n\n  eq(selection: Selection): boolean {\n    if (!(selection instanceof MultipleNodeSelection)) {\n      return false;\n    }\n\n    if (this.nodes.length !== selection.nodes.length) {\n      return false;\n    }\n\n    if (this.from !== selection.from || this.to !== selection.to) {\n      return false;\n    }\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      if (!this.nodes[i].eq(selection.nodes[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  map(doc: Node, mapping: Mappable): Selection {\n    const fromResult = mapping.mapResult(this.from);\n    const toResult = mapping.mapResult(this.to);\n\n    if (toResult.deleted) {\n      return Selection.near(doc.resolve(fromResult.pos));\n    }\n\n    if (fromResult.deleted) {\n      return Selection.near(doc.resolve(toResult.pos));\n    }\n\n    return new MultipleNodeSelection(\n      doc.resolve(fromResult.pos),\n      doc.resolve(toResult.pos),\n    );\n  }\n\n  toJSON(): any {\n    return { type: \"multiple-node\", anchor: this.anchor, head: this.head };\n  }\n}\n\nSelection.jsonID(\"multiple-node\", MultipleNodeSelection);\n","import { Node } from \"prosemirror-model\";\nimport { NodeSelection, Selection } from \"prosemirror-state\";\nimport { EditorView } from \"prosemirror-view\";\n\nimport { createExternalHTMLExporter } from \"../../api/exporters/html/externalHTMLExporter.js\";\nimport { cleanHTMLToMarkdown } from \"../../api/exporters/markdown/markdownExporter.js\";\nimport { fragmentToBlocks } from \"../../api/nodeConversions/fragmentToBlocks.js\";\nimport { getNodeById } from \"../../api/nodeUtil.js\";\nimport { Block } from \"../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { UiElementPosition } from \"../../extensions-shared/UiElementPosition.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\nimport { MultipleNodeSelection } from \"./MultipleNodeSelection.js\";\n\nlet dragImageElement: Element | undefined;\n\nexport type SideMenuState<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> = UiElementPosition & {\n  // The block that the side menu is attached to.\n  block: Block<BSchema, I, S>;\n};\n\nfunction blockPositionsFromSelection(selection: Selection, doc: Node) {\n  // Absolute positions just before the first block spanned by the selection, and just after the last block. Having the\n  // selection start and end just before and just after the target blocks ensures no whitespace/line breaks are left\n  // behind after dragging & dropping them.\n  let beforeFirstBlockPos: number;\n  let afterLastBlockPos: number;\n\n  // Even the user starts dragging blocks but drops them in the same place, the selection will still be moved just\n  // before & just after the blocks spanned by the selection, and therefore doesn't need to change if they try to drag\n  // the same blocks again. If this happens, the anchor & head move out of the block content node they were originally\n  // in. If the anchor should update but the head shouldn't and vice versa, it means the user selection is outside a\n  // block content node, which should never happen.\n  const selectionStartInBlockContent =\n    doc.resolve(selection.from).node().type.spec.group === \"blockContent\";\n  const selectionEndInBlockContent =\n    doc.resolve(selection.to).node().type.spec.group === \"blockContent\";\n\n  // Ensures that entire outermost nodes are selected if the selection spans multiple nesting levels.\n  const minDepth = Math.min(selection.$anchor.depth, selection.$head.depth);\n\n  if (selectionStartInBlockContent && selectionEndInBlockContent) {\n    // Absolute positions at the start of the first block in the selection and at the end of the last block. User\n    // selections will always start and end in block content nodes, but we want the start and end positions of their\n    // parent block nodes, which is why minDepth - 1 is used.\n    const startFirstBlockPos = selection.$from.start(minDepth - 1);\n    const endLastBlockPos = selection.$to.end(minDepth - 1);\n\n    // Shifting start and end positions by one moves them just outside the first and last selected blocks.\n    beforeFirstBlockPos = doc.resolve(startFirstBlockPos - 1).pos;\n    afterLastBlockPos = doc.resolve(endLastBlockPos + 1).pos;\n  } else {\n    beforeFirstBlockPos = selection.from;\n    afterLastBlockPos = selection.to;\n  }\n\n  return { from: beforeFirstBlockPos, to: afterLastBlockPos };\n}\n\nfunction setDragImage(view: EditorView, from: number, to = from) {\n  if (from === to) {\n    // Moves to position to be just after the first (and only) selected block.\n    to += view.state.doc.resolve(from + 1).node().nodeSize;\n  }\n\n  // Parent element is cloned to remove all unselected children without affecting the editor content.\n  const parentClone = view.domAtPos(from).node.cloneNode(true) as Element;\n  const parent = view.domAtPos(from).node as Element;\n\n  const getElementIndex = (parentElement: Element, targetElement: Element) =>\n    Array.prototype.indexOf.call(parentElement.children, targetElement);\n\n  const firstSelectedBlockIndex = getElementIndex(\n    parent,\n    // Expects from position to be just before the first selected block.\n    view.domAtPos(from + 1).node.parentElement!,\n  );\n  const lastSelectedBlockIndex = getElementIndex(\n    parent,\n    // Expects to position to be just after the last selected block.\n    view.domAtPos(to - 1).node.parentElement!,\n  );\n\n  for (let i = parent.childElementCount - 1; i >= 0; i--) {\n    if (i > lastSelectedBlockIndex || i < firstSelectedBlockIndex) {\n      parentClone.removeChild(parentClone.children[i]);\n    }\n  }\n\n  // dataTransfer.setDragImage(element) only works if element is attached to the DOM.\n  unsetDragImage(view.root);\n  dragImageElement = parentClone;\n\n  // Browsers may have CORS policies which prevents iframes from being\n  // manipulated, so better to stay on the safe side and remove them from the\n  // drag preview. The drag preview doesn't work with iframes anyway.\n  const iframes = dragImageElement.getElementsByTagName(\"iframe\");\n  for (let i = 0; i < iframes.length; i++) {\n    const iframe = iframes[i];\n    const parent = iframe.parentElement;\n\n    if (parent) {\n      parent.removeChild(iframe);\n    }\n  }\n\n  // TODO: This is hacky, need a better way of assigning classes to the editor so that they can also be applied to the\n  //  drag preview.\n  const classes = view.dom.className.split(\" \");\n  const inheritedClasses = classes\n    .filter(\n      (className) =>\n        className !== \"ProseMirror\" &&\n        className !== \"bn-root\" &&\n        className !== \"bn-editor\",\n    )\n    .join(\" \");\n\n  dragImageElement.className =\n    dragImageElement.className + \" bn-drag-preview \" + inheritedClasses;\n\n  if (view.root instanceof ShadowRoot) {\n    view.root.appendChild(dragImageElement);\n  } else {\n    view.root.body.appendChild(dragImageElement);\n  }\n}\n\nexport function unsetDragImage(rootEl: Document | ShadowRoot) {\n  if (dragImageElement !== undefined) {\n    if (rootEl instanceof ShadowRoot) {\n      rootEl.removeChild(dragImageElement);\n    } else {\n      rootEl.body.removeChild(dragImageElement);\n    }\n\n    dragImageElement = undefined;\n  }\n}\n\nexport function dragStart<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  e: { dataTransfer: DataTransfer | null; clientY: number },\n  block: Block<BSchema, I, S>,\n  editor: BlockNoteEditor<BSchema, I, S>,\n) {\n  if (!e.dataTransfer) {\n    return;\n  }\n\n  const view = editor.prosemirrorView;\n  if (!view) {\n    return;\n  }\n\n  const posInfo = getNodeById(block.id, view.state.doc);\n  if (!posInfo) {\n    throw new Error(`Block with ID ${block.id} not found`);\n  }\n  const pos = posInfo.posBeforeNode;\n\n  if (pos != null) {\n    const selection = view.state.selection;\n    const doc = view.state.doc;\n\n    const { from, to } = blockPositionsFromSelection(selection, doc);\n\n    const draggedBlockInSelection = from <= pos && pos < to;\n    const multipleBlocksSelected =\n      selection.$anchor.node() !== selection.$head.node() ||\n      selection instanceof MultipleNodeSelection;\n\n    if (draggedBlockInSelection && multipleBlocksSelected) {\n      view.dispatch(\n        view.state.tr.setSelection(MultipleNodeSelection.create(doc, from, to)),\n      );\n      setDragImage(view, from, to);\n    } else {\n      view.dispatch(\n        view.state.tr.setSelection(NodeSelection.create(view.state.doc, pos)),\n      );\n      setDragImage(view, pos);\n    }\n\n    const selectedSlice = view.state.selection.content();\n    const schema = editor.pmSchema;\n\n    const clipboardHTML =\n      view.serializeForClipboard(selectedSlice).dom.innerHTML;\n\n    const externalHTMLExporter = createExternalHTMLExporter(schema, editor);\n\n    const blocks = fragmentToBlocks(selectedSlice.content);\n    const externalHTML = externalHTMLExporter.exportBlocks(blocks, {});\n\n    const plainText = cleanHTMLToMarkdown(externalHTML);\n\n    e.dataTransfer.clearData();\n    e.dataTransfer.setData(\"blocknote/html\", clipboardHTML);\n    e.dataTransfer.setData(\"text/html\", externalHTML);\n    e.dataTransfer.setData(\"text/plain\", plainText);\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setDragImage(dragImageElement!, 0, 0);\n  }\n}\n","import { DOMParser, Slice } from \"@tiptap/pm/model\";\nimport {\n  EditorState,\n  Plugin,\n  PluginKey,\n  PluginView,\n  TextSelection,\n} from \"@tiptap/pm/state\";\nimport { EditorView } from \"@tiptap/pm/view\";\n\nimport { Block } from \"../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\nimport { UiElementPosition } from \"../../extensions-shared/UiElementPosition.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\nimport { initializeESMDependencies } from \"../../util/esmDependencies.js\";\nimport { getDraggableBlockFromElement } from \"../getDraggableBlockFromElement.js\";\nimport { dragStart, unsetDragImage } from \"./dragging.js\";\n\nexport type SideMenuState<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> = UiElementPosition & {\n  // The block that the side menu is attached to.\n  block: Block<BSchema, I, S>;\n};\n\nconst DISTANCE_TO_CONSIDER_EDITOR_BOUNDS = 250;\n\nfunction getBlockFromCoords(\n  view: EditorView,\n  coords: { left: number; top: number },\n  adjustForColumns = true,\n) {\n  const elements = view.root.elementsFromPoint(coords.left, coords.top);\n\n  for (const element of elements) {\n    if (!view.dom.contains(element)) {\n      // probably a ui overlay like formatting toolbar etc\n      continue;\n    }\n    if (adjustForColumns) {\n      const column = element.closest(\"[data-node-type=columnList]\");\n      if (column) {\n        return getBlockFromCoords(\n          view,\n          {\n            // TODO can we do better than this?\n            left: coords.left + 50, // bit hacky, but if we're inside a column, offset x position to right to account for the width of sidemenu itself\n            top: coords.top,\n          },\n          false,\n        );\n      }\n    }\n    return getDraggableBlockFromElement(element, view);\n  }\n  return undefined;\n}\n\nfunction getBlockFromMousePos(\n  mousePos: {\n    x: number;\n    y: number;\n  },\n  view: EditorView,\n): { node: HTMLElement; id: string } | undefined {\n  // Editor itself may have padding or other styling which affects\n  // size/position, so we get the boundingRect of the first child (i.e. the\n  // blockGroup that wraps all blocks in the editor) for more accurate side\n  // menu placement.\n  if (!view.dom.firstChild) {\n    return;\n  }\n\n  const editorBoundingBox = (\n    view.dom.firstChild as HTMLElement\n  ).getBoundingClientRect();\n\n  // Gets block at mouse cursor's position.\n  const coords = {\n    // Clamps the x position to the editor's bounding box.\n    left: Math.min(\n      Math.max(editorBoundingBox.left + 10, mousePos.x),\n      editorBoundingBox.right - 10,\n    ),\n    top: mousePos.y,\n  };\n\n  const referenceBlock = getBlockFromCoords(view, coords);\n\n  if (!referenceBlock) {\n    // could not find the reference block\n    return undefined;\n  }\n\n  /**\n   * Because blocks may be nested, we need to check the right edge of the parent block:\n   * ```\n   * | BlockA        |\n   * x | BlockB     y|\n   * ```\n   * Hovering at position x (left edge of BlockB) would return BlockA.\n   * Instead, we check at position y (right edge of BlockA) to correctly identify BlockB.\n   */\n  const referenceBlocksBoundingBox =\n    referenceBlock.node.getBoundingClientRect();\n  return getBlockFromCoords(\n    view,\n    {\n      left: referenceBlocksBoundingBox.right - 10,\n      top: mousePos.y,\n    },\n    false,\n  );\n}\n\n/**\n * With the sidemenu plugin we can position a menu next to a hovered block.\n */\nexport class SideMenuView<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> implements PluginView\n{\n  public state?: SideMenuState<BSchema, I, S>;\n  public readonly emitUpdate: (state: SideMenuState<BSchema, I, S>) => void;\n\n  private mousePos: { x: number; y: number } | undefined;\n\n  private hoveredBlock: HTMLElement | undefined;\n\n  public menuFrozen = false;\n\n  public isDragOrigin = false;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<BSchema, I, S>,\n    private readonly pmView: EditorView,\n    emitUpdate: (state: SideMenuState<BSchema, I, S>) => void,\n  ) {\n    this.emitUpdate = () => {\n      if (!this.state) {\n        throw new Error(\"Attempting to update uninitialized side menu\");\n      }\n\n      emitUpdate(this.state);\n    };\n\n    this.pmView.root.addEventListener(\n      \"dragstart\",\n      this.onDragStart as EventListener,\n    );\n    this.pmView.root.addEventListener(\n      \"dragover\",\n      this.onDragOver as EventListener,\n    );\n    this.pmView.root.addEventListener(\n      \"drop\",\n      this.onDrop as EventListener,\n      true,\n    );\n    this.pmView.root.addEventListener(\n      \"dragend\",\n      this.onDragEnd as EventListener,\n      true,\n    );\n    initializeESMDependencies();\n\n    // Shows or updates menu position whenever the cursor moves, if the menu isn't frozen.\n    this.pmView.root.addEventListener(\n      \"mousemove\",\n      this.onMouseMove as EventListener,\n      true,\n    );\n\n    // Hides and unfreezes the menu whenever the user presses a key.\n    this.pmView.root.addEventListener(\n      \"keydown\",\n      this.onKeyDown as EventListener,\n      true,\n    );\n\n    // Setting capture=true ensures that any parent container of the editor that\n    // gets scrolled will trigger the scroll event. Scroll events do not bubble\n    // and so won't propagate to the document by default.\n    pmView.root.addEventListener(\"scroll\", this.onScroll, true);\n  }\n\n  updateState = (state: SideMenuState<BSchema, I, S>) => {\n    this.state = state;\n    this.emitUpdate(this.state);\n  };\n\n  updateStateFromMousePos = () => {\n    if (this.menuFrozen || !this.mousePos) {\n      return;\n    }\n\n    const closestEditor = this.findClosestEditorElement({\n      clientX: this.mousePos.x,\n      clientY: this.mousePos.y,\n    });\n\n    if (\n      closestEditor?.element !== this.pmView.dom ||\n      closestEditor.distance > DISTANCE_TO_CONSIDER_EDITOR_BOUNDS\n    ) {\n      if (this.state?.show) {\n        this.state.show = false;\n        this.updateState(this.state);\n      }\n      return;\n    }\n\n    const block = getBlockFromMousePos(this.mousePos, this.pmView);\n\n    // Closes the menu if the mouse cursor is beyond the editor vertically.\n    if (!block || !this.editor.isEditable) {\n      if (this.state?.show) {\n        this.state.show = false;\n        this.updateState(this.state);\n      }\n\n      return;\n    }\n\n    // Doesn't update if the menu is already open and the mouse cursor is still hovering the same block.\n    if (\n      this.state?.show &&\n      this.hoveredBlock?.hasAttribute(\"data-id\") &&\n      this.hoveredBlock?.getAttribute(\"data-id\") === block.id\n    ) {\n      return;\n    }\n\n    this.hoveredBlock = block.node;\n\n    // Gets the block's content node, which lets to ignore child blocks when determining the block menu's position.\n    // TODO: needed?\n    const blockContent = block.node.firstChild as HTMLElement;\n\n    if (!blockContent) {\n      return;\n    }\n\n    // TODO: needed?\n\n    // Shows or updates elements.\n    if (this.editor.isEditable) {\n      const blockContentBoundingBox = blockContent.getBoundingClientRect();\n      const column = block.node.closest(\"[data-node-type=column]\");\n      this.updateState({\n        show: true,\n        referencePos: new DOMRect(\n          column\n            ? // We take the first child as column elements have some default\n              // padding. This is a little weird since this child element will\n              // be the first block, but since it's always non-nested and we\n              // only take the x coordinate, it's ok.\n              column.firstElementChild!.getBoundingClientRect().x\n            : (\n                this.pmView.dom.firstChild as HTMLElement\n              ).getBoundingClientRect().x,\n          blockContentBoundingBox.y,\n          blockContentBoundingBox.width,\n          blockContentBoundingBox.height,\n        ),\n        block: this.editor.getBlock(\n          this.hoveredBlock!.getAttribute(\"data-id\")!,\n        )!,\n      });\n    }\n  };\n\n  /**\n   * If a block is being dragged, ProseMirror usually gets the context of what's\n   * being dragged from `view.dragging`, which is automatically set when a\n   * `dragstart` event fires in the editor. However, if the user tries to drag\n   * and drop blocks between multiple editors, only the one in which the drag\n   * began has that context, so we need to set it on the others manually. This\n   * ensures that PM always drops the blocks in between other blocks, and not\n   * inside them.\n   *\n   * After the `dragstart` event fires on the drag handle, it sets\n   * `blocknote/html` data on the clipboard. This handler fires right after,\n   * parsing the `blocknote/html` data into nodes and setting them on\n   * `view.dragging`.\n   *\n   * Note: Setting `view.dragging` on `dragover` would be better as the user\n   * could then drag between editors in different windows, but you can only\n   * access `dataTransfer` contents on `dragstart` and `drop` events.\n   */\n  onDragStart = (event: DragEvent) => {\n    const html = event.dataTransfer?.getData(\"blocknote/html\");\n    if (!html) {\n      return;\n    }\n\n    if (this.pmView.dragging) {\n      // already dragging, so no-op\n      return;\n    }\n\n    const element = document.createElement(\"div\");\n    element.innerHTML = html;\n\n    const parser = DOMParser.fromSchema(this.pmView.state.schema);\n    const node = parser.parse(element, {\n      topNode: this.pmView.state.schema.nodes[\"blockGroup\"].create(),\n    });\n\n    this.pmView.dragging = {\n      slice: new Slice(node.content, 0, 0),\n      move: true,\n    };\n  };\n\n  /**\n   * Finds the closest editor visually to the given coordinates\n   */\n  private findClosestEditorElement = (coords: {\n    clientX: number;\n    clientY: number;\n  }) => {\n    // Get all editor elements in the document\n    const editors = Array.from(this.pmView.root.querySelectorAll(\".bn-editor\"));\n\n    if (editors.length === 0) {\n      return null;\n    }\n\n    // Find the editor with the smallest distance to the coordinates\n    let closestEditor = editors[0];\n    let minDistance = Number.MAX_VALUE;\n\n    editors.forEach((editor) => {\n      const rect = editor\n        .querySelector(\".bn-block-group\")!\n        .getBoundingClientRect();\n\n      const distanceX =\n        coords.clientX < rect.left\n          ? rect.left - coords.clientX\n          : coords.clientX > rect.right\n            ? coords.clientX - rect.right\n            : 0;\n\n      const distanceY =\n        coords.clientY < rect.top\n          ? rect.top - coords.clientY\n          : coords.clientY > rect.bottom\n            ? coords.clientY - rect.bottom\n            : 0;\n\n      const distance = Math.sqrt(\n        Math.pow(distanceX, 2) + Math.pow(distanceY, 2),\n      );\n\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestEditor = editor;\n      }\n    });\n\n    return {\n      element: closestEditor,\n      distance: minDistance,\n    };\n  };\n\n  /**\n   * This dragover event handler listens at the document level,\n   * and is trying to handle dragover events for all editors.\n   *\n   * It specifically is trying to handle the following cases:\n   *  - If the dragover event is within the bounds of any editor, then it does nothing\n   *  - If the dragover event is outside the bounds of any editor, but close enough (within DISTANCE_TO_CONSIDER_EDITOR_BOUNDS) to the closest editor,\n   *    then it dispatches a synthetic dragover event to the closest editor (which will trigger the drop-cursor to be shown on that editor)\n   *  - If the dragover event is outside the bounds of the current editor, then it will dispatch a synthetic dragleave event to the current editor\n   *    (which will trigger the drop-cursor to be removed from the current editor)\n   *\n   * The synthetic event is a necessary evil because we do not control prosemirror-dropcursor to be able to show the drop-cursor within the range we want\n   */\n  onDragOver = (event: DragEvent) => {\n    if ((event as any).synthetic) {\n      return;\n    }\n\n    const dragEventContext = this.getDragEventContext(event);\n\n    if (!dragEventContext || !dragEventContext.isDropPoint) {\n      // This is not a drag event that we are interested in\n      // so, we close the drop-cursor\n      this.closeDropCursor();\n      return;\n    }\n\n    if (\n      dragEventContext.isDropPoint &&\n      !dragEventContext.isDropWithinEditorBounds\n    ) {\n      // we are the drop point, but the drag over event is not within the bounds of this editor instance\n      // so, we need to dispatch an event that is in the bounds of this editor instance\n      this.dispatchSyntheticEvent(event);\n    }\n  };\n\n  /**\n   * Closes the drop-cursor for the current editor\n   */\n  private closeDropCursor = () => {\n    const evt = new Event(\"dragleave\", { bubbles: false });\n    // It needs to be synthetic, so we don't accidentally think it is a real dragend event\n    (evt as any).synthetic = true;\n    // We dispatch the event to the current editor, so that the drop-cursor is removed for it\n    this.pmView.dom.dispatchEvent(evt);\n  };\n\n  /**\n   * It is surprisingly difficult to determine the information we need to know about a drag event\n   *\n   * This function is trying to determine the following:\n   *  - Whether the current editor instance is the drop point\n   *  - Whether the current editor instance is the drag origin\n   *  - Whether the drop event is within the bounds of the current editor instance\n   */\n  getDragEventContext = (event: DragEvent) => {\n    // We need to check if there is text content that is being dragged (select some text & just drag it)\n    const textContentIsBeingDragged =\n      !event.dataTransfer?.types.includes(\"blocknote/html\") &&\n      Boolean(this.pmView.dragging);\n    // This is the side menu drag from this plugin\n    const sideMenuIsBeingDragged = Boolean(this.isDragOrigin);\n    // Tells us that the current editor instance has a drag ongoing (either text or side menu)\n    const isDragOrigin = textContentIsBeingDragged || sideMenuIsBeingDragged;\n\n    // Tells us which editor instance is the closest to the drag event (whether or not it is actually reasonably close)\n    const closestEditor = this.findClosestEditorElement(event);\n\n    // We arbitrarily decide how far is \"too far\" from the closest editor to be considered a drop point\n    if (\n      !closestEditor ||\n      closestEditor.distance > DISTANCE_TO_CONSIDER_EDITOR_BOUNDS\n    ) {\n      // we are too far from the closest editor, or no editor was found\n      return undefined;\n    }\n\n    // We check if the closest editor is the same as the current editor instance (which is the drop point)\n    const isDropPoint = closestEditor.element === this.pmView.dom;\n    // We check if the current editor instance is the same as the editor instance that the drag event is happening within\n    const isDropWithinEditorBounds =\n      isDropPoint && closestEditor.distance === 0;\n\n    // We never want to handle drop events that are not related to us\n    if (!isDropPoint && !isDragOrigin) {\n      // we are not the drop point or drag origin, so not relevant to us\n      return undefined;\n    }\n\n    return {\n      isDropPoint,\n      isDropWithinEditorBounds,\n      isDragOrigin,\n    };\n  };\n\n  /**\n   * The drop event handler listens at the document level,\n   * and handles drop events for all editors.\n   *\n   * It specifically handles the following cases:\n   *  - If we are both the drag origin and drop point:\n   *    - Let normal drop handling take over\n   *  - If we are the drop point but not the drag origin:\n   *    - Collapse selection to prevent PM from deleting unrelated content\n   *    - If drop event is outside our editor bounds, dispatch synthetic drop event to our editor\n   *  - If we are the drag origin but not the drop point:\n   *    - Delete the dragged content from our editor after a delay\n   */\n  onDrop = (event: DragEvent) => {\n    if ((event as any).synthetic) {\n      return;\n    }\n\n    const context = this.getDragEventContext(event);\n    if (!context) {\n      this.closeDropCursor();\n      // This is not a drag event that we are interested in\n      return;\n    }\n    const { isDropPoint, isDropWithinEditorBounds, isDragOrigin } = context;\n\n    if (!isDropWithinEditorBounds && isDropPoint) {\n      // Any time that the drop event is outside of the editor bounds (but still close to an editor instance)\n      // We dispatch a synthetic event that is in the bounds of the editor instance, to have the correct drop point\n      this.dispatchSyntheticEvent(event);\n    }\n\n    if (isDropPoint) {\n      // The current instance is the drop point\n\n      if (this.pmView.dragging) {\n        // Do not collapse selection when text content is being dragged\n        return;\n      }\n      // Because the editor selection is unrelated to the dragged content, we\n      // don't want PM to delete its content. Therefore, we collapse the\n      // selection.\n      this.pmView.dispatch(\n        this.pmView.state.tr.setSelection(\n          TextSelection.create(\n            this.pmView.state.tr.doc,\n            this.pmView.state.tr.selection.anchor,\n          ),\n        ),\n      );\n      return;\n    } else if (isDragOrigin) {\n      // The current instance is the drag origin, but not the drop point\n      // our content got dropped somewhere else\n\n      // Because the editor from which the block originates doesn't get a drop\n      // event on it, PM doesn't delete its selected content. Therefore, we\n      // need to do so manually.\n      //\n      // Note: Deleting the selected content from the editor from which the\n      // block originates, may change its height. This can cause the position of\n      // the editor in which the block is being dropping to shift, before it\n      // can handle the drop event. That in turn can cause the drop to happen\n      // somewhere other than the user intended. To get around this, we delay\n      // deleting the selected content until all editors have had the chance to\n      // handle the event.\n      setTimeout(\n        () => this.pmView.dispatch(this.pmView.state.tr.deleteSelection()),\n        0,\n      );\n      return;\n    }\n  };\n\n  onDragEnd = (event: DragEvent) => {\n    if ((event as any).synthetic) {\n      return;\n    }\n    // When the user starts dragging a block, `view.dragging` is set on all\n    // BlockNote editors. However, when the drag ends, only the editor that the\n    // drag originated in automatically clears `view.dragging`. Therefore, we\n    // have to manually clear it on all editors.\n    this.pmView.dragging = null;\n  };\n\n  onKeyDown = (_event: KeyboardEvent) => {\n    if (this.state?.show && this.editor.isFocused()) {\n      // Typing in editor should hide side menu\n      this.state.show = false;\n      this.emitUpdate(this.state);\n    }\n  };\n\n  onMouseMove = (event: MouseEvent) => {\n    if (this.menuFrozen) {\n      return;\n    }\n\n    this.mousePos = { x: event.clientX, y: event.clientY };\n\n    // We want the full area of the editor to check if the cursor is hovering\n    // above it though.\n    const editorOuterBoundingBox = this.pmView.dom.getBoundingClientRect();\n    const cursorWithinEditor =\n      this.mousePos.x > editorOuterBoundingBox.left &&\n      this.mousePos.x < editorOuterBoundingBox.right &&\n      this.mousePos.y > editorOuterBoundingBox.top &&\n      this.mousePos.y < editorOuterBoundingBox.bottom;\n\n    // TODO: remove parentElement, but then we need to remove padding from boundingbox or find a different solution\n    const editorWrapper = this.pmView.dom!.parentElement!;\n\n    // Doesn't update if the mouse hovers an element that's over the editor but\n    // isn't a part of it or the side menu.\n    if (\n      // Cursor is within the editor area\n      cursorWithinEditor &&\n      // An element is hovered\n      event &&\n      event.target &&\n      // Element is outside the editor\n      !(\n        editorWrapper === event.target ||\n        editorWrapper.contains(event.target as HTMLElement)\n      )\n    ) {\n      if (this.state?.show) {\n        this.state.show = false;\n        this.emitUpdate(this.state);\n      }\n\n      return;\n    }\n\n    this.updateStateFromMousePos();\n  };\n\n  private dispatchSyntheticEvent(event: DragEvent) {\n    const evt = new Event(event.type as \"dragover\", event) as any;\n    const dropPointBoundingBox = (\n      this.pmView.dom.firstChild as HTMLElement\n    ).getBoundingClientRect();\n    evt.clientX = event.clientX;\n    evt.clientY = event.clientY;\n\n    evt.clientX = Math.min(\n      Math.max(event.clientX, dropPointBoundingBox.left),\n      dropPointBoundingBox.left + dropPointBoundingBox.width,\n    );\n    evt.clientY = Math.min(\n      Math.max(event.clientY, dropPointBoundingBox.top),\n      dropPointBoundingBox.top + dropPointBoundingBox.height,\n    );\n\n    evt.dataTransfer = event.dataTransfer;\n    evt.preventDefault = () => event.preventDefault();\n    evt.synthetic = true; // prevent recursion\n    this.pmView.dom.dispatchEvent(evt);\n  }\n\n  onScroll = () => {\n    if (this.state?.show) {\n      this.state.referencePos = this.hoveredBlock!.getBoundingClientRect();\n      this.emitUpdate(this.state);\n    }\n    this.updateStateFromMousePos();\n  };\n\n  // Needed in cases where the editor state updates without the mouse cursor\n  // moving, as some state updates can require a side menu update. For example,\n  // adding a button to the side menu which removes the block can cause the\n  // block below to jump up into the place of the removed block when clicked,\n  // allowing the user to click the button again without moving the cursor. This\n  // would otherwise not update the side menu, and so clicking the button again\n  // would attempt to remove the same block again, causing an error.\n  update(_view: EditorView, prevState: EditorState) {\n    const docChanged = !prevState.doc.eq(this.pmView.state.doc);\n    if (docChanged && this.state?.show) {\n      this.updateStateFromMousePos();\n    }\n  }\n\n  destroy() {\n    if (this.state?.show) {\n      this.state.show = false;\n      this.emitUpdate(this.state);\n    }\n    this.pmView.root.removeEventListener(\n      \"mousemove\",\n      this.onMouseMove as EventListener,\n      true,\n    );\n    this.pmView.root.removeEventListener(\n      \"dragstart\",\n      this.onDragStart as EventListener,\n    );\n    this.pmView.root.removeEventListener(\n      \"dragover\",\n      this.onDragOver as EventListener,\n    );\n    this.pmView.root.removeEventListener(\n      \"drop\",\n      this.onDrop as EventListener,\n      true,\n    );\n    this.pmView.root.removeEventListener(\n      \"dragend\",\n      this.onDragEnd as EventListener,\n      true,\n    );\n    this.pmView.root.removeEventListener(\n      \"keydown\",\n      this.onKeyDown as EventListener,\n      true,\n    );\n    this.pmView.root.removeEventListener(\"scroll\", this.onScroll, true);\n  }\n}\n\nexport const sideMenuPluginKey = new PluginKey(\"SideMenuPlugin\");\n\nexport class SideMenuProsemirrorPlugin<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> extends BlockNoteExtension {\n  public static key() {\n    return \"sideMenu\";\n  }\n\n  public view: SideMenuView<BSchema, I, S> | undefined;\n\n  constructor(private readonly editor: BlockNoteEditor<BSchema, I, S>) {\n    super();\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: sideMenuPluginKey,\n        view: (editorView) => {\n          this.view = new SideMenuView(editor, editorView, (state) => {\n            this.emit(\"update\", state);\n          });\n          return this.view;\n        },\n      }),\n    );\n  }\n\n  public onUpdate(callback: (state: SideMenuState<BSchema, I, S>) => void) {\n    return this.on(\"update\", callback);\n  }\n\n  /**\n   * Handles drag & drop events for blocks.\n   */\n  blockDragStart = (\n    event: {\n      dataTransfer: DataTransfer | null;\n      clientY: number;\n    },\n    block: Block<BSchema, I, S>,\n  ) => {\n    if (this.view) {\n      this.view.isDragOrigin = true;\n    }\n\n    dragStart(event, block, this.editor);\n  };\n\n  /**\n   * Handles drag & drop events for blocks.\n   */\n  blockDragEnd = () => {\n    if (this.editor.prosemirrorView) {\n      unsetDragImage(this.editor.prosemirrorView.root);\n    }\n\n    if (this.view) {\n      this.view.isDragOrigin = false;\n    }\n  };\n  /**\n   * Freezes the side menu. When frozen, the side menu will stay\n   * attached to the same block regardless of which block is hovered by the\n   * mouse cursor.\n   */\n  freezeMenu = () => {\n    this.view!.menuFrozen = true;\n    this.view!.state!.show = true;\n    this.view!.emitUpdate(this.view!.state!);\n  };\n  /**\n   * Unfreezes the side menu. When frozen, the side menu will stay\n   * attached to the same block regardless of which block is hovered by the\n   * mouse cursor.\n   */\n  unfreezeMenu = () => {\n    this.view!.menuFrozen = false;\n    this.view!.state!.show = false;\n    this.view!.emitUpdate(this.view!.state!);\n  };\n}\n","import { Mapping } from \"prosemirror-transform\";\nimport {\n  absolutePositionToRelativePosition,\n  relativePositionToAbsolutePosition,\n  ySyncPluginKey,\n} from \"y-prosemirror\";\nimport type { BlockNoteEditor } from \"../editor/BlockNoteEditor.js\";\nimport * as Y from \"yjs\";\nimport type { ProsemirrorBinding } from \"y-prosemirror\";\n\n/**\n * This is used to track a mapping for each editor. The mapping stores the mappings for each transaction since the first transaction that was tracked.\n */\nconst editorToMapping = new Map<BlockNoteEditor<any, any, any>, Mapping>();\n\n/**\n * This initializes a single mapping for an editor instance.\n */\nfunction getMapping(editor: BlockNoteEditor<any, any, any>) {\n  if (editorToMapping.has(editor)) {\n    // Mapping already initialized, so we don't need to do anything\n    return editorToMapping.get(editor)!;\n  }\n  const mapping = new Mapping();\n  editor._tiptapEditor.on(\"transaction\", ({ transaction }) => {\n    mapping.appendMapping(transaction.mapping);\n  });\n  editor._tiptapEditor.on(\"destroy\", () => {\n    // Cleanup the mapping when the editor is destroyed\n    editorToMapping.delete(editor);\n  });\n\n  // There only is one mapping per editor, so we can just set it\n  editorToMapping.set(editor, mapping);\n\n  return mapping;\n}\n\n/**\n * This is used to keep track of positions of elements in the editor.\n * It is needed because y-prosemirror's sync plugin can disrupt normal prosemirror position mapping.\n *\n * It is specifically made to be able to be used whether the editor is being used in a collaboratively, or single user, providing the same API.\n *\n * @param editor The editor to track the position of.\n * @param position The position to track.\n * @param side The side of the position to track. \"left\" is the default. \"right\" would move with the change if the change is in the right direction.\n * @returns A function that returns the position of the element.\n */\nexport function trackPosition(\n  /**\n   * The editor to track the position of.\n   */\n  editor: BlockNoteEditor<any, any, any>,\n  /**\n   * The position to track.\n   */\n  position: number,\n  /**\n   * This is the side of the position to track. \"left\" is the default. \"right\" would move with the change if the change is in the right direction.\n   */\n  side: \"left\" | \"right\" = \"left\",\n): () => number {\n  const ySyncPluginState = ySyncPluginKey.getState(\n    editor._tiptapEditor.state,\n  ) as {\n    doc: Y.Doc;\n    binding: ProsemirrorBinding;\n  };\n\n  if (!ySyncPluginState) {\n    // No y-prosemirror sync plugin, so we need to track the mapping manually\n    // This will initialize the mapping for this editor, if needed\n    const mapping = getMapping(editor);\n\n    // This is the start point of tracking the mapping\n    const trackedMapLength = mapping.maps.length;\n\n    return () => {\n      const pos = mapping\n        // Only read the history of the mapping that we care about\n        .slice(trackedMapLength)\n        .map(position, side === \"left\" ? -1 : 1);\n\n      return pos;\n    };\n  }\n\n  const relativePosition = absolutePositionToRelativePosition(\n    // Track the position after the position if we are on the right side\n    position + (side === \"right\" ? 1 : 0),\n    ySyncPluginState.binding.type,\n    ySyncPluginState.binding.mapping,\n  );\n\n  return () => {\n    const curYSyncPluginState = ySyncPluginKey.getState(\n      editor._tiptapEditor.state,\n    ) as typeof ySyncPluginState;\n    const pos = relativePositionToAbsolutePosition(\n      curYSyncPluginState.doc,\n      curYSyncPluginState.binding.type,\n      relativePosition,\n      curYSyncPluginState.binding.mapping,\n    );\n\n    // This can happen if the element is garbage collected\n    if (pos === null) {\n      throw new Error(\"Position not found, cannot track positions\");\n    }\n\n    return pos + (side === \"right\" ? -1 : 0);\n  };\n}\n","import { findParentNode } from \"@tiptap/core\";\nimport { EditorState, Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet, EditorView } from \"prosemirror-view\";\n\nimport { trackPosition } from \"../../api/positionMapping.js\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\nimport { UiElementPosition } from \"../../extensions-shared/UiElementPosition.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\n\nconst findBlock = findParentNode((node) => node.type.name === \"blockContainer\");\n\nexport type SuggestionMenuState = UiElementPosition & {\n  query: string;\n  ignoreQueryLength?: boolean;\n};\n\nclass SuggestionMenuView<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> {\n  public state?: SuggestionMenuState;\n  public emitUpdate: (triggerCharacter: string) => void;\n  private rootEl?: Document | ShadowRoot;\n  pluginState: SuggestionPluginState;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<BSchema, I, S>,\n    emitUpdate: (menuName: string, state: SuggestionMenuState) => void,\n  ) {\n    this.pluginState = undefined;\n\n    this.emitUpdate = (menuName: string) => {\n      if (!this.state) {\n        throw new Error(\"Attempting to update uninitialized suggestions menu\");\n      }\n\n      emitUpdate(menuName, {\n        ...this.state,\n        ignoreQueryLength: this.pluginState?.ignoreQueryLength,\n      });\n    };\n\n    this.rootEl = this.editor.prosemirrorView?.root;\n\n    // Setting capture=true ensures that any parent container of the editor that\n    // gets scrolled will trigger the scroll event. Scroll events do not bubble\n    // and so won't propagate to the document by default.\n    this.rootEl?.addEventListener(\"scroll\", this.handleScroll, true);\n  }\n\n  handleScroll = () => {\n    if (this.state?.show) {\n      const decorationNode = this.rootEl?.querySelector(\n        `[data-decoration-id=\"${this.pluginState!.decorationId}\"]`,\n      );\n      if (!decorationNode) {\n        return;\n      }\n      this.state.referencePos = decorationNode.getBoundingClientRect();\n      this.emitUpdate(this.pluginState!.triggerCharacter!);\n    }\n  };\n\n  update(view: EditorView, prevState: EditorState) {\n    const prev: SuggestionPluginState =\n      suggestionMenuPluginKey.getState(prevState);\n    const next: SuggestionPluginState = suggestionMenuPluginKey.getState(\n      view.state,\n    );\n\n    // See how the state changed\n    const started = prev === undefined && next !== undefined;\n    const stopped = prev !== undefined && next === undefined;\n    const changed = prev !== undefined && next !== undefined;\n\n    // Cancel when suggestion isn't active\n    if (!started && !changed && !stopped) {\n      return;\n    }\n\n    this.pluginState = stopped ? prev : next;\n\n    if (stopped || !this.editor.isEditable) {\n      if (this.state) {\n        this.state.show = false;\n      }\n      this.emitUpdate(this.pluginState!.triggerCharacter);\n\n      return;\n    }\n\n    const decorationNode = this.rootEl?.querySelector(\n      `[data-decoration-id=\"${this.pluginState!.decorationId}\"]`,\n    );\n\n    if (this.editor.isEditable && decorationNode) {\n      this.state = {\n        show: true,\n        referencePos: decorationNode.getBoundingClientRect(),\n        query: this.pluginState!.query,\n      };\n\n      this.emitUpdate(this.pluginState!.triggerCharacter!);\n    }\n  }\n\n  destroy() {\n    this.rootEl?.removeEventListener(\"scroll\", this.handleScroll, true);\n  }\n\n  closeMenu = () => {\n    this.editor.transact((tr) => tr.setMeta(suggestionMenuPluginKey, null));\n  };\n\n  clearQuery = () => {\n    if (this.pluginState === undefined) {\n      return;\n    }\n\n    this.editor._tiptapEditor\n      .chain()\n      .focus()\n      // TODO need to make an API for this\n      .deleteRange({\n        from:\n          this.pluginState.queryStartPos() -\n          (this.pluginState.deleteTriggerCharacter\n            ? this.pluginState.triggerCharacter!.length\n            : 0),\n        to: this.editor.transact((tr) => tr.selection.from),\n      })\n      .run();\n  };\n}\n\ntype SuggestionPluginState =\n  | {\n      triggerCharacter: string;\n      deleteTriggerCharacter: boolean;\n      queryStartPos: () => number;\n      query: string;\n      decorationId: string;\n      ignoreQueryLength?: boolean;\n    }\n  | undefined;\n\nconst suggestionMenuPluginKey = new PluginKey(\"SuggestionMenuPlugin\");\n\n/**\n * A ProseMirror plugin for suggestions, designed to make '/'-commands possible as well as mentions.\n *\n * This is basically a simplified version of TipTap's [Suggestions](https://github.com/ueberdosis/tiptap/tree/db92a9b313c5993b723c85cd30256f1d4a0b65e1/packages/suggestion) plugin.\n *\n * This version is adapted from the aforementioned version in the following ways:\n * - This version supports generic items instead of only strings (to allow for more advanced filtering for example)\n * - This version hides some unnecessary complexity from the user of the plugin.\n * - This version handles key events differently\n */\nexport class SuggestionMenuProseMirrorPlugin<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> extends BlockNoteExtension {\n  public static key() {\n    return \"suggestionMenu\";\n  }\n\n  private view: SuggestionMenuView<BSchema, I, S> | undefined;\n  private triggerCharacters: string[] = [];\n\n  constructor(editor: BlockNoteEditor<BSchema, I, S>) {\n    super();\n    const triggerCharacters = this.triggerCharacters;\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: suggestionMenuPluginKey,\n\n        view: () => {\n          this.view = new SuggestionMenuView<BSchema, I, S>(\n            editor,\n            (triggerCharacter, state) => {\n              this.emit(`update ${triggerCharacter}`, state);\n            },\n          );\n          return this.view;\n        },\n\n        state: {\n          // Initialize the plugin's internal state.\n          init(): SuggestionPluginState {\n            return undefined;\n          },\n\n          // Apply changes to the plugin state from an editor transaction.\n          apply: (\n            transaction,\n            prev,\n            _oldState,\n            newState,\n          ): SuggestionPluginState => {\n            // TODO: More clearly define which transactions should be ignored.\n            if (transaction.getMeta(\"orderedListIndexing\") !== undefined) {\n              return prev;\n            }\n\n            // Ignore transactions in code blocks.\n            if (transaction.selection.$from.parent.type.spec.code) {\n              return prev;\n            }\n\n            // Either contains the trigger character if the menu should be shown,\n            // or null if it should be hidden.\n            const suggestionPluginTransactionMeta: {\n              triggerCharacter: string;\n              deleteTriggerCharacter?: boolean;\n              ignoreQueryLength?: boolean;\n            } | null = transaction.getMeta(suggestionMenuPluginKey);\n\n            if (\n              typeof suggestionPluginTransactionMeta === \"object\" &&\n              suggestionPluginTransactionMeta !== null\n            ) {\n              if (prev) {\n                // Close the previous menu if it exists\n                this.closeMenu();\n              }\n              const trackedPosition = trackPosition(\n                editor,\n                newState.selection.from -\n                  // Need to account for the trigger char that was inserted, so we offset the position by the length of the trigger character.\n                  suggestionPluginTransactionMeta.triggerCharacter.length,\n              );\n              return {\n                triggerCharacter:\n                  suggestionPluginTransactionMeta.triggerCharacter,\n                deleteTriggerCharacter:\n                  suggestionPluginTransactionMeta.deleteTriggerCharacter !==\n                  false,\n                // When reading the queryStartPos, we offset the result by the length of the trigger character, to make it easy on the caller\n                queryStartPos: () =>\n                  trackedPosition() +\n                  suggestionPluginTransactionMeta.triggerCharacter.length,\n                query: \"\",\n                decorationId: `id_${Math.floor(Math.random() * 0xffffffff)}`,\n                ignoreQueryLength:\n                  suggestionPluginTransactionMeta?.ignoreQueryLength,\n              };\n            }\n\n            // Checks if the menu is hidden, in which case it doesn't need to be hidden or updated.\n            if (prev === undefined) {\n              return prev;\n            }\n\n            // Checks if the menu should be hidden.\n            if (\n              // Highlighting text should hide the menu.\n              newState.selection.from !== newState.selection.to ||\n              // Transactions with plugin metadata should hide the menu.\n              suggestionPluginTransactionMeta === null ||\n              // Certain mouse events should hide the menu.\n              // TODO: Change to global mousedown listener.\n              transaction.getMeta(\"focus\") ||\n              transaction.getMeta(\"blur\") ||\n              transaction.getMeta(\"pointer\") ||\n              // Moving the caret before the character which triggered the menu should hide it.\n              (prev.triggerCharacter !== undefined &&\n                newState.selection.from < prev.queryStartPos()) ||\n              // Moving the caret to a new block should hide the menu.\n              !newState.selection.$from.sameParent(\n                newState.doc.resolve(prev.queryStartPos()),\n              )\n            ) {\n              return undefined;\n            }\n\n            const next = { ...prev };\n\n            // Updates the current query.\n            next.query = newState.doc.textBetween(\n              prev.queryStartPos(),\n              newState.selection.from,\n            );\n\n            return next;\n          },\n        },\n\n        props: {\n          handleTextInput(view, from, to, text) {\n            // only on insert\n            if (from === to) {\n              const doc = view.state.doc;\n              for (const str of triggerCharacters) {\n                const snippet =\n                  str.length > 1\n                    ? doc.textBetween(from - str.length, from) + text\n                    : text;\n\n                if (str === snippet) {\n                  view.dispatch(view.state.tr.insertText(text));\n                  view.dispatch(\n                    view.state.tr\n                      .setMeta(suggestionMenuPluginKey, {\n                        triggerCharacter: snippet,\n                      })\n                      .scrollIntoView(),\n                  );\n                  return true;\n                }\n              }\n            }\n            return false;\n          },\n\n          // Setup decorator on the currently active suggestion.\n          decorations(state) {\n            const suggestionPluginState: SuggestionPluginState = (\n              this as Plugin\n            ).getState(state);\n\n            if (suggestionPluginState === undefined) {\n              return null;\n            }\n\n            // If the menu was opened programmatically by another extension, it may not use a trigger character. In this\n            // case, the decoration is set on the whole block instead, as the decoration range would otherwise be empty.\n            if (!suggestionPluginState.deleteTriggerCharacter) {\n              const blockNode = findBlock(state.selection);\n              if (blockNode) {\n                return DecorationSet.create(state.doc, [\n                  Decoration.node(\n                    blockNode.pos,\n                    blockNode.pos + blockNode.node.nodeSize,\n                    {\n                      nodeName: \"span\",\n                      class: \"bn-suggestion-decorator\",\n                      \"data-decoration-id\": suggestionPluginState.decorationId,\n                    },\n                  ),\n                ]);\n              }\n            }\n            // Creates an inline decoration around the trigger character.\n            return DecorationSet.create(state.doc, [\n              Decoration.inline(\n                suggestionPluginState.queryStartPos() -\n                  suggestionPluginState.triggerCharacter!.length,\n                suggestionPluginState.queryStartPos(),\n                {\n                  nodeName: \"span\",\n                  class: \"bn-suggestion-decorator\",\n                  \"data-decoration-id\": suggestionPluginState.decorationId,\n                },\n              ),\n            ]);\n          },\n        },\n      }),\n    );\n  }\n\n  public onUpdate(\n    triggerCharacter: string,\n    callback: (state: SuggestionMenuState) => void,\n  ) {\n    if (!this.triggerCharacters.includes(triggerCharacter)) {\n      this.addTriggerCharacter(triggerCharacter);\n    }\n    // TODO: be able to remove the triggerCharacter\n    return this.on(`update ${triggerCharacter}`, callback);\n  }\n\n  addTriggerCharacter = (triggerCharacter: string) => {\n    this.triggerCharacters.push(triggerCharacter);\n  };\n\n  // TODO: Should this be called automatically when listeners are removed?\n  removeTriggerCharacter = (triggerCharacter: string) => {\n    this.triggerCharacters = this.triggerCharacters.filter(\n      (c) => c !== triggerCharacter,\n    );\n  };\n\n  closeMenu = () => this.view!.closeMenu();\n\n  clearQuery = () => this.view!.clearQuery();\n\n  public get shown() {\n    return this.view?.state?.show || false;\n  }\n}\n\nexport function createSuggestionMenu<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(editor: BlockNoteEditor<BSchema, I, S>, triggerCharacter: string) {\n  editor.suggestionMenus.addTriggerCharacter(triggerCharacter);\n}\n","import { Mark } from \"@tiptap/core\";\nimport { MarkSpec } from \"prosemirror-model\";\n\n// This copies the marks from @handlewithcare/prosemirror-suggest-changes,\n// but uses the Tiptap Mark API instead so we can use them in BlockNote\n\n// The ideal solution would be to not depend on tiptap nodes / marks, but be able to use prosemirror nodes / marks directly\n// this way we could directly use the exported marks from @handlewithcare/prosemirror-suggest-changes\nexport const SuggestionAddMark = Mark.create({\n  name: \"insertion\",\n  inclusive: false,\n  excludes: \"deletion modification insertion\",\n  addAttributes() {\n    return {\n      id: { default: null, validate: \"number\" }, // note: validate is supported in prosemirror but not in tiptap, so this doesn't actually work (considered not critical)\n    };\n  },\n  extendMarkSchema(extension) {\n    if (extension.name !== \"insertion\") {\n      return {};\n    }\n    return {\n      blocknoteIgnore: true,\n      inclusive: false,\n\n      toDOM(mark, inline) {\n        return [\n          \"ins\",\n          {\n            \"data-id\": String(mark.attrs[\"id\"]),\n            \"data-inline\": String(inline),\n            ...(!inline && { style: \"display: contents\" }), // changed to \"contents\" to make this work for table rows\n          },\n          0,\n        ];\n      },\n      parseDOM: [\n        {\n          tag: \"ins\",\n          getAttrs(node) {\n            if (!node.dataset[\"id\"]) {\n              return false;\n            }\n            return {\n              id: parseInt(node.dataset[\"id\"], 10),\n            };\n          },\n        },\n      ],\n    } satisfies MarkSpec;\n  },\n});\n\nexport const SuggestionDeleteMark = Mark.create({\n  name: \"deletion\",\n  inclusive: false,\n  excludes: \"insertion modification deletion\",\n  addAttributes() {\n    return {\n      id: { default: null, validate: \"number\" }, // note: validate is supported in prosemirror but not in tiptap\n    };\n  },\n  extendMarkSchema(extension) {\n    if (extension.name !== \"deletion\") {\n      return {};\n    }\n    return {\n      blocknoteIgnore: true,\n      inclusive: false,\n\n      // attrs: {\n      //   id: { validate: \"number\" },\n      // },\n      toDOM(mark, inline) {\n        return [\n          \"del\",\n          {\n            \"data-id\": String(mark.attrs[\"id\"]),\n            \"data-inline\": String(inline),\n            ...(!inline && { style: \"display: contents\" }), // changed to \"contents\" to make this work for table rows\n          },\n          0,\n        ];\n      },\n      parseDOM: [\n        {\n          tag: \"del\",\n          getAttrs(node) {\n            if (!node.dataset[\"id\"]) {\n              return false;\n            }\n            return {\n              id: parseInt(node.dataset[\"id\"], 10),\n            };\n          },\n        },\n      ],\n    } satisfies MarkSpec;\n  },\n});\n\nexport const SuggestionModificationMark = Mark.create({\n  name: \"modification\",\n  inclusive: false,\n  excludes: \"deletion insertion\",\n  addAttributes() {\n    // note: validate is supported in prosemirror but not in tiptap\n    return {\n      id: { default: null, validate: \"number\" },\n      type: { validate: \"string\" },\n      attrName: { default: null, validate: \"string|null\" },\n      previousValue: { default: null },\n      newValue: { default: null },\n    };\n  },\n  extendMarkSchema(extension) {\n    if (extension.name !== \"modification\") {\n      return {};\n    }\n    return {\n      blocknoteIgnore: true,\n      inclusive: false,\n      // attrs: {\n      //   id: { validate: \"number\" },\n      //   type: { validate: \"string\" },\n      //   attrName: { default: null, validate: \"string|null\" },\n      //   previousValue: { default: null },\n      //   newValue: { default: null },\n      // },\n      toDOM(mark, inline) {\n        return [\n          inline ? \"span\" : \"div\",\n          {\n            \"data-type\": \"modification\",\n            \"data-id\": String(mark.attrs[\"id\"]),\n            \"data-mod-type\": mark.attrs[\"type\"] as string,\n            \"data-mod-prev-val\": JSON.stringify(mark.attrs[\"previousValue\"]),\n            // TODO: Try to serialize marks with toJSON?\n            \"data-mod-new-val\": JSON.stringify(mark.attrs[\"newValue\"]),\n          },\n          0,\n        ];\n      },\n      parseDOM: [\n        {\n          tag: \"span[data-type='modification']\",\n          getAttrs(node) {\n            if (!node.dataset[\"id\"]) {\n              return false;\n            }\n            return {\n              id: parseInt(node.dataset[\"id\"], 10),\n              type: node.dataset[\"modType\"],\n              previousValue: node.dataset[\"modPrevVal\"],\n              newValue: node.dataset[\"modNewVal\"],\n            };\n          },\n        },\n        {\n          tag: \"div[data-type='modification']\",\n          getAttrs(node) {\n            if (!node.dataset[\"id\"]) {\n              return false;\n            }\n            return {\n              id: parseInt(node.dataset[\"id\"], 10),\n              type: node.dataset[\"modType\"],\n              previousValue: node.dataset[\"modPrevVal\"],\n            };\n          },\n        },\n      ],\n    } satisfies MarkSpec;\n  },\n});\n","import { EditorState, Plugin, PluginKey, PluginView } from \"prosemirror-state\";\nimport {\n  CellSelection,\n  addColumnAfter,\n  addColumnBefore,\n  addRowAfter,\n  addRowBefore,\n  deleteColumn,\n  deleteRow,\n  mergeCells,\n  splitCell,\n} from \"prosemirror-tables\";\nimport { Decoration, DecorationSet, EditorView } from \"prosemirror-view\";\nimport {\n  RelativeCellIndices,\n  addRowsOrColumns,\n  areInSameColumn,\n  canColumnBeDraggedInto,\n  canRowBeDraggedInto,\n  cropEmptyRowsOrColumns,\n  getCellsAtColumnHandle,\n  getCellsAtRowHandle,\n  getDimensionsOfTable,\n  moveColumn,\n  moveRow,\n} from \"../../api/blockManipulation/tables/tables.js\";\nimport { nodeToBlock } from \"../../api/nodeConversions/nodeToBlock.js\";\nimport { getNodeById } from \"../../api/nodeUtil.js\";\nimport {\n  checkBlockIsDefaultType,\n  isTableCellSelection,\n} from \"../../blocks/defaultBlockTypeGuards.js\";\nimport { DefaultBlockSchema } from \"../../blocks/defaultBlocks.js\";\nimport type { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\nimport {\n  BlockFromConfigNoChildren,\n  BlockSchemaWithBlock,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\nimport { getDraggableBlockFromElement } from \"../getDraggableBlockFromElement.js\";\n\nlet dragImageElement: HTMLElement | undefined;\n\n// TODO consider switching this to jotai, it is a bit messy and noisy\nexport type TableHandlesState<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> = {\n  show: boolean;\n  showAddOrRemoveRowsButton: boolean;\n  showAddOrRemoveColumnsButton: boolean;\n  referencePosCell: DOMRect | undefined;\n  referencePosTable: DOMRect;\n\n  block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], I, S>;\n  colIndex: number | undefined;\n  rowIndex: number | undefined;\n\n  draggingState:\n    | {\n        draggedCellOrientation: \"row\" | \"col\";\n        originalIndex: number;\n        mousePos: number;\n      }\n    | undefined;\n\n  widgetContainer: HTMLElement | undefined;\n};\n\nfunction setHiddenDragImage(rootEl: Document | ShadowRoot) {\n  if (dragImageElement) {\n    return;\n  }\n\n  dragImageElement = document.createElement(\"div\");\n  dragImageElement.innerHTML = \"_\";\n  dragImageElement.style.opacity = \"0\";\n  dragImageElement.style.height = \"1px\";\n  dragImageElement.style.width = \"1px\";\n  if (rootEl instanceof Document) {\n    rootEl.body.appendChild(dragImageElement);\n  } else {\n    rootEl.appendChild(dragImageElement);\n  }\n}\n\nfunction unsetHiddenDragImage(rootEl: Document | ShadowRoot) {\n  if (dragImageElement) {\n    if (rootEl instanceof Document) {\n      rootEl.body.removeChild(dragImageElement);\n    } else {\n      rootEl.removeChild(dragImageElement);\n    }\n    dragImageElement = undefined;\n  }\n}\n\nfunction getChildIndex(node: Element) {\n  return Array.prototype.indexOf.call(node.parentElement!.childNodes, node);\n}\n\n// Finds the DOM element corresponding to the table cell that the target element\n// is currently in. If the target element is not in a table cell, returns null.\nfunction domCellAround(target: Element) {\n  let currentTarget: Element | undefined = target;\n  while (\n    currentTarget &&\n    currentTarget.nodeName !== \"TD\" &&\n    currentTarget.nodeName !== \"TH\" &&\n    !currentTarget.classList.contains(\"tableWrapper\")\n  ) {\n    if (currentTarget.classList.contains(\"ProseMirror\")) {\n      return undefined;\n    }\n    const parent: ParentNode | null = currentTarget.parentNode;\n\n    if (!parent || !(parent instanceof Element)) {\n      return undefined;\n    }\n    currentTarget = parent;\n  }\n\n  return currentTarget.nodeName === \"TD\" || currentTarget.nodeName === \"TH\"\n    ? {\n        type: \"cell\",\n        domNode: currentTarget,\n        tbodyNode: currentTarget.closest(\"tbody\"),\n      }\n    : {\n        type: \"wrapper\",\n        domNode: currentTarget,\n        tbodyNode: currentTarget.querySelector(\"tbody\"),\n      };\n}\n\n// Hides elements in the DOMwith the provided class names.\nfunction hideElements(selector: string, rootEl: Document | ShadowRoot) {\n  const elementsToHide = rootEl.querySelectorAll(selector);\n\n  for (let i = 0; i < elementsToHide.length; i++) {\n    (elementsToHide[i] as HTMLElement).style.visibility = \"hidden\";\n  }\n}\n\nexport class TableHandlesView<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> implements PluginView\n{\n  public state?: TableHandlesState<I, S>;\n  public emitUpdate: () => void;\n\n  public tableId: string | undefined;\n  public tablePos: number | undefined;\n  public tableElement: HTMLElement | undefined;\n\n  public menuFrozen = false;\n\n  public mouseState: \"up\" | \"down\" | \"selecting\" = \"up\";\n\n  public prevWasEditable: boolean | null = null;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<\n      BlockSchemaWithBlock<\"table\", DefaultBlockSchema[\"table\"]>,\n      I,\n      S\n    >,\n    private readonly pmView: EditorView,\n    emitUpdate: (state: TableHandlesState<I, S>) => void,\n  ) {\n    this.emitUpdate = () => {\n      if (!this.state) {\n        throw new Error(\"Attempting to update uninitialized image toolbar\");\n      }\n\n      emitUpdate(this.state);\n    };\n\n    pmView.dom.addEventListener(\"mousemove\", this.mouseMoveHandler);\n    pmView.dom.addEventListener(\"mousedown\", this.viewMousedownHandler);\n    window.addEventListener(\"mouseup\", this.mouseUpHandler);\n\n    pmView.root.addEventListener(\n      \"dragover\",\n      this.dragOverHandler as EventListener,\n    );\n    pmView.root.addEventListener(\n      \"drop\",\n      this.dropHandler as unknown as EventListener,\n    );\n  }\n\n  viewMousedownHandler = () => {\n    this.mouseState = \"down\";\n  };\n\n  mouseUpHandler = (event: MouseEvent) => {\n    this.mouseState = \"up\";\n    this.mouseMoveHandler(event);\n  };\n\n  mouseMoveHandler = (event: MouseEvent) => {\n    if (this.menuFrozen) {\n      return;\n    }\n\n    if (this.mouseState === \"selecting\") {\n      return;\n    }\n\n    if (\n      !(event.target instanceof Element) ||\n      !this.pmView.dom.contains(event.target)\n    ) {\n      return;\n    }\n\n    const target = domCellAround(event.target);\n\n    if (\n      target?.type === \"cell\" &&\n      this.mouseState === \"down\" &&\n      !this.state?.draggingState\n    ) {\n      // hide draghandles when selecting text as they could be in the way of the user\n      this.mouseState = \"selecting\";\n\n      if (this.state?.show) {\n        this.state.show = false;\n        this.state.showAddOrRemoveRowsButton = false;\n        this.state.showAddOrRemoveColumnsButton = false;\n        this.emitUpdate();\n      }\n      return;\n    }\n\n    if (!target || !this.editor.isEditable) {\n      if (this.state?.show) {\n        this.state.show = false;\n        this.state.showAddOrRemoveRowsButton = false;\n        this.state.showAddOrRemoveColumnsButton = false;\n        this.emitUpdate();\n      }\n      return;\n    }\n\n    if (!target.tbodyNode) {\n      return;\n    }\n\n    const tableRect = target.tbodyNode.getBoundingClientRect();\n\n    const blockEl = getDraggableBlockFromElement(target.domNode, this.pmView);\n    if (!blockEl) {\n      return;\n    }\n    this.tableElement = blockEl.node;\n\n    let tableBlock:\n      | BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], I, S>\n      | undefined;\n\n    const pmNodeInfo = this.editor.transact((tr) =>\n      getNodeById(blockEl.id, tr.doc),\n    );\n    if (!pmNodeInfo) {\n      throw new Error(`Block with ID ${blockEl.id} not found`);\n    }\n\n    const block = nodeToBlock(\n      pmNodeInfo.node,\n      this.editor.pmSchema,\n      this.editor.schema.blockSchema,\n      this.editor.schema.inlineContentSchema,\n      this.editor.schema.styleSchema,\n    );\n\n    if (checkBlockIsDefaultType(\"table\", block, this.editor)) {\n      this.tablePos = pmNodeInfo.posBeforeNode + 1;\n      tableBlock = block;\n    }\n\n    if (!tableBlock) {\n      return;\n    }\n\n    this.tableId = blockEl.id;\n    const widgetContainer = target.domNode\n      .closest(\".tableWrapper\")\n      ?.querySelector(\".table-widgets-container\") as HTMLElement;\n\n    if (target?.type === \"wrapper\") {\n      // if we're just to the right or below the table, show the extend buttons\n      // (this is a bit hacky. It would probably be cleaner to render the extend buttons in the Table NodeView instead)\n      const belowTable =\n        event.clientY >= tableRect.bottom - 1 && // -1 to account for fractions of pixels in \"bottom\"\n        event.clientY < tableRect.bottom + 20;\n      const toRightOfTable =\n        event.clientX >= tableRect.right - 1 &&\n        event.clientX < tableRect.right + 20;\n\n      // without this check, we'd also hide draghandles when hovering over them\n      const hideHandles =\n        event.clientX > tableRect.right || event.clientY > tableRect.bottom;\n\n      this.state = {\n        ...this.state!,\n        show: true,\n        showAddOrRemoveRowsButton: belowTable,\n        showAddOrRemoveColumnsButton: toRightOfTable,\n        referencePosTable: tableRect,\n        block: tableBlock,\n        widgetContainer,\n        colIndex: hideHandles ? undefined : this.state?.colIndex,\n        rowIndex: hideHandles ? undefined : this.state?.rowIndex,\n        referencePosCell: hideHandles\n          ? undefined\n          : this.state?.referencePosCell,\n      };\n    } else {\n      const colIndex = getChildIndex(target.domNode);\n      const rowIndex = getChildIndex(target.domNode.parentElement!);\n      const cellRect = target.domNode.getBoundingClientRect();\n\n      if (\n        this.state !== undefined &&\n        this.state.show &&\n        this.tableId === blockEl.id &&\n        this.state.rowIndex === rowIndex &&\n        this.state.colIndex === colIndex\n      ) {\n        // no update needed\n        return;\n      }\n\n      this.state = {\n        show: true,\n        showAddOrRemoveColumnsButton:\n          colIndex === tableBlock.content.rows[0].cells.length - 1,\n        showAddOrRemoveRowsButton:\n          rowIndex === tableBlock.content.rows.length - 1,\n        referencePosTable: tableRect,\n\n        block: tableBlock,\n        draggingState: undefined,\n        referencePosCell: cellRect,\n        colIndex: colIndex,\n        rowIndex: rowIndex,\n\n        widgetContainer,\n      };\n    }\n    this.emitUpdate();\n\n    return false;\n  };\n\n  dragOverHandler = (event: DragEvent) => {\n    if (this.state?.draggingState === undefined) {\n      return;\n    }\n\n    event.preventDefault();\n    event.dataTransfer!.dropEffect = \"move\";\n\n    hideElements(\n      \".prosemirror-dropcursor-block, .prosemirror-dropcursor-inline\",\n      this.pmView.root,\n    );\n\n    // The mouse cursor coordinates, bounded to the table's bounding box. The\n    // bounding box is shrunk by 1px on each side to ensure that the bounded\n    // coordinates are always inside a table cell.\n    const boundedMouseCoords = {\n      left: Math.min(\n        Math.max(event.clientX, this.state.referencePosTable.left + 1),\n        this.state.referencePosTable.right - 1,\n      ),\n      top: Math.min(\n        Math.max(event.clientY, this.state.referencePosTable.top + 1),\n        this.state.referencePosTable.bottom - 1,\n      ),\n    };\n\n    // Gets the table cell element that the bounded mouse cursor coordinates lie\n    // in.\n    const tableCellElements = this.pmView.root\n      .elementsFromPoint(boundedMouseCoords.left, boundedMouseCoords.top)\n      .filter(\n        (element) => element.tagName === \"TD\" || element.tagName === \"TH\",\n      );\n    if (tableCellElements.length === 0) {\n      return;\n    }\n    const tableCellElement = tableCellElements[0];\n\n    let emitStateUpdate = false;\n\n    // Gets current row and column index.\n    const rowIndex = getChildIndex(tableCellElement.parentElement!);\n    const colIndex = getChildIndex(tableCellElement);\n\n    // Checks if the drop cursor needs to be updated. This affects decorations\n    // only so it doesn't trigger a state update.\n    const oldIndex =\n      this.state.draggingState.draggedCellOrientation === \"row\"\n        ? this.state.rowIndex\n        : this.state.colIndex;\n    const newIndex =\n      this.state.draggingState.draggedCellOrientation === \"row\"\n        ? rowIndex\n        : colIndex;\n    const dispatchDecorationsTransaction = newIndex !== oldIndex;\n\n    // Checks if either the hovered cell has changed and updates the row and\n    // column index. Also updates the reference DOMRect.\n    if (this.state.rowIndex !== rowIndex || this.state.colIndex !== colIndex) {\n      this.state.rowIndex = rowIndex;\n      this.state.colIndex = colIndex;\n\n      this.state.referencePosCell = tableCellElement.getBoundingClientRect();\n\n      emitStateUpdate = true;\n    }\n\n    // Checks if the mouse cursor position along the axis that the user is\n    // dragging on has changed and updates it.\n    const mousePos =\n      this.state.draggingState.draggedCellOrientation === \"row\"\n        ? boundedMouseCoords.top\n        : boundedMouseCoords.left;\n    if (this.state.draggingState.mousePos !== mousePos) {\n      this.state.draggingState.mousePos = mousePos;\n\n      emitStateUpdate = true;\n    }\n\n    // Emits a state update if any of the fields have changed.\n    if (emitStateUpdate) {\n      this.emitUpdate();\n    }\n\n    // Dispatches a dummy transaction to force a decorations update if\n    // necessary.\n    if (dispatchDecorationsTransaction) {\n      this.editor.transact((tr) => tr.setMeta(tableHandlesPluginKey, true));\n    }\n  };\n\n  dropHandler = (event: DragEvent) => {\n    this.mouseState = \"up\";\n    if (this.state === undefined || this.state.draggingState === undefined) {\n      return false;\n    }\n\n    if (\n      this.state.rowIndex === undefined ||\n      this.state.colIndex === undefined\n    ) {\n      throw new Error(\n        \"Attempted to drop table row or column, but no table block was hovered prior.\",\n      );\n    }\n\n    event.preventDefault();\n\n    const { draggingState, colIndex, rowIndex } = this.state;\n\n    const columnWidths = this.state.block.content.columnWidths;\n\n    if (draggingState.draggedCellOrientation === \"row\") {\n      if (\n        !canRowBeDraggedInto(\n          this.state.block,\n          draggingState.originalIndex,\n          rowIndex,\n        )\n      ) {\n        // If the target row is invalid, don't move the row\n        return false;\n      }\n      const newTable = moveRow(\n        this.state.block,\n        draggingState.originalIndex,\n        rowIndex,\n      );\n      this.editor.updateBlock(this.state.block, {\n        type: \"table\",\n        content: {\n          ...this.state.block.content,\n          rows: newTable as any,\n        },\n      });\n    } else {\n      if (\n        !canColumnBeDraggedInto(\n          this.state.block,\n          draggingState.originalIndex,\n          colIndex,\n        )\n      ) {\n        // If the target column is invalid, don't move the column\n        return false;\n      }\n      const newTable = moveColumn(\n        this.state.block,\n        draggingState.originalIndex,\n        colIndex,\n      );\n      const [columnWidth] = columnWidths.splice(draggingState.originalIndex, 1);\n      columnWidths.splice(colIndex, 0, columnWidth);\n      this.editor.updateBlock(this.state.block, {\n        type: \"table\",\n        content: {\n          ...this.state.block.content,\n          columnWidths,\n          rows: newTable as any,\n        },\n      });\n    }\n\n    // Have to reset text cursor position to the block as `updateBlock` moves\n    // the existing selection out of the block.\n    this.editor.setTextCursorPosition(this.state.block.id);\n\n    return true;\n  };\n  // Updates drag handles when the table is modified or removed.\n  update() {\n    if (!this.state || !this.state.show) {\n      return;\n    }\n\n    // Hide handles if the table block has been removed.\n    this.state.block = this.editor.getBlock(this.state.block.id)!;\n    if (\n      !this.state.block ||\n      this.state.block.type !== \"table\" ||\n      // when collaborating, the table element might be replaced and out of date\n      // because yjs replaces the element when for example you change the color via the side menu\n      !this.tableElement?.isConnected\n    ) {\n      this.state.show = false;\n      this.state.showAddOrRemoveRowsButton = false;\n      this.state.showAddOrRemoveColumnsButton = false;\n      this.emitUpdate();\n\n      return;\n    }\n\n    const { height: rowCount, width: colCount } = getDimensionsOfTable(\n      this.state.block,\n    );\n\n    if (\n      this.state.rowIndex !== undefined &&\n      this.state.colIndex !== undefined\n    ) {\n      // If rows or columns are deleted in the update, the hovered indices for\n      // those may now be out of bounds. If this is the case, they are moved to\n      // the new last row or column.\n      if (this.state.rowIndex >= rowCount) {\n        this.state.rowIndex = rowCount - 1;\n      }\n      if (this.state.colIndex >= colCount) {\n        this.state.colIndex = colCount - 1;\n      }\n    }\n\n    // Update bounding boxes.\n    const tableBody = this.tableElement!.querySelector(\"tbody\");\n\n    if (!tableBody) {\n      throw new Error(\n        \"Table block does not contain a 'tbody' HTML element. This should never happen.\",\n      );\n    }\n\n    if (\n      this.state.rowIndex !== undefined &&\n      this.state.colIndex !== undefined\n    ) {\n      const row = tableBody.children[this.state.rowIndex];\n      const cell = row.children[this.state.colIndex];\n      if (cell) {\n        this.state.referencePosCell = cell.getBoundingClientRect();\n      } else {\n        this.state.rowIndex = undefined;\n        this.state.colIndex = undefined;\n      }\n    }\n    this.state.referencePosTable = tableBody.getBoundingClientRect();\n\n    this.emitUpdate();\n  }\n\n  destroy() {\n    this.pmView.dom.removeEventListener(\"mousemove\", this.mouseMoveHandler);\n    window.removeEventListener(\"mouseup\", this.mouseUpHandler);\n    this.pmView.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler);\n    this.pmView.root.removeEventListener(\n      \"dragover\",\n      this.dragOverHandler as EventListener,\n    );\n    this.pmView.root.removeEventListener(\n      \"drop\",\n      this.dropHandler as unknown as EventListener,\n    );\n  }\n}\n\nexport const tableHandlesPluginKey = new PluginKey(\"TableHandlesPlugin\");\n\nexport class TableHandlesProsemirrorPlugin<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> extends BlockNoteExtension {\n  public static key() {\n    return \"tableHandles\";\n  }\n\n  private view: TableHandlesView<I, S> | undefined;\n\n  constructor(\n    private readonly editor: BlockNoteEditor<\n      BlockSchemaWithBlock<\"table\", DefaultBlockSchema[\"table\"]>,\n      I,\n      S\n    >,\n  ) {\n    super();\n    this.addProsemirrorPlugin(\n      new Plugin({\n        key: tableHandlesPluginKey,\n        view: (editorView) => {\n          this.view = new TableHandlesView(editor, editorView, (state) => {\n            this.emit(\"update\", state);\n          });\n          return this.view;\n        },\n        // We use decorations to render the drop cursor when dragging a table row\n        // or column. The decorations are updated in the `dragOverHandler` method.\n        props: {\n          decorations: (state) => {\n            if (\n              this.view === undefined ||\n              this.view.state === undefined ||\n              this.view.state.draggingState === undefined ||\n              this.view.tablePos === undefined\n            ) {\n              return;\n            }\n\n            const newIndex =\n              this.view.state.draggingState.draggedCellOrientation === \"row\"\n                ? this.view.state.rowIndex\n                : this.view.state.colIndex;\n\n            if (newIndex === undefined) {\n              return;\n            }\n\n            const decorations: Decoration[] = [];\n            const { block, draggingState } = this.view.state;\n            const { originalIndex, draggedCellOrientation } = draggingState;\n\n            // Return empty decorations if:\n            // - Dragging to same position\n            // - No block exists\n            // - Row drag not allowed\n            // - Column drag not allowed\n            if (\n              newIndex === originalIndex ||\n              !block ||\n              (draggedCellOrientation === \"row\" &&\n                !canRowBeDraggedInto(block, originalIndex, newIndex)) ||\n              (draggedCellOrientation === \"col\" &&\n                !canColumnBeDraggedInto(block, originalIndex, newIndex))\n            ) {\n              return DecorationSet.create(state.doc, decorations);\n            }\n\n            // Gets the table to show the drop cursor in.\n            const tableResolvedPos = state.doc.resolve(this.view.tablePos + 1);\n\n            if (\n              this.view.state.draggingState.draggedCellOrientation === \"row\"\n            ) {\n              const cellsInRow = getCellsAtRowHandle(\n                this.view.state.block,\n                newIndex,\n              );\n\n              cellsInRow.forEach(({ row, col }) => {\n                // Gets each row in the table.\n                const rowResolvedPos = state.doc.resolve(\n                  tableResolvedPos.posAtIndex(row) + 1,\n                );\n\n                // Gets the cell within the row.\n                const cellResolvedPos = state.doc.resolve(\n                  rowResolvedPos.posAtIndex(col) + 1,\n                );\n                const cellNode = cellResolvedPos.node();\n                // Creates a decoration at the start or end of each cell,\n                // depending on whether the new index is before or after the\n                // original index.\n                const decorationPos =\n                  cellResolvedPos.pos +\n                  (newIndex > originalIndex ? cellNode.nodeSize - 2 : 0);\n                decorations.push(\n                  // The widget is a small bar which spans the width of the cell.\n                  Decoration.widget(decorationPos, () => {\n                    const widget = document.createElement(\"div\");\n                    widget.className = \"bn-table-drop-cursor\";\n                    widget.style.left = \"0\";\n                    widget.style.right = \"0\";\n                    // This is only necessary because the drop indicator's height\n                    // is an even number of pixels, whereas the border between\n                    // table cells is an odd number of pixels. So this makes the\n                    // positioning slightly more consistent regardless of where\n                    // the row is being dropped.\n                    if (newIndex > originalIndex) {\n                      widget.style.bottom = \"-2px\";\n                    } else {\n                      widget.style.top = \"-3px\";\n                    }\n                    widget.style.height = \"4px\";\n\n                    return widget;\n                  }),\n                );\n              });\n            } else {\n              const cellsInColumn = getCellsAtColumnHandle(\n                this.view.state.block,\n                newIndex,\n              );\n\n              cellsInColumn.forEach(({ row, col }) => {\n                // Gets each row in the table.\n                const rowResolvedPos = state.doc.resolve(\n                  tableResolvedPos.posAtIndex(row) + 1,\n                );\n\n                // Gets the cell within the row.\n                const cellResolvedPos = state.doc.resolve(\n                  rowResolvedPos.posAtIndex(col) + 1,\n                );\n                const cellNode = cellResolvedPos.node();\n\n                // Creates a decoration at the start or end of each cell,\n                // depending on whether the new index is before or after the\n                // original index.\n                const decorationPos =\n                  cellResolvedPos.pos +\n                  (newIndex > originalIndex ? cellNode.nodeSize - 2 : 0);\n\n                decorations.push(\n                  // The widget is a small bar which spans the height of the cell.\n                  Decoration.widget(decorationPos, () => {\n                    const widget = document.createElement(\"div\");\n                    widget.className = \"bn-table-drop-cursor\";\n                    widget.style.top = \"0\";\n                    widget.style.bottom = \"0\";\n                    // This is only necessary because the drop indicator's width\n                    // is an even number of pixels, whereas the border between\n                    // table cells is an odd number of pixels. So this makes the\n                    // positioning slightly more consistent regardless of where\n                    // the column is being dropped.\n                    if (newIndex > originalIndex) {\n                      widget.style.right = \"-2px\";\n                    } else {\n                      widget.style.left = \"-3px\";\n                    }\n                    widget.style.width = \"4px\";\n\n                    return widget;\n                  }),\n                );\n              });\n            }\n\n            return DecorationSet.create(state.doc, decorations);\n          },\n        },\n      }),\n    );\n  }\n\n  public onUpdate(callback: (state: TableHandlesState<I, S>) => void) {\n    return this.on(\"update\", callback);\n  }\n\n  /**\n   * Callback that should be set on the `dragStart` event for whichever element\n   * is used as the column drag handle.\n   */\n  colDragStart = (event: {\n    dataTransfer: DataTransfer | null;\n    clientX: number;\n  }) => {\n    if (\n      this.view!.state === undefined ||\n      this.view!.state.colIndex === undefined\n    ) {\n      throw new Error(\n        \"Attempted to drag table column, but no table block was hovered prior.\",\n      );\n    }\n\n    this.view!.state.draggingState = {\n      draggedCellOrientation: \"col\",\n      originalIndex: this.view!.state.colIndex,\n      mousePos: event.clientX,\n    };\n    this.view!.emitUpdate();\n\n    this.editor.transact((tr) =>\n      tr.setMeta(tableHandlesPluginKey, {\n        draggedCellOrientation:\n          this.view!.state!.draggingState!.draggedCellOrientation,\n        originalIndex: this.view!.state!.colIndex,\n        newIndex: this.view!.state!.colIndex,\n        tablePos: this.view!.tablePos,\n      }),\n    );\n\n    if (!this.editor.prosemirrorView) {\n      throw new Error(\"Editor view not initialized.\");\n    }\n\n    setHiddenDragImage(this.editor.prosemirrorView.root);\n    event.dataTransfer!.setDragImage(dragImageElement!, 0, 0);\n    event.dataTransfer!.effectAllowed = \"move\";\n  };\n\n  /**\n   * Callback that should be set on the `dragStart` event for whichever element\n   * is used as the row drag handle.\n   */\n  rowDragStart = (event: {\n    dataTransfer: DataTransfer | null;\n    clientY: number;\n  }) => {\n    if (\n      this.view!.state === undefined ||\n      this.view!.state.rowIndex === undefined\n    ) {\n      throw new Error(\n        \"Attempted to drag table row, but no table block was hovered prior.\",\n      );\n    }\n\n    this.view!.state.draggingState = {\n      draggedCellOrientation: \"row\",\n      originalIndex: this.view!.state.rowIndex,\n      mousePos: event.clientY,\n    };\n    this.view!.emitUpdate();\n\n    this.editor.transact((tr) =>\n      tr.setMeta(tableHandlesPluginKey, {\n        draggedCellOrientation:\n          this.view!.state!.draggingState!.draggedCellOrientation,\n        originalIndex: this.view!.state!.rowIndex,\n        newIndex: this.view!.state!.rowIndex,\n        tablePos: this.view!.tablePos,\n      }),\n    );\n\n    if (!this.editor.prosemirrorView) {\n      throw new Error(\"Editor view not initialized.\");\n    }\n\n    setHiddenDragImage(this.editor.prosemirrorView.root);\n    event.dataTransfer!.setDragImage(dragImageElement!, 0, 0);\n    event.dataTransfer!.effectAllowed = \"copyMove\";\n  };\n\n  /**\n   * Callback that should be set on the `dragEnd` event for both the element\n   * used as the row drag handle, and the one used as the column drag handle.\n   */\n  dragEnd = () => {\n    if (this.view!.state === undefined) {\n      throw new Error(\n        \"Attempted to drag table row, but no table block was hovered prior.\",\n      );\n    }\n\n    this.view!.state.draggingState = undefined;\n    this.view!.emitUpdate();\n\n    this.editor.transact((tr) => tr.setMeta(tableHandlesPluginKey, null));\n\n    if (!this.editor.prosemirrorView) {\n      throw new Error(\"Editor view not initialized.\");\n    }\n\n    unsetHiddenDragImage(this.editor.prosemirrorView.root);\n  };\n\n  /**\n   * Freezes the drag handles. When frozen, they will stay attached to the same\n   * cell regardless of which cell is hovered by the mouse cursor.\n   */\n  freezeHandles = () => {\n    this.view!.menuFrozen = true;\n  };\n\n  /**\n   * Unfreezes the drag handles. When frozen, they will stay attached to the\n   * same cell regardless of which cell is hovered by the mouse cursor.\n   */\n  unfreezeHandles = () => {\n    this.view!.menuFrozen = false;\n  };\n\n  getCellsAtRowHandle = (\n    block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n    relativeRowIndex: RelativeCellIndices[\"row\"],\n  ) => {\n    return getCellsAtRowHandle(block, relativeRowIndex);\n  };\n\n  /**\n   * Get all the cells in a column of the table block.\n   */\n  getCellsAtColumnHandle = (\n    block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n    relativeColumnIndex: RelativeCellIndices[\"col\"],\n  ) => {\n    return getCellsAtColumnHandle(block, relativeColumnIndex);\n  };\n\n  /**\n   * Sets the selection to the given cell or a range of cells.\n   * @returns The new state after the selection has been set.\n   */\n  private setCellSelection = (\n    state: EditorState,\n    relativeStartCell: RelativeCellIndices,\n    relativeEndCell: RelativeCellIndices = relativeStartCell,\n  ) => {\n    const view = this.view;\n\n    if (!view) {\n      throw new Error(\"Table handles view not initialized\");\n    }\n\n    const tableResolvedPos = state.doc.resolve(view.tablePos! + 1);\n    const startRowResolvedPos = state.doc.resolve(\n      tableResolvedPos.posAtIndex(relativeStartCell.row) + 1,\n    );\n    const startCellResolvedPos = state.doc.resolve(\n      // No need for +1, since CellSelection expects the position before the cell\n      startRowResolvedPos.posAtIndex(relativeStartCell.col),\n    );\n    const endRowResolvedPos = state.doc.resolve(\n      tableResolvedPos.posAtIndex(relativeEndCell.row) + 1,\n    );\n    const endCellResolvedPos = state.doc.resolve(\n      // No need for +1, since CellSelection expects the position before the cell\n      endRowResolvedPos.posAtIndex(relativeEndCell.col),\n    );\n\n    // Begin a new transaction to set the selection\n    const tr = state.tr;\n\n    // Set the selection to the given cell or a range of cells\n    tr.setSelection(\n      new CellSelection(startCellResolvedPos, endCellResolvedPos),\n    );\n\n    // Quickly apply the transaction to get the new state to update the selection before splitting the cell\n    return state.apply(tr);\n  };\n\n  /**\n   * Adds a row or column to the table using prosemirror-table commands\n   */\n  addRowOrColumn = (\n    index: RelativeCellIndices[\"row\"] | RelativeCellIndices[\"col\"],\n    direction:\n      | { orientation: \"row\"; side: \"above\" | \"below\" }\n      | { orientation: \"column\"; side: \"left\" | \"right\" },\n  ) => {\n    this.editor.exec((beforeState, dispatch) => {\n      const state = this.setCellSelection(\n        beforeState,\n        direction.orientation === \"row\"\n          ? { row: index, col: 0 }\n          : { row: 0, col: index },\n      );\n\n      if (direction.orientation === \"row\") {\n        if (direction.side === \"above\") {\n          return addRowBefore(state, dispatch);\n        } else {\n          return addRowAfter(state, dispatch);\n        }\n      } else {\n        if (direction.side === \"left\") {\n          return addColumnBefore(state, dispatch);\n        } else {\n          return addColumnAfter(state, dispatch);\n        }\n      }\n    });\n  };\n\n  /**\n   * Removes a row or column from the table using prosemirror-table commands\n   */\n  removeRowOrColumn = (\n    index: RelativeCellIndices[\"row\"] | RelativeCellIndices[\"col\"],\n    direction: \"row\" | \"column\",\n  ) => {\n    if (direction === \"row\") {\n      return this.editor.exec((beforeState, dispatch) => {\n        const state = this.setCellSelection(beforeState, {\n          row: index,\n          col: 0,\n        });\n        return deleteRow(state, dispatch);\n      });\n    } else {\n      return this.editor.exec((beforeState, dispatch) => {\n        const state = this.setCellSelection(beforeState, {\n          row: 0,\n          col: index,\n        });\n        return deleteColumn(state, dispatch);\n      });\n    }\n  };\n\n  /**\n   * Merges the cells in the table block.\n   */\n  mergeCells = (cellsToMerge?: {\n    relativeStartCell: RelativeCellIndices;\n    relativeEndCell: RelativeCellIndices;\n  }) => {\n    return this.editor.exec((beforeState, dispatch) => {\n      const state = cellsToMerge\n        ? this.setCellSelection(\n            beforeState,\n            cellsToMerge.relativeStartCell,\n            cellsToMerge.relativeEndCell,\n          )\n        : beforeState;\n\n      return mergeCells(state, dispatch);\n    });\n  };\n\n  /**\n   * Splits the cell in the table block.\n   * If no cell is provided, the current cell selected will be split.\n   */\n  splitCell = (relativeCellToSplit?: RelativeCellIndices) => {\n    return this.editor.exec((beforeState, dispatch) => {\n      const state = relativeCellToSplit\n        ? this.setCellSelection(beforeState, relativeCellToSplit)\n        : beforeState;\n\n      return splitCell(state, dispatch);\n    });\n  };\n\n  /**\n   * Gets the start and end cells of the current cell selection.\n   * @returns The start and end cells of the current cell selection.\n   */\n  getCellSelection = ():\n    | undefined\n    | {\n        from: RelativeCellIndices;\n        to: RelativeCellIndices;\n        /**\n         * All of the cells that are within the selected range.\n         */\n        cells: RelativeCellIndices[];\n      } => {\n    // Based on the current selection, find the table cells that are within the selected range\n\n    return this.editor.transact((tr) => {\n      const selection = tr.selection;\n\n      let $fromCell = selection.$from;\n      let $toCell = selection.$to;\n      if (isTableCellSelection(selection)) {\n        // When the selection is a table cell selection, we can find the\n        // from and to cells by iterating over the ranges in the selection\n        const { ranges } = selection;\n        ranges.forEach((range) => {\n          $fromCell = range.$from.min($fromCell ?? range.$from);\n          $toCell = range.$to.max($toCell ?? range.$to);\n        });\n      } else {\n        // When the selection is a normal text selection\n        // Assumes we are within a tableParagraph\n        // And find the from and to cells by resolving the positions\n        $fromCell = tr.doc.resolve(\n          selection.$from.pos - selection.$from.parentOffset - 1,\n        );\n        $toCell = tr.doc.resolve(\n          selection.$to.pos - selection.$to.parentOffset - 1,\n        );\n\n        // Opt-out when the selection is not pointing into cells\n        if ($fromCell.pos === 0 || $toCell.pos === 0) {\n          return undefined;\n        }\n      }\n\n      // Find the row and table that the from and to cells are in\n      const $fromRow = tr.doc.resolve(\n        $fromCell.pos - $fromCell.parentOffset - 1,\n      );\n      const $toRow = tr.doc.resolve($toCell.pos - $toCell.parentOffset - 1);\n\n      // Find the table\n      const $table = tr.doc.resolve($fromRow.pos - $fromRow.parentOffset - 1);\n\n      // Find the column and row indices of the from and to cells\n      const fromColIndex = $fromCell.index($fromRow.depth);\n      const fromRowIndex = $fromRow.index($table.depth);\n      const toColIndex = $toCell.index($toRow.depth);\n      const toRowIndex = $toRow.index($table.depth);\n\n      const cells: RelativeCellIndices[] = [];\n      for (let row = fromRowIndex; row <= toRowIndex; row++) {\n        for (let col = fromColIndex; col <= toColIndex; col++) {\n          cells.push({ row, col });\n        }\n      }\n\n      return {\n        from: {\n          row: fromRowIndex,\n          col: fromColIndex,\n        },\n        to: {\n          row: toRowIndex,\n          col: toColIndex,\n        },\n        cells,\n      };\n    });\n  };\n\n  /**\n   * Gets the direction of the merge based on the current cell selection.\n   *\n   * Returns undefined when there is no cell selection, or the selection is not within a table.\n   */\n  getMergeDirection = (\n    block:\n      | BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>\n      | undefined,\n  ) => {\n    return this.editor.transact((tr) => {\n      const isSelectingTableCells = isTableCellSelection(tr.selection)\n        ? tr.selection\n        : undefined;\n\n      if (\n        !isSelectingTableCells ||\n        !block ||\n        // Only offer the merge button if there is more than one cell selected.\n        isSelectingTableCells.ranges.length <= 1\n      ) {\n        return undefined;\n      }\n\n      const cellSelection = this.getCellSelection();\n\n      if (!cellSelection) {\n        return undefined;\n      }\n\n      if (areInSameColumn(cellSelection.from, cellSelection.to, block)) {\n        return \"vertical\";\n      }\n\n      return \"horizontal\";\n    });\n  };\n\n  cropEmptyRowsOrColumns = (\n    block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n    removeEmpty: \"columns\" | \"rows\",\n  ) => {\n    return cropEmptyRowsOrColumns(block, removeEmpty);\n  };\n\n  addRowsOrColumns = (\n    block: BlockFromConfigNoChildren<DefaultBlockSchema[\"table\"], any, any>,\n    addType: \"columns\" | \"rows\",\n    numToAdd: number,\n  ) => {\n    return addRowsOrColumns(block, addType, numToAdd);\n  };\n}\n","import { Extension } from \"@tiptap/core\";\n\nexport const TextAlignmentExtension = Extension.create({\n  name: \"textAlignment\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        // Attribute is applied to block content instead of container so that child blocks don't inherit the text\n        // alignment styling.\n        types: [\n          \"paragraph\",\n          \"heading\",\n          \"bulletListItem\",\n          \"numberedListItem\",\n          \"checkListItem\",\n          \"tableCell\",\n          \"tableHeader\",\n        ],\n        attributes: {\n          textAlignment: {\n            default: \"left\",\n            parseHTML: (element) => {\n              return element.getAttribute(\"data-text-alignment\");\n            },\n            renderHTML: (attributes) => {\n              if (attributes.textAlignment === \"left\") {\n                return {};\n              }\n              return {\n                \"data-text-alignment\": attributes.textAlignment,\n              };\n            },\n          },\n        },\n      },\n    ];\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { defaultProps } from \"../../blocks/defaultProps.js\";\n\nexport const TextColorExtension = Extension.create({\n  name: \"blockTextColor\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\", \"tableCell\", \"tableHeader\"],\n        attributes: {\n          textColor: {\n            default: defaultProps.textColor.default,\n            parseHTML: (element) =>\n              element.hasAttribute(\"data-text-color\")\n                ? element.getAttribute(\"data-text-color\")\n                : defaultProps.textColor.default,\n            renderHTML: (attributes) => {\n              if (attributes.textColor === defaultProps.textColor.default) {\n                return {};\n              }\n              return {\n                \"data-text-color\": attributes.textColor,\n              };\n            },\n          },\n        },\n      },\n    ];\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\n\n// based on https://github.com/ueberdosis/tiptap/blob/40a9404c94c7fef7900610c195536384781ae101/demos/src/Experiments/TrailingNode/Vue/trailing-node.ts\n\n/**\n * Extension based on:\n * - https://github.com/ueberdosis/tiptap/blob/v1/packages/tiptap-extensions/src/extensions/TrailingNode.js\n * - https://github.com/remirror/remirror/blob/e0f1bec4a1e8073ce8f5500d62193e52321155b9/packages/prosemirror-trailing-node/src/trailing-node-plugin.ts\n */\n\nexport interface TrailingNodeOptions {\n  node: string;\n}\n\n/**\n * Add a trailing node to the document so the user can always click at the bottom of the document and start typing\n */\nexport const TrailingNode = Extension.create<TrailingNodeOptions>({\n  name: \"trailingNode\",\n\n  addProseMirrorPlugins() {\n    const plugin = new PluginKey(this.name);\n    // const disabledNodes = Object.entries(this.editor.schema.nodes)\n    //   .map(([, value]) => value)\n    //   .filter((node) => this.options.notAfter.includes(node.name));\n\n    return [\n      new Plugin({\n        key: plugin,\n        appendTransaction: (_, __, state) => {\n          const { doc, tr, schema } = state;\n          const shouldInsertNodeAtEnd = plugin.getState(state);\n          const endPosition = doc.content.size - 2;\n          const type = schema.nodes[\"blockContainer\"];\n          const contentType = schema.nodes[\"paragraph\"];\n          if (!shouldInsertNodeAtEnd) {\n            return;\n          }\n\n          return tr.insert(\n            endPosition,\n            type.create(undefined, contentType.create()),\n          );\n        },\n        state: {\n          init: (_, _state) => {\n            // (maybe fix): use same logic as apply() here\n            // so it works when initializing\n          },\n          apply: (tr, value) => {\n            if (!tr.docChanged) {\n              return value;\n            }\n\n            let lastNode = tr.doc.lastChild;\n\n            if (!lastNode || lastNode.type.name !== \"blockGroup\") {\n              throw new Error(\"Expected blockGroup\");\n            }\n\n            lastNode = lastNode.lastChild;\n\n            if (!lastNode || lastNode.type.name !== \"blockContainer\") {\n              return true; // not a blockContainer, but for example Columns. Insert trailing node\n            }\n\n            const lastContentNode = lastNode.firstChild;\n\n            if (!lastContentNode) {\n              throw new Error(\"Expected blockContent\");\n            }\n\n            // If last node is not empty (size > 4) or it doesn't contain\n            // inline content, we need to add a trailing node.\n            return (\n              lastNode.nodeSize > 4 ||\n              lastContentNode.type.spec.content !== \"inline*\"\n            );\n          },\n        },\n      }),\n    ];\n  },\n});\n","import { Node } from \"@tiptap/core\";\n\nimport type { BlockNoteEditor } from \"../editor/BlockNoteEditor.js\";\nimport { BlockNoteDOMAttributes } from \"../schema/index.js\";\nimport { mergeCSSClasses } from \"../util/browser.js\";\n\n// Object containing all possible block attributes.\nconst BlockAttributes: Record<string, string> = {\n  blockColor: \"data-block-color\",\n  blockStyle: \"data-block-style\",\n  id: \"data-id\",\n  depth: \"data-depth\",\n  depthChange: \"data-depth-change\",\n};\n\n/**\n * The main \"Block node\" documents consist of\n */\nexport const BlockContainer = Node.create<{\n  domAttributes?: BlockNoteDOMAttributes;\n  editor: BlockNoteEditor<any, any, any>;\n}>({\n  name: \"blockContainer\",\n  group: \"blockGroupChild bnBlock\",\n  // A block always contains content, and optionally a blockGroup which contains nested blocks\n  content: \"blockContent blockGroup?\",\n  // Ensures content-specific keyboard handlers trigger first.\n  priority: 50,\n  defining: true,\n  marks: \"insertion modification deletion\",\n  parseHTML() {\n    return [\n      {\n        tag: \"div[data-node-type=\" + this.name + \"]\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const attrs: Record<string, string> = {};\n          for (const [nodeAttr, HTMLAttr] of Object.entries(BlockAttributes)) {\n            if (element.getAttribute(HTMLAttr)) {\n              attrs[nodeAttr] = element.getAttribute(HTMLAttr)!;\n            }\n          }\n\n          return attrs;\n        },\n      },\n      // Ignore `blockOuter` divs, but parse the `blockContainer` divs inside them.\n      {\n        tag: `div[data-node-type=\"blockOuter\"]`,\n        skip: true,\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const blockOuter = document.createElement(\"div\");\n    blockOuter.className = \"bn-block-outer\";\n    blockOuter.setAttribute(\"data-node-type\", \"blockOuter\");\n    for (const [attribute, value] of Object.entries(HTMLAttributes)) {\n      if (attribute !== \"class\") {\n        blockOuter.setAttribute(attribute, value);\n      }\n    }\n\n    const blockHTMLAttributes = {\n      ...(this.options.domAttributes?.block || {}),\n      ...HTMLAttributes,\n    };\n    const block = document.createElement(\"div\");\n    block.className = mergeCSSClasses(\"bn-block\", blockHTMLAttributes.class);\n    block.setAttribute(\"data-node-type\", this.name);\n    for (const [attribute, value] of Object.entries(blockHTMLAttributes)) {\n      if (attribute !== \"class\") {\n        block.setAttribute(attribute, value);\n      }\n    }\n\n    blockOuter.appendChild(block);\n\n    return {\n      dom: blockOuter,\n      contentDOM: block,\n    };\n  },\n});\n","import { Node } from \"@tiptap/core\";\nimport { BlockNoteDOMAttributes } from \"../schema/index.js\";\nimport { mergeCSSClasses } from \"../util/browser.js\";\n\nexport const BlockGroup = Node.create<{\n  domAttributes?: BlockNoteDOMAttributes;\n}>({\n  name: \"blockGroup\",\n  group: \"childContainer\",\n  content: \"blockGroupChild+\",\n  marks: \"deletion insertion modification\",\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.getAttribute(\"data-node-type\") === \"blockGroup\") {\n            // Null means the element matches, but we don't want to add any attributes to the node.\n            return null;\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    const blockGroupHTMLAttributes = {\n      ...(this.options.domAttributes?.blockGroup || {}),\n      ...HTMLAttributes,\n    };\n    const blockGroup = document.createElement(\"div\");\n    blockGroup.className = mergeCSSClasses(\n      \"bn-block-group\",\n      blockGroupHTMLAttributes.class,\n    );\n    blockGroup.setAttribute(\"data-node-type\", \"blockGroup\");\n    for (const [attribute, value] of Object.entries(blockGroupHTMLAttributes)) {\n      if (attribute !== \"class\") {\n        blockGroup.setAttribute(attribute, value);\n      }\n    }\n\n    return {\n      dom: blockGroup,\n      contentDOM: blockGroup,\n    };\n  },\n});\n","import { Node } from \"@tiptap/core\";\n\nexport const Doc = Node.create({\n  name: \"doc\",\n  topNode: true,\n  content: \"blockGroup\",\n  marks: \"insertion modification deletion\",\n});\n","import * as Y from \"yjs\";\n\nimport {\n  yCursorPluginKey,\n  ySyncPluginKey,\n  yUndoPluginKey,\n} from \"y-prosemirror\";\nimport { CursorPlugin } from \"./CursorPlugin.js\";\nimport { SyncPlugin } from \"./SyncPlugin.js\";\nimport { UndoPlugin } from \"./UndoPlugin.js\";\n\nimport {\n  BlockNoteEditor,\n  BlockNoteEditorOptions,\n} from \"../../editor/BlockNoteEditor.js\";\nimport { BlockNoteExtension } from \"../../editor/BlockNoteExtension.js\";\n\nexport class ForkYDocPlugin extends BlockNoteExtension<{\n  forked: boolean;\n}> {\n  public static key() {\n    return \"ForkYDocPlugin\";\n  }\n\n  private editor: BlockNoteEditor<any, any, any>;\n  private collaboration: BlockNoteEditorOptions<any, any, any>[\"collaboration\"];\n\n  constructor({\n    editor,\n    collaboration,\n  }: {\n    editor: BlockNoteEditor<any, any, any>;\n    collaboration: BlockNoteEditorOptions<any, any, any>[\"collaboration\"];\n  }) {\n    super(editor);\n    this.editor = editor;\n    this.collaboration = collaboration;\n  }\n\n  /**\n   * To find a fragment in another ydoc, we need to search for it.\n   */\n  private findTypeInOtherYdoc<T extends Y.AbstractType<any>>(\n    ytype: T,\n    otherYdoc: Y.Doc,\n  ): T {\n    const ydoc = ytype.doc!;\n    if (ytype._item === null) {\n      /**\n       * If is a root type, we need to find the root key in the original ydoc\n       * and use it to get the type in the other ydoc.\n       */\n      const rootKey = Array.from(ydoc.share.keys()).find(\n        (key) => ydoc.share.get(key) === ytype,\n      );\n      if (rootKey == null) {\n        throw new Error(\"type does not exist in other ydoc\");\n      }\n      return otherYdoc.get(rootKey, ytype.constructor as new () => T) as T;\n    } else {\n      /**\n       * If it is a sub type, we use the item id to find the history type.\n       */\n      const ytypeItem = ytype._item;\n      const otherStructs =\n        otherYdoc.store.clients.get(ytypeItem.id.client) ?? [];\n      const itemIndex = Y.findIndexSS(otherStructs, ytypeItem.id.clock);\n      const otherItem = otherStructs[itemIndex] as Y.Item;\n      const otherContent = otherItem.content as Y.ContentType;\n      return otherContent.type as T;\n    }\n  }\n\n  /**\n   * Whether the editor is editing a forked document,\n   * preserving a reference to the original document and the forked document.\n   */\n  public get isForkedFromRemote() {\n    return this.forkedState !== undefined;\n  }\n\n  /**\n   * Stores whether the editor is editing a forked document,\n   * preserving a reference to the original document and the forked document.\n   */\n  private forkedState:\n    | {\n        originalFragment: Y.XmlFragment;\n        undoStack: Y.UndoManager[\"undoStack\"];\n        forkedFragment: Y.XmlFragment;\n      }\n    | undefined;\n\n  /**\n   * Fork the Y.js document from syncing to the remote,\n   * allowing modifications to the document without affecting the remote.\n   * These changes can later be rolled back or applied to the remote.\n   */\n  public fork() {\n    if (this.isForkedFromRemote) {\n      return;\n    }\n\n    const originalFragment = this.collaboration?.fragment;\n\n    if (!originalFragment) {\n      throw new Error(\"No fragment to fork from\");\n    }\n\n    const doc = new Y.Doc();\n    // Copy the original document to a new Yjs document\n    Y.applyUpdate(doc, Y.encodeStateAsUpdate(originalFragment.doc!));\n\n    // Find the forked fragment in the new Yjs document\n    const forkedFragment = this.findTypeInOtherYdoc(originalFragment, doc);\n\n    this.forkedState = {\n      undoStack: yUndoPluginKey.getState(this.editor.prosemirrorState)!\n        .undoManager.undoStack,\n      originalFragment,\n      forkedFragment,\n    };\n\n    // Need to reset all the yjs plugins\n    this.editor._tiptapEditor.unregisterPlugin([\n      yCursorPluginKey,\n      yUndoPluginKey,\n      ySyncPluginKey,\n    ]);\n    // Register them again, based on the new forked fragment\n    this.editor._tiptapEditor.registerPlugin(\n      new SyncPlugin(forkedFragment).plugins[0],\n    );\n    this.editor._tiptapEditor.registerPlugin(\n      new UndoPlugin({ editor: this.editor }).plugins[0],\n    );\n    // No need to register the cursor plugin again, it's a local fork\n    this.emit(\"forked\", true);\n  }\n\n  /**\n   * Resume syncing the Y.js document to the remote\n   * If `keepChanges` is true, any changes that have been made to the forked document will be applied to the original document.\n   * Otherwise, the original document will be restored and the changes will be discarded.\n   */\n  public merge({ keepChanges }: { keepChanges: boolean }) {\n    if (!this.forkedState) {\n      return;\n    }\n    // Remove the forked fragment's plugins\n    this.editor._tiptapEditor.unregisterPlugin(ySyncPluginKey);\n    this.editor._tiptapEditor.unregisterPlugin(yUndoPluginKey);\n\n    const { originalFragment, forkedFragment, undoStack } = this.forkedState;\n    this.editor.extensions[\"ySyncPlugin\"] = new SyncPlugin(originalFragment);\n    this.editor.extensions[\"yCursorPlugin\"] = new CursorPlugin(\n      this.collaboration!,\n    );\n    this.editor.extensions[\"yUndoPlugin\"] = new UndoPlugin({\n      editor: this.editor,\n    });\n\n    // Register the plugins again, based on the original fragment\n    this.editor._tiptapEditor.registerPlugin(\n      this.editor.extensions[\"ySyncPlugin\"].plugins[0],\n    );\n    this.editor._tiptapEditor.registerPlugin(\n      this.editor.extensions[\"yCursorPlugin\"].plugins[0],\n    );\n    this.editor._tiptapEditor.registerPlugin(\n      this.editor.extensions[\"yUndoPlugin\"].plugins[0],\n    );\n\n    // Reset the undo stack to the original undo stack\n    yUndoPluginKey.getState(\n      this.editor.prosemirrorState,\n    )!.undoManager.undoStack = undoStack;\n\n    if (keepChanges) {\n      // Apply any changes that have been made to the fork, onto the original doc\n      const update = Y.encodeStateAsUpdate(\n        forkedFragment.doc!,\n        Y.encodeStateVector(originalFragment.doc!),\n      );\n      // Applying this change will add to the undo stack, allowing it to be undone normally\n      Y.applyUpdate(originalFragment.doc!, update, this.editor);\n    }\n    // Reset the forked state\n    this.forkedState = undefined;\n    this.emit(\"forked\", false);\n  }\n}\n","import { AnyExtension, Extension, extensions } from \"@tiptap/core\";\nimport { Gapcursor } from \"@tiptap/extension-gapcursor\";\nimport { History } from \"@tiptap/extension-history\";\nimport { Link } from \"@tiptap/extension-link\";\nimport { Text } from \"@tiptap/extension-text\";\nimport { Plugin } from \"prosemirror-state\";\nimport * as Y from \"yjs\";\n\nimport { createDropFileExtension } from \"../api/clipboard/fromClipboard/fileDropExtension.js\";\nimport { createPasteFromClipboardExtension } from \"../api/clipboard/fromClipboard/pasteExtension.js\";\nimport { createCopyToClipboardExtension } from \"../api/clipboard/toClipboard/copyExtension.js\";\nimport type { ThreadStore } from \"../comments/index.js\";\nimport { BackgroundColorExtension } from \"../extensions/BackgroundColor/BackgroundColorExtension.js\";\nimport { BlockChangePlugin } from \"../extensions/BlockChange/BlockChangePlugin.js\";\nimport { CursorPlugin } from \"../extensions/Collaboration/CursorPlugin.js\";\nimport { SyncPlugin } from \"../extensions/Collaboration/SyncPlugin.js\";\nimport { UndoPlugin } from \"../extensions/Collaboration/UndoPlugin.js\";\nimport { CommentMark } from \"../extensions/Comments/CommentMark.js\";\nimport { CommentsPlugin } from \"../extensions/Comments/CommentsPlugin.js\";\nimport { FilePanelProsemirrorPlugin } from \"../extensions/FilePanel/FilePanelPlugin.js\";\nimport { FormattingToolbarProsemirrorPlugin } from \"../extensions/FormattingToolbar/FormattingToolbarPlugin.js\";\nimport { HardBreak } from \"../extensions/HardBreak/HardBreak.js\";\nimport { KeyboardShortcutsExtension } from \"../extensions/KeyboardShortcuts/KeyboardShortcutsExtension.js\";\nimport { LinkToolbarProsemirrorPlugin } from \"../extensions/LinkToolbar/LinkToolbarPlugin.js\";\nimport {\n  DEFAULT_LINK_PROTOCOL,\n  VALID_LINK_PROTOCOLS,\n} from \"../extensions/LinkToolbar/protocols.js\";\nimport { NodeSelectionKeyboardPlugin } from \"../extensions/NodeSelectionKeyboard/NodeSelectionKeyboardPlugin.js\";\nimport { PlaceholderPlugin } from \"../extensions/Placeholder/PlaceholderPlugin.js\";\nimport { PreviousBlockTypePlugin } from \"../extensions/PreviousBlockType/PreviousBlockTypePlugin.js\";\nimport { ShowSelectionPlugin } from \"../extensions/ShowSelection/ShowSelectionPlugin.js\";\nimport { SideMenuProsemirrorPlugin } from \"../extensions/SideMenu/SideMenuPlugin.js\";\nimport { SuggestionMenuProseMirrorPlugin } from \"../extensions/SuggestionMenu/SuggestionPlugin.js\";\nimport {\n  SuggestionAddMark,\n  SuggestionDeleteMark,\n  SuggestionModificationMark,\n} from \"../extensions/Suggestions/SuggestionMarks.js\";\nimport { TableHandlesProsemirrorPlugin } from \"../extensions/TableHandles/TableHandlesPlugin.js\";\nimport { TextAlignmentExtension } from \"../extensions/TextAlignment/TextAlignmentExtension.js\";\nimport { TextColorExtension } from \"../extensions/TextColor/TextColorExtension.js\";\nimport { TrailingNode } from \"../extensions/TrailingNode/TrailingNodeExtension.js\";\nimport UniqueID from \"../extensions/UniqueID/UniqueID.js\";\nimport { BlockContainer, BlockGroup, Doc } from \"../pm-nodes/index.js\";\nimport {\n  BlockNoteDOMAttributes,\n  BlockSchema,\n  BlockSpecs,\n  InlineContentSchema,\n  InlineContentSpecs,\n  StyleSchema,\n  StyleSpecs,\n} from \"../schema/index.js\";\nimport type {\n  BlockNoteEditor,\n  BlockNoteEditorOptions,\n  SupportedExtension,\n} from \"./BlockNoteEditor.js\";\nimport { ForkYDocPlugin } from \"../extensions/Collaboration/ForkYDocPlugin.js\";\n\ntype ExtensionOptions<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n> = {\n  editor: BlockNoteEditor<BSchema, I, S>;\n  domAttributes: Partial<BlockNoteDOMAttributes>;\n  blockSpecs: BlockSpecs;\n  inlineContentSpecs: InlineContentSpecs;\n  styleSpecs: StyleSpecs;\n  trailingBlock: boolean | undefined;\n  collaboration?: {\n    fragment: Y.XmlFragment;\n    user: {\n      name: string;\n      color: string;\n      [key: string]: string;\n    };\n    provider: any;\n    renderCursor?: (user: any) => HTMLElement;\n    showCursorLabels?: \"always\" | \"activity\";\n  };\n  disableExtensions: string[] | undefined;\n  setIdAttribute?: boolean;\n  animations: boolean;\n  tableHandles: boolean;\n  dropCursor: (opts: any) => Plugin;\n  placeholders: Record<\n    string | \"default\" | \"emptyDocument\",\n    string | undefined\n  >;\n  tabBehavior?: \"prefer-navigate-ui\" | \"prefer-indent\";\n  comments?: {\n    threadStore: ThreadStore;\n  };\n  pasteHandler: BlockNoteEditorOptions<any, any, any>[\"pasteHandler\"];\n};\n\n/**\n * Get all the Tiptap extensions BlockNote is configured with by default\n */\nexport const getBlockNoteExtensions = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  opts: ExtensionOptions<BSchema, I, S>,\n) => {\n  const ret: Record<string, SupportedExtension> = {};\n  const tiptapExtensions = getTipTapExtensions(opts);\n\n  for (const ext of tiptapExtensions) {\n    ret[ext.name] = ext;\n  }\n\n  if (opts.collaboration) {\n    ret[\"ySyncPlugin\"] = new SyncPlugin(opts.collaboration.fragment);\n    ret[\"yUndoPlugin\"] = new UndoPlugin({ editor: opts.editor });\n\n    if (opts.collaboration.provider?.awareness) {\n      ret[\"yCursorPlugin\"] = new CursorPlugin(opts.collaboration);\n    }\n    ret[\"forkYDocPlugin\"] = new ForkYDocPlugin({\n      editor: opts.editor,\n      collaboration: opts.collaboration,\n    });\n  }\n\n  // Note: this is pretty hardcoded and will break when user provides plugins with same keys.\n  // Define name on plugins instead and not make this a map?\n  ret[\"formattingToolbar\"] = new FormattingToolbarProsemirrorPlugin(\n    opts.editor,\n  );\n  ret[\"linkToolbar\"] = new LinkToolbarProsemirrorPlugin(opts.editor);\n  ret[\"sideMenu\"] = new SideMenuProsemirrorPlugin(opts.editor);\n  ret[\"suggestionMenus\"] = new SuggestionMenuProseMirrorPlugin(opts.editor);\n  ret[\"filePanel\"] = new FilePanelProsemirrorPlugin(opts.editor as any);\n  ret[\"placeholder\"] = new PlaceholderPlugin(opts.editor, opts.placeholders);\n\n  if (opts.animations ?? true) {\n    ret[\"animations\"] = new PreviousBlockTypePlugin();\n  }\n\n  if (opts.tableHandles) {\n    ret[\"tableHandles\"] = new TableHandlesProsemirrorPlugin(opts.editor as any);\n  }\n\n  ret[\"nodeSelectionKeyboard\"] = new NodeSelectionKeyboardPlugin();\n  ret[\"blockChange\"] = new BlockChangePlugin();\n\n  ret[\"showSelection\"] = new ShowSelectionPlugin(opts.editor);\n\n  if (opts.comments) {\n    ret[\"comments\"] = new CommentsPlugin(\n      opts.editor,\n      opts.comments.threadStore,\n      CommentMark.name,\n    );\n  }\n\n  const disableExtensions: string[] = opts.disableExtensions || [];\n  for (const ext of disableExtensions) {\n    delete ret[ext];\n  }\n\n  return ret;\n};\n\nlet LINKIFY_INITIALIZED = false;\n\n/**\n * Get all the Tiptap extensions BlockNote is configured with by default\n */\nconst getTipTapExtensions = <\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  opts: ExtensionOptions<BSchema, I, S>,\n) => {\n  const tiptapExtensions: AnyExtension[] = [\n    extensions.ClipboardTextSerializer,\n    extensions.Commands,\n    extensions.Editable,\n    extensions.FocusEvents,\n    extensions.Tabindex,\n\n    // DevTools,\n    Gapcursor,\n\n    // DropCursor,\n    Extension.create({\n      name: \"dropCursor\",\n      addProseMirrorPlugins: () => [\n        opts.dropCursor({\n          width: 5,\n          color: \"#ddeeff\",\n          editor: opts.editor,\n        }),\n      ],\n    }),\n\n    UniqueID.configure({\n      // everything from bnBlock group (nodes that represent a BlockNote block should have an id)\n      types: [\"blockContainer\", \"columnList\", \"column\"],\n      setIdAttribute: opts.setIdAttribute,\n    }),\n    HardBreak,\n    // Comments,\n\n    // basics:\n    Text,\n\n    // marks:\n    SuggestionAddMark,\n    SuggestionDeleteMark,\n    SuggestionModificationMark,\n    Link.extend({\n      inclusive: false,\n    }).configure({\n      defaultProtocol: DEFAULT_LINK_PROTOCOL,\n      // only call this once if we have multiple editors installed. Or fix https://github.com/ueberdosis/tiptap/issues/5450\n      protocols: LINKIFY_INITIALIZED ? [] : VALID_LINK_PROTOCOLS,\n    }),\n    ...Object.values(opts.styleSpecs).map((styleSpec) => {\n      return styleSpec.implementation.mark.configure({\n        editor: opts.editor as any,\n      });\n    }),\n\n    TextColorExtension,\n\n    BackgroundColorExtension,\n    TextAlignmentExtension,\n\n    // make sure escape blurs editor, so that we can tab to other elements in the host page (accessibility)\n    Extension.create({\n      name: \"OverrideEscape\",\n      addKeyboardShortcuts() {\n        return {\n          Escape: () => {\n            if (opts.editor.suggestionMenus.shown) {\n              // escape is handled by suggestionmenu\n              return false;\n            }\n            return this.editor.commands.blur();\n          },\n        };\n      },\n    }),\n\n    // nodes\n    Doc,\n    BlockContainer.configure({\n      editor: opts.editor,\n      domAttributes: opts.domAttributes,\n    }),\n    KeyboardShortcutsExtension.configure({\n      editor: opts.editor,\n      tabBehavior: opts.tabBehavior,\n    }),\n    BlockGroup.configure({\n      domAttributes: opts.domAttributes,\n    }),\n    ...Object.values(opts.inlineContentSpecs)\n      .filter((a) => a.config !== \"link\" && a.config !== \"text\")\n      .map((inlineContentSpec) => {\n        return inlineContentSpec.implementation!.node.configure({\n          editor: opts.editor as any,\n        });\n      }),\n\n    ...Object.values(opts.blockSpecs).flatMap((blockSpec) => {\n      return [\n        // dependent nodes (e.g.: tablecell / row)\n        ...(blockSpec.implementation.requiredExtensions || []).map((ext) =>\n          ext.configure({\n            editor: opts.editor,\n            domAttributes: opts.domAttributes,\n          }),\n        ),\n        // the actual node itself\n        blockSpec.implementation.node.configure({\n          editor: opts.editor,\n          domAttributes: opts.domAttributes,\n        }),\n      ];\n    }),\n    createCopyToClipboardExtension(opts.editor),\n    createPasteFromClipboardExtension(\n      opts.editor,\n      opts.pasteHandler ||\n        ((context: {\n          defaultPasteHandler: (context?: {\n            prioritizeMarkdownOverHTML?: boolean;\n            plainTextAsMarkdown?: boolean;\n          }) => boolean | undefined;\n        }) => context.defaultPasteHandler()),\n    ),\n    createDropFileExtension(opts.editor),\n\n    // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),\n    // should be handled before Enter handlers in other components like splitListItem\n    ...(opts.trailingBlock === undefined || opts.trailingBlock\n      ? [TrailingNode]\n      : []),\n    ...(opts.comments ? [CommentMark] : []),\n  ];\n\n  LINKIFY_INITIALIZED = true;\n\n  if (!opts.collaboration) {\n    // disable history extension when collaboration is enabled as y-prosemirror takes care of undo / redo\n    tiptapExtensions.push(History);\n  }\n\n  return tiptapExtensions;\n};\n","import { Fragment, Schema, Slice } from \"@tiptap/pm/model\";\nimport { EditorView } from \"@tiptap/pm/view\";\n\nimport { getBlockInfoFromSelection } from \"../api/getBlockInfoFromPos.js\";\n\n// helper function to remove a child from a fragment\nfunction removeChild(node: Fragment, n: number) {\n  const children: any[] = [];\n  node.forEach((child, _, i) => {\n    if (i !== n) {\n      children.push(child);\n    }\n  });\n  return Fragment.from(children);\n}\n\n/**\n * Wrap adjacent tableRow items in a table.\n *\n * This makes sure the content that we paste is always a table (and not a tableRow)\n * A table works better for the remaing paste handling logic, as it's actually a blockContent node\n */\nexport function wrapTableRows(f: Fragment, schema: Schema) {\n  const newItems: any[] = [];\n  for (let i = 0; i < f.childCount; i++) {\n    if (f.child(i).type.name === \"tableRow\") {\n      if (\n        newItems.length > 0 &&\n        newItems[newItems.length - 1].type.name === \"table\"\n      ) {\n        // append to existing table\n        const prevTable = newItems[newItems.length - 1];\n        const newTable = prevTable.copy(prevTable.content.addToEnd(f.child(i)));\n        newItems[newItems.length - 1] = newTable;\n      } else {\n        // create new table to wrap tableRow with\n        const newTable = schema.nodes.table.createChecked(\n          undefined,\n          f.child(i),\n        );\n        newItems.push(newTable);\n      }\n    } else {\n      newItems.push(f.child(i));\n    }\n  }\n  f = Fragment.from(newItems);\n  return f;\n}\n\n/**\n * fix for https://github.com/ProseMirror/prosemirror/issues/1430#issuecomment-1822570821\n *\n * This fix wraps pasted ProseMirror nodes in their own `blockContainer` nodes\n * in most cases. This is to ensure that ProseMirror inserts them as separate\n * blocks, which it sometimes doesn't do because it doesn't have enough context\n * about the hierarchy of the pasted nodes. The issue can be seen when pasting\n * e.g. an image or two consecutive paragraphs, where PM tries to nest the\n * pasted block(s) when it shouldn't.\n *\n * However, the fix is not applied in a few cases. See `shouldApplyFix` for\n * which cases are excluded.\n */\nexport function transformPasted(slice: Slice, view: EditorView) {\n  let f = Fragment.from(slice.content);\n  f = wrapTableRows(f, view.state.schema);\n\n  if (!shouldApplyFix(f, view)) {\n    // Don't apply the fix.\n    return new Slice(f, slice.openStart, slice.openEnd);\n  }\n\n  for (let i = 0; i < f.childCount; i++) {\n    if (f.child(i).type.spec.group === \"blockContent\") {\n      const content = [f.child(i)];\n\n      // when there is a blockGroup with lists, it should be nested in the new blockcontainer\n      // (if we remove this if-block, the nesting bug will be fixed, but lists won't be nested correctly)\n      if (\n        i + 1 < f.childCount &&\n        f.child(i + 1).type.name === \"blockGroup\" // TODO\n      ) {\n        const nestedChild = f\n          .child(i + 1)\n          .child(0)\n          .child(0);\n\n        if (\n          nestedChild.type.name === \"bulletListItem\" ||\n          nestedChild.type.name === \"numberedListItem\" ||\n          nestedChild.type.name === \"checkListItem\"\n        ) {\n          content.push(f.child(i + 1));\n          f = removeChild(f, i + 1);\n        }\n      }\n      const container = view.state.schema.nodes.blockContainer.createChecked(\n        undefined,\n        content,\n      );\n      f = f.replaceChild(i, container);\n    }\n  }\n  return new Slice(f, slice.openStart, slice.openEnd);\n}\n\n/**\n * Used in `transformPasted` to check if the fix there should be applied, i.e.\n * if the pasted fragment should be wrapped in a `blockContainer` node. This\n * will explicitly tell ProseMirror to treat it as a separate block.\n */\nfunction shouldApplyFix(fragment: Fragment, view: EditorView) {\n  const nodeHasSingleChild = fragment.childCount === 1;\n  const nodeHasInlineContent =\n    fragment.firstChild?.type.spec.content === \"inline*\";\n  const nodeHasTableContent =\n    fragment.firstChild?.type.spec.content === \"tableRow+\";\n\n  if (nodeHasSingleChild) {\n    if (nodeHasInlineContent) {\n      // Case when we paste a single node with inline content, e.g. a paragraph\n      // or heading. We want to insert the content in-line for better UX instead\n      // of a separate block, so we return false.\n      return false;\n    }\n\n    if (nodeHasTableContent) {\n      // Not ideal that we check selection here, as `transformPasted` is called\n      // for both paste and drop events. Drop events can potentially cause\n      // issues as they don't always happen at the current selection.\n      const blockInfo = getBlockInfoFromSelection(view.state);\n      if (blockInfo.isBlockContainer) {\n        const selectedBlockHasTableContent =\n          blockInfo.blockContent.node.type.spec.content === \"tableRow+\";\n\n        // Case for when we paste a single node with table content, i.e. a\n        // table. Normally, we return true as we want to ensure the table is\n        // inserted as a separate block. However, if the selection is in an\n        // existing table, we return false, as we want the content of the pasted\n        // table to be added to the existing one for better UX.\n        return !selectedBlockHasTableContent;\n      }\n    }\n  }\n\n  return true;\n}\n","import {\n  Editor,\n  EditorOptions,\n  Editor as TiptapEditor,\n  createDocument,\n} from \"@tiptap/core\";\n\nimport { Node } from \"@tiptap/pm/model\";\n\nimport { EditorView } from \"@tiptap/pm/view\";\n\nimport { EditorState, Transaction } from \"@tiptap/pm/state\";\nimport { blockToNode } from \"../api/nodeConversions/blockToNode.js\";\nimport { PartialBlock } from \"../blocks/defaultBlocks.js\";\nimport { StyleSchema } from \"../schema/index.js\";\nimport type { BlockNoteEditor } from \"./BlockNoteEditor.js\";\n\nexport type BlockNoteTipTapEditorOptions = Partial<\n  Omit<EditorOptions, \"content\">\n> & {\n  content: PartialBlock<any, any, any>[];\n};\n\n/**\n * Custom Editor class that extends TiptapEditor and separates\n * the creation of the view from the constructor.\n */\nexport class BlockNoteTipTapEditor extends TiptapEditor {\n  private _state: EditorState;\n\n  public static create = (\n    options: BlockNoteTipTapEditorOptions,\n    styleSchema: StyleSchema,\n  ) => {\n    // because we separate the constructor from the creation of the view,\n    // we need to patch setTimeout to prevent this code from having any effect:\n    // https://github.com/ueberdosis/tiptap/blob/45bac803283446795ad1b03f43d3746fa54a68ff/packages/core/src/Editor.ts#L117\n    const oldSetTimeout = globalThis?.window?.setTimeout;\n    if (typeof globalThis?.window?.setTimeout !== \"undefined\") {\n      globalThis.window.setTimeout = (() => {\n        return 0;\n      }) as any;\n    }\n    try {\n      return new BlockNoteTipTapEditor(options, styleSchema);\n    } finally {\n      if (oldSetTimeout) {\n        globalThis.window.setTimeout = oldSetTimeout;\n      }\n    }\n  };\n\n  protected constructor(\n    options: BlockNoteTipTapEditorOptions,\n    styleSchema: StyleSchema,\n  ) {\n    // possible fix for next.js server side rendering\n    // const d = globalThis.document;\n    // const w = globalThis.window;\n    // if (!globalThis.document) {\n    //   globalThis.document = {\n    //     createElement: () => {},\n    //   };\n    // }\n\n    // options.injectCSS = false\n\n    super({ ...options, content: undefined });\n    // try {\n    //   globalThis.window = w;\n    //   } catch(e) {}\n    //   try {\n    //     globalThis.document = d;\n    //     } catch(e) {}\n\n    // This is a hack to make \"initial content detection\" by y-prosemirror (and also tiptap isEmpty)\n    // properly detect whether or not the document has changed.\n    // We change the doc.createAndFill function to make sure the initial block id is set, instead of null\n    const schema = this.schema;\n    let cache: any;\n    const oldCreateAndFill = schema.nodes.doc.createAndFill;\n    (schema.nodes.doc as any).createAndFill = (...args: any) => {\n      if (cache) {\n        return cache;\n      }\n      const ret = oldCreateAndFill.apply(schema.nodes.doc, args);\n\n      // create a copy that we can mutate (otherwise, assigning attrs is not safe and corrupts the pm state)\n      const jsonNode = JSON.parse(JSON.stringify(ret!.toJSON()));\n      jsonNode.content[0].content[0].attrs.id = \"initialBlockId\";\n\n      cache = Node.fromJSON(schema, jsonNode);\n      return cache;\n    };\n\n    let doc: Node;\n\n    try {\n      const pmNodes = options?.content.map((b) =>\n        blockToNode(b, this.schema, styleSchema).toJSON(),\n      );\n      doc = createDocument(\n        {\n          type: \"doc\",\n          content: [\n            {\n              type: \"blockGroup\",\n              content: pmNodes,\n            },\n          ],\n        },\n        this.schema,\n        this.options.parseOptions,\n      );\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(\n        \"Error creating document from blocks passed as `initialContent`. Caused by exception: \",\n        e,\n      );\n      throw new Error(\n        \"Error creating document from blocks passed as `initialContent`:\\n\" +\n          +JSON.stringify(options.content),\n      );\n    }\n\n    // Create state immediately, so that it's available independently from the View,\n    // the way Prosemirror \"intends it to be\". This also makes sure that we can access\n    // the state before the view is created / mounted.\n    this._state = EditorState.create({\n      doc,\n      schema: this.schema,\n      // selection: selection || undefined,\n    });\n  }\n\n  get state() {\n    if (this.view) {\n      this._state = this.view.state;\n    }\n    return this._state;\n  }\n\n  dispatch(transaction: Transaction) {\n    if (!this.view) {\n      // before view has been initialized\n      this._state = this.state.apply(transaction);\n      this.emit(\"transaction\", {\n        editor: this,\n        transaction,\n      });\n      return;\n    }\n    // This is a verbatim copy of the default dispatch method, but with the following changes:\n    // - We provide the appendedTransactions to a new `v3-update` event\n    // In the future, we can remove this dispatch method entirely and rely on the new `update` event signature which does what we want by providing the appendedTransactions\n    ////////////////////////////////////////////////////////////////////////////////\n    // if the editor / the view of the editor was destroyed\n    // the transaction should not be dispatched as there is no view anymore.\n    if (this.view.isDestroyed) {\n      return;\n    }\n\n    if (this.isCapturingTransaction) {\n      // Do the default capture behavior\n      (this as any).dispatchTransaction(transaction);\n\n      return;\n    }\n\n    const { state, transactions: appendedTransactions } =\n      this.state.applyTransaction(transaction);\n    const selectionHasChanged = !this.state.selection.eq(state.selection);\n\n    this.emit(\"beforeTransaction\", {\n      editor: this,\n      transaction,\n      nextState: state,\n    });\n    this.view.updateState(state);\n    this.emit(\"transaction\", {\n      editor: this,\n      transaction,\n    });\n\n    if (selectionHasChanged) {\n      this.emit(\"selectionUpdate\", {\n        editor: this,\n        transaction,\n      });\n    }\n\n    const focus = transaction.getMeta(\"focus\");\n    const blur = transaction.getMeta(\"blur\");\n\n    if (focus) {\n      this.emit(\"focus\", {\n        editor: this,\n        event: focus.event,\n        transaction,\n      });\n    }\n\n    if (blur) {\n      this.emit(\"blur\", {\n        editor: this,\n        event: blur.event,\n        transaction,\n      });\n    }\n\n    if (!transaction.docChanged || transaction.getMeta(\"preventUpdate\")) {\n      return;\n    }\n\n    this.emit(\"update\", {\n      editor: this,\n      transaction,\n    });\n    this.emit(\"v3-update\", {\n      editor: this,\n      transaction,\n      appendedTransactions: appendedTransactions.slice(1),\n    });\n  }\n\n  // a helper method that can enable plugins before the view has been initialized\n  // currently only used for testing\n  forceEnablePlugins() {\n    if (this.view) {\n      throw new Error(\n        \"forcePluginsEnabled called after view has been initialized\",\n      );\n    }\n    this._state = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    });\n  }\n\n  /**\n   * Replace the default `createView` method with a custom one - which we call on mount\n   */\n  private createViewAlternative(\n    blockNoteEditor: BlockNoteEditor<any, any, any>,\n    contentComponent?: any,\n  ) {\n    (this as any).contentComponent = contentComponent;\n\n    const markViews: any = {};\n    this.extensionManager.extensions.forEach((extension) => {\n      if (extension.type === \"mark\" && extension.config.addMarkView) {\n        // Note: migrate to using `addMarkView` from tiptap as soon as this lands\n        // (currently tiptap doesn't support markviews)\n        markViews[extension.name] =\n          extension.config.addMarkView(blockNoteEditor);\n      }\n    });\n\n    this.view = new EditorView(\n      { mount: this.options.element as any }, // use mount option so that we reuse the existing element instead of creating a new one\n      {\n        ...this.options.editorProps,\n        // @ts-ignore\n        dispatchTransaction: this.dispatch.bind(this),\n        state: this.state,\n        markViews,\n        nodeViews: this.extensionManager.nodeViews,\n      },\n    );\n\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins directly afterwards.\n    //\n    // To research: this is the default tiptap behavior, but might actually not be necessary\n    // it feels like it's a workaround for plugins that don't account for the view not being available yet\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins,\n    });\n\n    this.view.updateState(newState);\n\n    // emit the created event, call here manually because we blocked the default call in the constructor\n    // (https://github.com/ueberdosis/tiptap/blob/45bac803283446795ad1b03f43d3746fa54a68ff/packages/core/src/Editor.ts#L117)\n    this.commands.focus(\n      this.options.autofocus ||\n        this.options.element.getAttribute(\"data-bn-autofocus\") === \"true\",\n      { scrollIntoView: false },\n    );\n    this.emit(\"create\", { editor: this });\n    this.isInitialized = true;\n  }\n\n  /**\n   * Mounts / unmounts the editor to a dom element\n   *\n   * @param element DOM element to mount to, ur null / undefined to destroy\n   */\n  public mount = (\n    blockNoteEditor: BlockNoteEditor<any, any, any>,\n    element?: HTMLElement | null,\n    contentComponent?: any,\n  ) => {\n    if (!element) {\n      this.destroy();\n      this.isInitialized = false;\n    } else {\n      this.options.element = element;\n      this.createViewAlternative(blockNoteEditor, contentComponent);\n    }\n  };\n}\n\n(BlockNoteTipTapEditor.prototype as any).createView = function () {\n  // no-op\n  // Disable default call to `createView` in the Editor constructor.\n  // We should call `createView` manually only when a DOM element is available\n\n  // additional fix because onPaste and onDrop depend on installing plugins in constructor which we don't support\n  // (note: can probably be removed after tiptap upgrade fixed in 2.8.0)\n  this.options.onPaste = this.options.onDrop = undefined;\n};\n\ndeclare module \"@tiptap/core\" {\n  interface EditorEvents {\n    /**\n     * This is a custom event that will be emitted in Tiptap V3.\n     * We use it to provide the appendedTransactions, until Tiptap V3 is released.\n     */\n    \"v3-update\": {\n      editor: Editor;\n      transaction: Transaction;\n      appendedTransactions: Transaction[];\n    };\n  }\n}\n","import {\n  AnyExtension,\n  EditorOptions,\n  Extension,\n  getSchema,\n  isNodeSelection,\n  Mark,\n  posToDOMRect,\n  Node as TipTapNode,\n} from \"@tiptap/core\";\nimport { Node, Schema } from \"prosemirror-model\";\n// import \"./blocknote.css\";\nimport * as Y from \"yjs\";\nimport { insertBlocks } from \"../api/blockManipulation/commands/insertBlocks/insertBlocks.js\";\nimport {\n  moveBlocksDown,\n  moveBlocksUp,\n} from \"../api/blockManipulation/commands/moveBlocks/moveBlocks.js\";\nimport {\n  canNestBlock,\n  canUnnestBlock,\n  nestBlock,\n  unnestBlock,\n} from \"../api/blockManipulation/commands/nestBlock/nestBlock.js\";\nimport { removeAndInsertBlocks } from \"../api/blockManipulation/commands/replaceBlocks/replaceBlocks.js\";\nimport { updateBlock } from \"../api/blockManipulation/commands/updateBlock/updateBlock.js\";\nimport {\n  getBlock,\n  getNextBlock,\n  getParentBlock,\n  getPrevBlock,\n} from \"../api/blockManipulation/getBlock/getBlock.js\";\nimport { insertContentAt } from \"../api/blockManipulation/insertContentAt.js\";\nimport {\n  getSelection,\n  getSelectionCutBlocks,\n  setSelection,\n} from \"../api/blockManipulation/selections/selection.js\";\nimport {\n  getTextCursorPosition,\n  setTextCursorPosition,\n} from \"../api/blockManipulation/selections/textCursorPosition.js\";\nimport { createExternalHTMLExporter } from \"../api/exporters/html/externalHTMLExporter.js\";\nimport { blocksToMarkdown } from \"../api/exporters/markdown/markdownExporter.js\";\nimport { HTMLToBlocks } from \"../api/parsers/html/parseHTML.js\";\nimport {\n  markdownToBlocks,\n  markdownToHTML,\n} from \"../api/parsers/markdown/parseMarkdown.js\";\nimport {\n  Block,\n  DefaultBlockSchema,\n  DefaultInlineContentSchema,\n  DefaultStyleSchema,\n  PartialBlock,\n} from \"../blocks/defaultBlocks.js\";\nimport type { CommentsPlugin } from \"../extensions/Comments/CommentsPlugin.js\";\nimport { FilePanelProsemirrorPlugin } from \"../extensions/FilePanel/FilePanelPlugin.js\";\nimport { FormattingToolbarProsemirrorPlugin } from \"../extensions/FormattingToolbar/FormattingToolbarPlugin.js\";\nimport { LinkToolbarProsemirrorPlugin } from \"../extensions/LinkToolbar/LinkToolbarPlugin.js\";\nimport { ShowSelectionPlugin } from \"../extensions/ShowSelection/ShowSelectionPlugin.js\";\nimport { SideMenuProsemirrorPlugin } from \"../extensions/SideMenu/SideMenuPlugin.js\";\nimport { SuggestionMenuProseMirrorPlugin } from \"../extensions/SuggestionMenu/SuggestionPlugin.js\";\nimport { TableHandlesProsemirrorPlugin } from \"../extensions/TableHandles/TableHandlesPlugin.js\";\nimport { UniqueID } from \"../extensions/UniqueID/UniqueID.js\";\nimport {\n  BlockIdentifier,\n  BlockNoteDOMAttributes,\n  BlockSchema,\n  BlockSpecs,\n  InlineContentSchema,\n  InlineContentSpecs,\n  PartialInlineContent,\n  Styles,\n  StyleSchema,\n  StyleSpecs,\n} from \"../schema/index.js\";\nimport { mergeCSSClasses } from \"../util/browser.js\";\nimport { NoInfer, UnreachableCaseError } from \"../util/typescript.js\";\n\nimport { getBlockNoteExtensions } from \"./BlockNoteExtensions.js\";\nimport { TextCursorPosition } from \"./cursorPositionTypes.js\";\n\nimport { Selection } from \"./selectionTypes.js\";\nimport { transformPasted } from \"./transformPasted.js\";\n\nimport { checkDefaultBlockTypeInSchema } from \"../blocks/defaultBlockTypeGuards.js\";\nimport { BlockNoteSchema } from \"./BlockNoteSchema.js\";\nimport {\n  BlockNoteTipTapEditor,\n  BlockNoteTipTapEditorOptions,\n} from \"./BlockNoteTipTapEditor.js\";\n\nimport { Dictionary } from \"../i18n/dictionary.js\";\nimport { en } from \"../i18n/locales/index.js\";\n\nimport { redo, undo } from \"@tiptap/pm/history\";\nimport {\n  TextSelection,\n  type Command,\n  type Plugin,\n  type Transaction,\n} from \"@tiptap/pm/state\";\nimport { dropCursor } from \"prosemirror-dropcursor\";\nimport { EditorView } from \"prosemirror-view\";\nimport { redoCommand, undoCommand, ySyncPluginKey } from \"y-prosemirror\";\nimport { createInternalHTMLSerializer } from \"../api/exporters/html/internalHTMLSerializer.js\";\nimport { inlineContentToNodes } from \"../api/nodeConversions/blockToNode.js\";\nimport { docToBlocks } from \"../api/nodeConversions/nodeToBlock.js\";\nimport {\n  BlocksChanged,\n  getBlocksChangedByTransaction,\n} from \"../api/nodeUtil.js\";\nimport { nestedListsToBlockNoteStructure } from \"../api/parsers/html/util/nestedLists.js\";\nimport { CodeBlockOptions } from \"../blocks/CodeBlockContent/CodeBlockContent.js\";\nimport type { ThreadStore, User } from \"../comments/index.js\";\nimport type { CursorPlugin } from \"../extensions/Collaboration/CursorPlugin.js\";\nimport type { ForkYDocPlugin } from \"../extensions/Collaboration/ForkYDocPlugin.js\";\nimport { EventEmitter } from \"../util/EventEmitter.js\";\nimport { BlockNoteExtension } from \"./BlockNoteExtension.js\";\n\nimport \"../style.css\";\nimport { BlockChangePlugin } from \"../extensions/BlockChange/BlockChangePlugin.js\";\n\n/**\n * A factory function that returns a BlockNoteExtension\n * This is useful so we can create extensions that require an editor instance\n * in the constructor\n */\nexport type BlockNoteExtensionFactory = (\n  editor: BlockNoteEditor<any, any, any>,\n) => BlockNoteExtension;\n\n/**\n * We support Tiptap extensions and BlockNoteExtension based extensions\n */\nexport type SupportedExtension = AnyExtension | BlockNoteExtension;\n\nexport type BlockCache<\n  BSchema extends BlockSchema = any,\n  ISchema extends InlineContentSchema = any,\n  SSchema extends StyleSchema = any,\n> = WeakMap<Node, Block<BSchema, ISchema, SSchema>>;\n\nexport type BlockNoteEditorOptions<\n  BSchema extends BlockSchema,\n  ISchema extends InlineContentSchema,\n  SSchema extends StyleSchema,\n> = {\n  /**\n   * Whether changes to blocks (like indentation, creating lists, changing headings) should be animated or not. Defaults to `true`.\n   *\n   * @default true\n   */\n  animations?: boolean;\n\n  /**\n   * When enabled, allows for collaboration between multiple users.\n   * See [Real-time Collaboration](https://www.blocknotejs.org/docs/advanced/real-time-collaboration) for more info.\n   *\n   * @remarks `CollaborationOptions`\n   */\n  collaboration?: {\n    /**\n     * The Yjs XML fragment that's used for collaboration.\n     */\n    fragment: Y.XmlFragment;\n    /**\n     * The user info for the current user that's shown to other collaborators.\n     */\n    user: {\n      name: string;\n      color: string;\n    };\n    /**\n     * A Yjs provider (used for awareness / cursor information)\n     */\n    provider: any;\n    /**\n     * Optional function to customize how cursors of users are rendered\n     */\n    renderCursor?: (user: any) => HTMLElement;\n    /**\n     * Optional flag to set when the user label should be shown with the default\n     * collaboration cursor. Setting to \"always\" will always show the label,\n     * while \"activity\" will only show the label when the user moves the cursor\n     * or types. Defaults to \"activity\".\n     */\n    showCursorLabels?: \"always\" | \"activity\";\n  };\n\n  /**\n   * Options for code blocks.\n   */\n  codeBlock?: CodeBlockOptions;\n\n  /**\n   * Configuration for the comments feature, requires a `threadStore`.\n   *\n   * See [Comments](https://www.blocknotejs.org/docs/features/collaboration/comments) for more info.\n   * @remarks `CommentsOptions`\n   */\n  comments?: {\n    threadStore: ThreadStore;\n  };\n\n  /**\n   * Use default BlockNote font and reset the styles of <p> <li> <h1> elements etc., that are used in BlockNote.\n   *\n   * @default true\n   */\n  defaultStyles?: boolean;\n\n  /**\n   * A dictionary object containing translations for the editor.\n   *\n   * See [Localization / i18n](https://www.blocknotejs.org/docs/advanced/localization) for more info.\n   *\n   * @remarks `Dictionary` is a type that contains all the translations for the editor.\n   */\n  dictionary?: Dictionary & Record<string, any>;\n\n  /**\n   * Disable internal extensions (based on keys / extension name)\n   *\n   * @note Advanced\n   */\n  disableExtensions?: string[];\n\n  /**\n   * An object containing attributes that should be added to HTML elements of the editor.\n   *\n   * See [Adding DOM Attributes](https://www.blocknotejs.org/docs/theming#adding-dom-attributes) for more info.\n   *\n   * @example { editor: { class: \"my-editor-class\" } }\n   * @remarks `Record<string, Record<string, string>>`\n   */\n  domAttributes?: Partial<BlockNoteDOMAttributes>;\n\n  /**\n   * A replacement indicator to use when dragging and dropping blocks. Uses the [ProseMirror drop cursor](https://github.com/ProseMirror/prosemirror-dropcursor), or a modified version when [Column Blocks](https://www.blocknotejs.org/docs/document-structure#column-blocks) are enabled.\n   * @remarks `() => Plugin`\n   */\n  dropCursor?: (opts: {\n    editor: BlockNoteEditor<\n      NoInfer<BSchema>,\n      NoInfer<ISchema>,\n      NoInfer<SSchema>\n    >;\n    color?: string | false;\n    width?: number;\n    class?: string;\n  }) => Plugin;\n\n  /**\n   * Configuration for headings\n   */\n  heading?: {\n    /**\n     * The levels of headings that should be available in the editor.\n     * @note Configurable up to 6 levels of headings.\n     * @default [1, 2, 3]\n     */\n    levels?: (1 | 2 | 3 | 4 | 5 | 6)[];\n  };\n\n  /**\n   * The content that should be in the editor when it's created, represented as an array of {@link PartialBlock} objects.\n   *\n   * See [Partial Blocks](https://www.blocknotejs.org/docs/editor-api/manipulating-blocks#partial-blocks) for more info.\n   *\n   * @remarks `PartialBlock[]`\n   */\n  initialContent?: PartialBlock<\n    NoInfer<BSchema>,\n    NoInfer<ISchema>,\n    NoInfer<SSchema>\n  >[];\n\n  /**\n   * @deprecated, provide placeholders via dictionary instead\n   * @internal\n   */\n  placeholders?: Record<\n    string | \"default\" | \"emptyDocument\",\n    string | undefined\n  >;\n\n  /**\n   * Custom paste handler that can be used to override the default paste behavior.\n   *\n   * See [Paste Handling](https://www.blocknotejs.org/docs/advanced/paste-handling) for more info.\n   *\n   * @remarks `PasteHandler`\n   * @returns The function should return `true` if the paste event was handled, otherwise it should return `false` if it should be canceled or `undefined` if it should be handled by another handler.\n   *\n   * @example\n   * ```ts\n   * pasteHandler: ({ defaultPasteHandler }) => {\n   *   return defaultPasteHandler({ pasteBehavior: \"prefer-html\" });\n   * }\n   * ```\n   */\n  pasteHandler?: (context: {\n    event: ClipboardEvent;\n    editor: BlockNoteEditor<BSchema, ISchema, SSchema>;\n    /**\n     * The default paste handler\n     * @param context The context object\n     * @returns Whether the paste event was handled or not\n     */\n    defaultPasteHandler: (context?: {\n      /**\n       * Whether to prioritize Markdown content in `text/plain` over `text/html` when pasting from the clipboard.\n       * @default true\n       */\n      prioritizeMarkdownOverHTML?: boolean;\n      /**\n       * Whether to parse `text/plain` content from the clipboard as Markdown content.\n       * @default true\n       */\n      plainTextAsMarkdown?: boolean;\n    }) => boolean | undefined;\n  }) => boolean | undefined;\n\n  /**\n   * Resolve a URL of a file block to one that can be displayed or downloaded. This can be used for creating authenticated URL or\n   * implementing custom protocols / schemes\n   * @returns The URL that's\n   */\n  resolveFileUrl?: (url: string) => Promise<string>;\n\n  /**\n   * Resolve user information for comments.\n   *\n   * See [Comments](https://www.blocknotejs.org/docs/features/collaboration/comments) for more info.\n   */\n  resolveUsers?: (userIds: string[]) => Promise<User[]>;\n\n  /**\n   * The schema of the editor. The schema defines which Blocks, InlineContent, and Styles are available in the editor.\n   *\n   * See [Custom Schemas](https://www.blocknotejs.org/docs/custom-schemas) for more info.\n   * @remarks `BlockNoteSchema`\n   */\n  schema: BlockNoteSchema<BSchema, ISchema, SSchema>;\n\n  /**\n   * A flag indicating whether to set an HTML ID for every block\n   *\n   * When set to `true`, on each block an id attribute will be set with the block id\n   * Otherwise, the HTML ID attribute will not be set.\n   *\n   * (note that the id is always set on the `data-id` attribute)\n   */\n  setIdAttribute?: boolean;\n\n  /**\n   * Determines behavior when pressing Tab (or Shift-Tab) while multiple blocks are selected and a toolbar is open.\n   * - `\"prefer-navigate-ui\"`: Changes focus to the toolbar. User must press Escape to close toolbar before indenting blocks. Better for keyboard accessibility.\n   * - `\"prefer-indent\"`: Always indents selected blocks, regardless of toolbar state. Keyboard navigation of toolbars not possible.\n   * @default \"prefer-navigate-ui\"\n   */\n  tabBehavior?: \"prefer-navigate-ui\" | \"prefer-indent\";\n\n  /**\n   * Allows enabling / disabling features of tables.\n   *\n   * See [Tables](https://www.blocknotejs.org/docs/editor-basics/document-structure#tables) for more info.\n   *\n   * @remarks `TableConfig`\n   */\n  tables?: {\n    /**\n     * Whether to allow splitting and merging cells within a table.\n     *\n     * @default false\n     */\n    splitCells?: boolean;\n    /**\n     * Whether to allow changing the background color of cells.\n     *\n     * @default false\n     */\n    cellBackgroundColor?: boolean;\n    /**\n     * Whether to allow changing the text color of cells.\n     *\n     * @default false\n     */\n    cellTextColor?: boolean;\n    /**\n     * Whether to allow changing cells into headers.\n     *\n     * @default false\n     */\n    headers?: boolean;\n  };\n\n  /**\n   * An option which user can pass with `false` value to disable the automatic creation of a trailing new block on the next line when the user types or edits any block.\n   *\n   * @default true\n   */\n  trailingBlock?: boolean;\n\n  /**\n   * The `uploadFile` method is what the editor uses when files need to be uploaded (for example when selecting an image to upload).\n   * This method should set when creating the editor as this is application-specific.\n   *\n   * `undefined` means the application doesn't support file uploads.\n   *\n   * @param file The file that should be uploaded.\n   * @returns The URL of the uploaded file OR an object containing props that should be set on the file block (such as an id)\n   * @remarks `(file: File) => Promise<UploadFileResult>`\n   */\n  uploadFile?: (\n    file: File,\n    blockId?: string,\n  ) => Promise<string | Record<string, any>>;\n\n  /**\n   * additional tiptap options, undocumented\n   * @internal\n   */\n  _tiptapOptions?: Partial<EditorOptions>;\n\n  /**\n   * (experimental) add extra extensions to the editor\n   *\n   * @deprecated, should use `extensions` instead\n   * @internal\n   */\n  _extensions?: Record<\n    string,\n    | { plugin: Plugin; priority?: number }\n    | ((editor: BlockNoteEditor<any, any, any>) => {\n        plugin: Plugin;\n        priority?: number;\n      })\n  >;\n\n  /**\n   * Register extensions to the editor.\n   *\n   * @internal\n   */\n  extensions?: Array<BlockNoteExtension | BlockNoteExtensionFactory>;\n\n  /**\n   * Boolean indicating whether the editor is in headless mode.\n   * Headless mode means we can use features like importing / exporting blocks,\n   * but there's no underlying editor (UI) instantiated.\n   *\n   * You probably don't need to set this manually, but use the `server-util` package instead that uses this option internally\n   * @internal\n   */\n  _headless?: boolean;\n};\n\nconst blockNoteTipTapOptions = {\n  enableInputRules: true,\n  enablePasteRules: true,\n  enableCoreExtensions: false,\n};\n\nexport class BlockNoteEditor<\n  BSchema extends BlockSchema = DefaultBlockSchema,\n  ISchema extends InlineContentSchema = DefaultInlineContentSchema,\n  SSchema extends StyleSchema = DefaultStyleSchema,\n> extends EventEmitter<{\n  create: void;\n}> {\n  /**\n   * The underlying prosemirror schema\n   */\n  public readonly pmSchema: Schema;\n\n  /**\n   * extensions that are added to the editor, can be tiptap extensions or prosemirror plugins\n   */\n  public extensions: Record<string, SupportedExtension> = {};\n\n  /**\n   * Boolean indicating whether the editor is in headless mode.\n   * Headless mode means we can use features like importing / exporting blocks,\n   * but there's no underlying editor (UI) instantiated.\n   *\n   * You probably don't need to set this manually, but use the `server-util` package instead that uses this option internally\n   */\n  public readonly headless: boolean = false;\n\n  public readonly _tiptapEditor: Omit<BlockNoteTipTapEditor, \"view\"> & {\n    view: EditorView | undefined;\n    contentComponent: any;\n  } = undefined as any; // TODO: Type should actually reflect that it can be `undefined` in headless mode\n\n  /**\n   * Used by React to store a reference to an `ElementRenderer` helper utility to make sure we can render React elements\n   * in the correct context (used by `ReactRenderUtil`)\n   */\n  public elementRenderer: ((node: any, container: HTMLElement) => void) | null =\n    null;\n\n  /**\n   * Cache of all blocks. This makes sure we don't have to \"recompute\" blocks if underlying Prosemirror Nodes haven't changed.\n   * This is especially useful when we want to keep track of the same block across multiple operations,\n   * with this cache, blocks stay the same object reference (referential equality with ===).\n   */\n  public blockCache: BlockCache = new WeakMap();\n\n  /**\n   * The dictionary contains translations for the editor.\n   */\n  public readonly dictionary: Dictionary & Record<string, any>;\n\n  /**\n   * The schema of the editor. The schema defines which Blocks, InlineContent, and Styles are available in the editor.\n   */\n  public readonly schema: BlockNoteSchema<BSchema, ISchema, SSchema>;\n\n  public readonly blockImplementations: BlockSpecs;\n  public readonly inlineContentImplementations: InlineContentSpecs;\n  public readonly styleImplementations: StyleSpecs;\n\n  public readonly formattingToolbar: FormattingToolbarProsemirrorPlugin;\n  public readonly linkToolbar: LinkToolbarProsemirrorPlugin<\n    BSchema,\n    ISchema,\n    SSchema\n  >;\n  public readonly sideMenu: SideMenuProsemirrorPlugin<\n    BSchema,\n    ISchema,\n    SSchema\n  >;\n  public readonly suggestionMenus: SuggestionMenuProseMirrorPlugin<\n    BSchema,\n    ISchema,\n    SSchema\n  >;\n  public readonly filePanel?: FilePanelProsemirrorPlugin<ISchema, SSchema>;\n  public readonly tableHandles?: TableHandlesProsemirrorPlugin<\n    ISchema,\n    SSchema\n  >;\n  public readonly comments?: CommentsPlugin;\n\n  private readonly showSelectionPlugin: ShowSelectionPlugin;\n\n  /**\n   * The plugin for forking a document, only defined if in collaboration mode\n   */\n  public readonly forkYDocPlugin?: ForkYDocPlugin;\n  /**\n   * The `uploadFile` method is what the editor uses when files need to be uploaded (for example when selecting an image to upload).\n   * This method should set when creating the editor as this is application-specific.\n   *\n   * `undefined` means the application doesn't support file uploads.\n   *\n   * @param file The file that should be uploaded.\n   * @returns The URL of the uploaded file OR an object containing props that should be set on the file block (such as an id)\n   */\n  public readonly uploadFile:\n    | ((file: File, blockId?: string) => Promise<string | Record<string, any>>)\n    | undefined;\n\n  private onUploadStartCallbacks: ((blockId?: string) => void)[] = [];\n  private onUploadEndCallbacks: ((blockId?: string) => void)[] = [];\n\n  public readonly resolveFileUrl?: (url: string) => Promise<string>;\n  public readonly resolveUsers?: (userIds: string[]) => Promise<User[]>;\n  /**\n   * Editor settings\n   */\n  public readonly settings: {\n    tables: {\n      splitCells: boolean;\n      cellBackgroundColor: boolean;\n      cellTextColor: boolean;\n      headers: boolean;\n    };\n    codeBlock: CodeBlockOptions;\n    heading: {\n      levels: (1 | 2 | 3 | 4 | 5 | 6)[];\n    };\n  };\n\n  public static create<\n    BSchema extends BlockSchema = DefaultBlockSchema,\n    ISchema extends InlineContentSchema = DefaultInlineContentSchema,\n    SSchema extends StyleSchema = DefaultStyleSchema,\n  >(options: Partial<BlockNoteEditorOptions<BSchema, ISchema, SSchema>> = {}) {\n    return new BlockNoteEditor<BSchema, ISchema, SSchema>(options);\n  }\n\n  protected constructor(\n    protected readonly options: Partial<BlockNoteEditorOptions<any, any, any>>,\n  ) {\n    super();\n    const anyOpts = options as any;\n    if (anyOpts.onEditorContentChange) {\n      throw new Error(\n        \"onEditorContentChange initialization option is deprecated, use <BlockNoteView onChange={...} />, the useEditorChange(...) hook, or editor.onChange(...)\",\n      );\n    }\n\n    if (anyOpts.onTextCursorPositionChange) {\n      throw new Error(\n        \"onTextCursorPositionChange initialization option is deprecated, use <BlockNoteView onSelectionChange={...} />, the useEditorSelectionChange(...) hook, or editor.onSelectionChange(...)\",\n      );\n    }\n\n    if (anyOpts.onEditorReady) {\n      throw new Error(\n        \"onEditorReady is deprecated. Editor is immediately ready for use after creation.\",\n      );\n    }\n\n    if (anyOpts.editable) {\n      throw new Error(\n        \"editable initialization option is deprecated, use <BlockNoteView editable={true/false} />, or alternatively editor.isEditable = true/false\",\n      );\n    }\n\n    this.dictionary = options.dictionary || en;\n    this.settings = {\n      tables: {\n        splitCells: options?.tables?.splitCells ?? false,\n        cellBackgroundColor: options?.tables?.cellBackgroundColor ?? false,\n        cellTextColor: options?.tables?.cellTextColor ?? false,\n        headers: options?.tables?.headers ?? false,\n      },\n      codeBlock: {\n        indentLineWithTab: options?.codeBlock?.indentLineWithTab ?? true,\n        defaultLanguage: options?.codeBlock?.defaultLanguage ?? \"text\",\n        supportedLanguages: options?.codeBlock?.supportedLanguages ?? {},\n        createHighlighter: options?.codeBlock?.createHighlighter ?? undefined,\n      },\n      heading: {\n        levels: options?.heading?.levels ?? [1, 2, 3],\n      },\n    };\n\n    // apply defaults\n    const newOptions = {\n      defaultStyles: true,\n      schema: options.schema || BlockNoteSchema.create(),\n      _headless: false,\n      ...options,\n      placeholders: {\n        ...this.dictionary.placeholders,\n        ...options.placeholders,\n      },\n    };\n\n    if (newOptions.comments && !newOptions.resolveUsers) {\n      throw new Error(\"resolveUsers is required when using comments\");\n    }\n\n    this.resolveUsers = newOptions.resolveUsers;\n\n    // @ts-ignore\n    this.schema = newOptions.schema;\n    this.blockImplementations = newOptions.schema.blockSpecs;\n    this.inlineContentImplementations = newOptions.schema.inlineContentSpecs;\n    this.styleImplementations = newOptions.schema.styleSpecs;\n\n    this.extensions = getBlockNoteExtensions({\n      editor: this,\n      domAttributes: newOptions.domAttributes || {},\n      blockSpecs: this.schema.blockSpecs,\n      styleSpecs: this.schema.styleSpecs,\n      inlineContentSpecs: this.schema.inlineContentSpecs,\n      collaboration: newOptions.collaboration,\n      trailingBlock: newOptions.trailingBlock,\n      disableExtensions: newOptions.disableExtensions,\n      setIdAttribute: newOptions.setIdAttribute,\n      animations: newOptions.animations ?? true,\n      tableHandles: checkDefaultBlockTypeInSchema(\"table\", this),\n      dropCursor: this.options.dropCursor ?? dropCursor,\n      placeholders: newOptions.placeholders,\n      tabBehavior: newOptions.tabBehavior,\n      comments: newOptions.comments,\n      pasteHandler: newOptions.pasteHandler,\n    });\n\n    // add extensions from _tiptapOptions\n    (newOptions._tiptapOptions?.extensions || []).forEach((ext) => {\n      this.extensions[ext.name] = ext;\n    });\n\n    // add extensions from options\n    for (let ext of newOptions.extensions || []) {\n      if (typeof ext === \"function\") {\n        // factory\n        ext = ext(this);\n      }\n      const key = (ext.constructor as any).key();\n      if (!key) {\n        throw new Error(\n          `Extension ${ext.constructor.name} does not have a key method`,\n        );\n      }\n      if (this.extensions[key]) {\n        throw new Error(\n          `Extension ${ext.constructor.name} already exists with key ${key}`,\n        );\n      }\n      this.extensions[key] = ext;\n    }\n\n    // (when passed in via the deprecated `_extensions` option)\n    Object.entries(newOptions._extensions || {}).forEach(([key, ext]) => {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const editor = this;\n\n      const instance = typeof ext === \"function\" ? ext(editor) : ext;\n      if (!(\"plugin\" in instance)) {\n        // Assume it is an Extension/Mark/Node\n        this.extensions[key] = instance;\n        return;\n      }\n\n      this.extensions[key] = new (class extends BlockNoteExtension {\n        public static key() {\n          return key;\n        }\n        constructor() {\n          super();\n          this.addProsemirrorPlugin(instance.plugin);\n        }\n        public get priority() {\n          return instance.priority;\n        }\n      })();\n    });\n\n    this.formattingToolbar = this.extensions[\"formattingToolbar\"] as any;\n    this.linkToolbar = this.extensions[\"linkToolbar\"] as any;\n    this.sideMenu = this.extensions[\"sideMenu\"] as any;\n    this.suggestionMenus = this.extensions[\"suggestionMenus\"] as any;\n    this.filePanel = this.extensions[\"filePanel\"] as any;\n    this.tableHandles = this.extensions[\"tableHandles\"] as any;\n    this.comments = this.extensions[\"comments\"] as any;\n    this.showSelectionPlugin = this.extensions[\"showSelection\"] as any;\n    this.forkYDocPlugin = this.extensions[\"forkYDocPlugin\"] as any;\n\n    if (newOptions.uploadFile) {\n      const uploadFile = newOptions.uploadFile;\n      this.uploadFile = async (file, blockId) => {\n        this.onUploadStartCallbacks.forEach((callback) =>\n          callback.apply(this, [blockId]),\n        );\n        try {\n          return await uploadFile(file, blockId);\n        } finally {\n          this.onUploadEndCallbacks.forEach((callback) =>\n            callback.apply(this, [blockId]),\n          );\n        }\n      };\n    }\n\n    this.resolveFileUrl = newOptions.resolveFileUrl;\n    this.headless = newOptions._headless;\n\n    const collaborationEnabled =\n      \"ySyncPlugin\" in this.extensions ||\n      \"liveblocksExtension\" in this.extensions;\n\n    if (collaborationEnabled && newOptions.initialContent) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        \"When using Collaboration, initialContent might cause conflicts, because changes should come from the collaboration provider\",\n      );\n    }\n\n    const initialContent =\n      newOptions.initialContent ||\n      (collaborationEnabled\n        ? [\n            {\n              type: \"paragraph\",\n              id: \"initialBlockId\",\n            },\n          ]\n        : [\n            {\n              type: \"paragraph\",\n              id: UniqueID.options.generateID(),\n            },\n          ]);\n\n    if (!Array.isArray(initialContent) || initialContent.length === 0) {\n      throw new Error(\n        \"initialContent must be a non-empty array of blocks, received: \" +\n          initialContent,\n      );\n    }\n\n    const tiptapExtensions = [\n      ...Object.entries(this.extensions).map(([key, ext]) => {\n        if (\n          ext instanceof Extension ||\n          ext instanceof TipTapNode ||\n          ext instanceof Mark\n        ) {\n          // tiptap extension\n          return ext;\n        }\n\n        if (ext instanceof BlockNoteExtension && !ext.plugins.length) {\n          return undefined;\n        }\n\n        // \"blocknote\" extensions (prosemirror plugins)\n        return Extension.create({\n          name: key,\n          priority: ext.priority,\n          addProseMirrorPlugins: () => ext.plugins,\n        });\n      }),\n    ].filter((ext): ext is Extension => ext !== undefined);\n\n    const tiptapOptions: BlockNoteTipTapEditorOptions = {\n      ...blockNoteTipTapOptions,\n      ...newOptions._tiptapOptions,\n      content: initialContent,\n      extensions: tiptapExtensions,\n      editorProps: {\n        ...newOptions._tiptapOptions?.editorProps,\n        attributes: {\n          // As of TipTap v2.5.0 the tabIndex is removed when the editor is not\n          // editable, so you can't focus it. We want to revert this as we have\n          // UI behaviour that relies on it.\n          tabIndex: \"0\",\n          ...newOptions._tiptapOptions?.editorProps?.attributes,\n          ...newOptions.domAttributes?.editor,\n          class: mergeCSSClasses(\n            \"bn-editor\",\n            newOptions.defaultStyles ? \"bn-default-styles\" : \"\",\n            newOptions.domAttributes?.editor?.class || \"\",\n          ),\n        },\n        transformPasted,\n      },\n    };\n\n    if (!this.headless) {\n      this._tiptapEditor = BlockNoteTipTapEditor.create(\n        tiptapOptions,\n        this.schema.styleSchema,\n      ) as BlockNoteTipTapEditor & {\n        view: any;\n        contentComponent: any;\n      };\n      this.pmSchema = this._tiptapEditor.schema;\n    } else {\n      // In headless mode, we don't instantiate an underlying TipTap editor,\n      // but we still need the schema\n      this.pmSchema = getSchema(tiptapOptions.extensions!);\n    }\n    this.pmSchema.cached.blockNoteEditor = this;\n    this.emit(\"create\");\n  }\n\n  /**\n   * Stores the currently active transaction, which is the accumulated transaction from all {@link dispatch} calls during a {@link transact} calls\n   */\n  private activeTransaction: Transaction | null = null;\n\n  /**\n   * Execute a prosemirror command. This is mostly for backwards compatibility with older code.\n   *\n   * @note You should prefer the {@link transact} method when possible, as it will automatically handle the dispatching of the transaction and work across blocknote transactions.\n   *\n   * @example\n   * ```ts\n   * editor.exec((state, dispatch, view) => {\n   *   dispatch(state.tr.insertText(\"Hello, world!\"));\n   * });\n   * ```\n   */\n  public exec(command: Command) {\n    if (this.activeTransaction) {\n      throw new Error(\n        \"`exec` should not be called within a `transact` call, move the `exec` call outside of the `transact` call\",\n      );\n    }\n    const state = this._tiptapEditor.state;\n    const view = this._tiptapEditor.view;\n    const dispatch = (tr: Transaction) => this._tiptapEditor.dispatch(tr);\n\n    return command(state, dispatch, view);\n  }\n\n  /**\n   * Check if a command can be executed. A command should return `false` if it is not valid in the current state.\n   *\n   * @example\n   * ```ts\n   * if (editor.canExec(command)) {\n   *   // show button\n   * } else {\n   *   // hide button\n   * }\n   * ```\n   */\n  public canExec(command: Command): boolean {\n    if (this.activeTransaction) {\n      throw new Error(\n        \"`canExec` should not be called within a `transact` call, move the `canExec` call outside of the `transact` call\",\n      );\n    }\n    const state = this._tiptapEditor.state;\n    const view = this._tiptapEditor.view;\n\n    return command(state, undefined, view);\n  }\n\n  /**\n   * Execute a function within a \"blocknote transaction\".\n   * All changes to the editor within the transaction will be grouped together, so that\n   * we can dispatch them as a single operation (thus creating only a single undo step)\n   *\n   * @note There is no need to dispatch the transaction, as it will be automatically dispatched when the callback is complete.\n   *\n   * @example\n   * ```ts\n   * // All changes to the editor will be grouped together\n   * editor.transact((tr) => {\n   *   tr.insertText(\"Hello, world!\");\n   * // These two operations will be grouped together in a single undo step\n   *   editor.transact((tr) => {\n   *     tr.insertText(\"Hello, world!\");\n   *   });\n   * });\n   * ```\n   */\n  public transact<T>(\n    callback: (\n      /**\n       * The current active transaction, this will automatically be dispatched to the editor when the callback is complete\n       * If another `transact` call is made within the callback, it will be passed the same transaction as the parent call.\n       */\n      tr: Transaction,\n    ) => T,\n  ): T {\n    if (this.activeTransaction) {\n      // Already in a transaction, so we can just callback immediately\n      return callback(this.activeTransaction);\n    }\n\n    try {\n      // Enter transaction mode, by setting a starting transaction\n      this.activeTransaction = this._tiptapEditor.state.tr;\n\n      // Capture all dispatch'd transactions\n      const result = callback(this.activeTransaction);\n\n      // Any transactions captured by the `dispatch` call will be stored in `this.activeTransaction`\n      const activeTr = this.activeTransaction;\n\n      this.activeTransaction = null;\n      if (\n        activeTr &&\n        // Only dispatch if the transaction was actually modified in some way\n        (activeTr.docChanged ||\n          activeTr.selectionSet ||\n          activeTr.scrolledIntoView ||\n          activeTr.storedMarksSet ||\n          !activeTr.isGeneric)\n      ) {\n        // Dispatch the transaction if it was modified\n        this._tiptapEditor.dispatch(activeTr);\n      }\n\n      return result;\n    } finally {\n      // We wrap this in a finally block to ensure we don't disable future transactions just because of an error in the callback\n      this.activeTransaction = null;\n    }\n  }\n\n  // TO DISCUSS\n  /**\n   * Shorthand to get a typed extension from the editor, by\n   * just passing in the extension class.\n   *\n   * @param ext - The extension class to get\n   * @param key - optional, the key of the extension in the extensions object (defaults to the extension name)\n   * @returns The extension instance\n   */\n  public extension<T extends BlockNoteExtension>(\n    ext: { new (...args: any[]): T } & typeof BlockNoteExtension,\n    key = ext.key(),\n  ): T {\n    const extension = this.extensions[key] as T;\n    if (!extension) {\n      throw new Error(`Extension ${key} not found`);\n    }\n    return extension;\n  }\n\n  /**\n   * Mount the editor to a parent DOM element. Call mount(undefined) to clean up\n   *\n   * @warning Not needed to call manually when using React, use BlockNoteView to take care of mounting\n   */\n  public mount = (\n    parentElement?: HTMLElement | null,\n    contentComponent?: any,\n  ) => {\n    this._tiptapEditor.mount(this, parentElement, contentComponent);\n  };\n\n  /**\n   * Get the underlying prosemirror state\n   * @note Prefer using `editor.transact` to read the current editor state, as that will ensure the state is up to date\n   * @see https://prosemirror.net/docs/ref/#state.EditorState\n   */\n  public get prosemirrorState() {\n    if (this.activeTransaction) {\n      throw new Error(\n        \"`prosemirrorState` should not be called within a `transact` call, move the `prosemirrorState` call outside of the `transact` call or use `editor.transact` to read the current editor state\",\n      );\n    }\n    return this._tiptapEditor.state;\n  }\n\n  /**\n   * Get the underlying prosemirror view\n   * @see https://prosemirror.net/docs/ref/#view.EditorView\n   */\n  public get prosemirrorView() {\n    return this._tiptapEditor.view;\n  }\n\n  public get domElement() {\n    return this.prosemirrorView?.dom as HTMLDivElement | undefined;\n  }\n\n  public isFocused() {\n    return this.prosemirrorView?.hasFocus() || false;\n  }\n\n  public focus() {\n    this.prosemirrorView?.focus();\n  }\n\n  public onUploadStart(callback: (blockId?: string) => void) {\n    this.onUploadStartCallbacks.push(callback);\n\n    return () => {\n      const index = this.onUploadStartCallbacks.indexOf(callback);\n      if (index > -1) {\n        this.onUploadStartCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  public onUploadEnd(callback: (blockId?: string) => void) {\n    this.onUploadEndCallbacks.push(callback);\n\n    return () => {\n      const index = this.onUploadEndCallbacks.indexOf(callback);\n      if (index > -1) {\n        this.onUploadEndCallbacks.splice(index, 1);\n      }\n    };\n  }\n\n  /**\n   * @deprecated, use `editor.document` instead\n   */\n  public get topLevelBlocks(): Block<BSchema, ISchema, SSchema>[] {\n    return this.document;\n  }\n\n  /**\n   * Gets a snapshot of all top-level (non-nested) blocks in the editor.\n   * @returns A snapshot of all top-level (non-nested) blocks in the editor.\n   */\n  public get document(): Block<BSchema, ISchema, SSchema>[] {\n    return this.transact((tr) => {\n      return docToBlocks(tr.doc, this.pmSchema);\n    });\n  }\n\n  /**\n   * Gets a snapshot of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block that should be\n   * retrieved.\n   * @returns The block that matches the identifier, or `undefined` if no\n   * matching block was found.\n   */\n  public getBlock(\n    blockIdentifier: BlockIdentifier,\n  ): Block<BSchema, ISchema, SSchema> | undefined {\n    return this.transact((tr) => getBlock(tr.doc, blockIdentifier));\n  }\n\n  /**\n   * Gets a snapshot of the previous sibling of an existing block from the\n   * editor.\n   * @param blockIdentifier The identifier of an existing block for which the\n   * previous sibling should be retrieved.\n   * @returns The previous sibling of the block that matches the identifier.\n   * `undefined` if no matching block was found, or it's the first child/block\n   * in the document.\n   */\n  public getPrevBlock(\n    blockIdentifier: BlockIdentifier,\n  ): Block<BSchema, ISchema, SSchema> | undefined {\n    return this.transact((tr) => getPrevBlock(tr.doc, blockIdentifier));\n  }\n\n  /**\n   * Gets a snapshot of the next sibling of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block for which the\n   * next sibling should be retrieved.\n   * @returns The next sibling of the block that matches the identifier.\n   * `undefined` if no matching block was found, or it's the last child/block in\n   * the document.\n   */\n  public getNextBlock(\n    blockIdentifier: BlockIdentifier,\n  ): Block<BSchema, ISchema, SSchema> | undefined {\n    return this.transact((tr) => getNextBlock(tr.doc, blockIdentifier));\n  }\n\n  /**\n   * Gets a snapshot of the parent of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block for which the\n   * parent should be retrieved.\n   * @returns The parent of the block that matches the identifier. `undefined`\n   * if no matching block was found, or the block isn't nested.\n   */\n  public getParentBlock(\n    blockIdentifier: BlockIdentifier,\n  ): Block<BSchema, ISchema, SSchema> | undefined {\n    return this.transact((tr) => getParentBlock(tr.doc, blockIdentifier));\n  }\n\n  /**\n   * Traverses all blocks in the editor depth-first, and executes a callback for each.\n   * @param callback The callback to execute for each block. Returning `false` stops the traversal.\n   * @param reverse Whether the blocks should be traversed in reverse order.\n   */\n  public forEachBlock(\n    callback: (block: Block<BSchema, ISchema, SSchema>) => boolean,\n    reverse = false,\n  ): void {\n    const blocks = this.document.slice();\n\n    if (reverse) {\n      blocks.reverse();\n    }\n\n    function traverseBlockArray(\n      blockArray: Block<BSchema, ISchema, SSchema>[],\n    ): boolean {\n      for (const block of blockArray) {\n        if (callback(block) === false) {\n          return false;\n        }\n\n        const children = reverse\n          ? block.children.slice().reverse()\n          : block.children;\n\n        if (!traverseBlockArray(children)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    traverseBlockArray(blocks);\n  }\n\n  /**\n   * Executes a callback whenever the editor's contents change.\n   * @param callback The callback to execute.\n   *\n   * @deprecated use {@link BlockNoteEditor.onChange} instead\n   */\n  public onEditorContentChange(callback: () => void) {\n    this._tiptapEditor.on(\"update\", callback);\n  }\n\n  /**\n   * Executes a callback whenever the editor's selection changes.\n   * @param callback The callback to execute.\n   *\n   * @deprecated use `onSelectionChange` instead\n   */\n  public onEditorSelectionChange(callback: () => void) {\n    this._tiptapEditor.on(\"selectionUpdate\", callback);\n  }\n\n  /**\n   * Gets a snapshot of the current text cursor position.\n   * @returns A snapshot of the current text cursor position.\n   */\n  public getTextCursorPosition(): TextCursorPosition<\n    BSchema,\n    ISchema,\n    SSchema\n  > {\n    return this.transact((tr) => getTextCursorPosition(tr));\n  }\n\n  /**\n   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could\n   * not be found.\n   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.\n   * @param placement Whether the text cursor should be placed at the start or end of the block.\n   */\n  public setTextCursorPosition(\n    targetBlock: BlockIdentifier,\n    placement: \"start\" | \"end\" = \"start\",\n  ) {\n    return this.transact((tr) =>\n      setTextCursorPosition(tr, targetBlock, placement),\n    );\n  }\n\n  /**\n   * Gets a snapshot of the current selection. This contains all blocks (included nested blocks)\n   * that the selection spans across.\n   *\n   * If the selection starts / ends halfway through a block, the returned data will contain the entire block.\n   */\n  public getSelection(): Selection<BSchema, ISchema, SSchema> | undefined {\n    return this.transact((tr) => getSelection(tr));\n  }\n\n  /**\n   * Gets a snapshot of the current selection. This contains all blocks (included nested blocks)\n   * that the selection spans across.\n   *\n   * If the selection starts / ends halfway through a block, the returned block will be\n   * only the part of the block that is included in the selection.\n   */\n  public getSelectionCutBlocks() {\n    return this.transact((tr) => getSelectionCutBlocks(tr));\n  }\n\n  /**\n   * Sets the selection to a range of blocks.\n   * @param startBlock The identifier of the block that should be the start of the selection.\n   * @param endBlock The identifier of the block that should be the end of the selection.\n   */\n  public setSelection(startBlock: BlockIdentifier, endBlock: BlockIdentifier) {\n    return this.transact((tr) => setSelection(tr, startBlock, endBlock));\n  }\n\n  /**\n   * Checks if the editor is currently editable, or if it's locked.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  public get isEditable(): boolean {\n    if (!this._tiptapEditor) {\n      if (!this.headless) {\n        throw new Error(\"no editor, but also not headless?\");\n      }\n      return false;\n    }\n    return this._tiptapEditor.isEditable === undefined\n      ? true\n      : this._tiptapEditor.isEditable;\n  }\n\n  /**\n   * Makes the editor editable or locks it, depending on the argument passed.\n   * @param editable True to make the editor editable, or false to lock it.\n   */\n  public set isEditable(editable: boolean) {\n    if (!this._tiptapEditor) {\n      if (!this.headless) {\n        throw new Error(\"no editor, but also not headless?\");\n      }\n      // not relevant on headless\n      return;\n    }\n    if (this._tiptapEditor.options.editable !== editable) {\n      this._tiptapEditor.setEditable(editable);\n    }\n  }\n\n  /**\n   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an\n   * error if the reference block could not be found.\n   * @param blocksToInsert An array of partial blocks that should be inserted.\n   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.\n   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the\n   * `referenceBlock`.\n   */\n  public insertBlocks(\n    blocksToInsert: PartialBlock<BSchema, ISchema, SSchema>[],\n    referenceBlock: BlockIdentifier,\n    placement: \"before\" | \"after\" = \"before\",\n  ) {\n    return this.transact((tr) =>\n      insertBlocks(tr, blocksToInsert, referenceBlock, placement),\n    );\n  }\n\n  /**\n   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be\n   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could\n   * not be found.\n   * @param blockToUpdate The block that should be updated.\n   * @param update A partial block which defines how the existing block should be changed.\n   */\n  public updateBlock(\n    blockToUpdate: BlockIdentifier,\n    update: PartialBlock<BSchema, ISchema, SSchema>,\n  ) {\n    return this.transact((tr) => updateBlock(tr, blockToUpdate, update));\n  }\n\n  /**\n   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.\n   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.\n   */\n  public removeBlocks(blocksToRemove: BlockIdentifier[]) {\n    return this.transact(\n      (tr) => removeAndInsertBlocks(tr, blocksToRemove, []).removedBlocks,\n    );\n  }\n\n  /**\n   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or\n   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in\n   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.\n   * @param blocksToRemove An array of blocks that should be replaced.\n   * @param blocksToInsert An array of partial blocks to replace the old ones with.\n   */\n  public replaceBlocks(\n    blocksToRemove: BlockIdentifier[],\n    blocksToInsert: PartialBlock<BSchema, ISchema, SSchema>[],\n  ) {\n    return this.transact((tr) =>\n      removeAndInsertBlocks(tr, blocksToRemove, blocksToInsert),\n    );\n  }\n\n  /**\n   * Undo the last action.\n   */\n  public undo() {\n    if (this.options.collaboration) {\n      return this.exec(undoCommand);\n    }\n\n    return this.exec(undo);\n  }\n\n  /**\n   * Redo the last action.\n   */\n  public redo() {\n    if (this.options.collaboration) {\n      return this.exec(redoCommand);\n    }\n    return this.exec(redo);\n  }\n\n  /**\n   * Insert a piece of content at the current cursor position.\n   *\n   * @param content can be a string, or array of partial inline content elements\n   */\n  public insertInlineContent(\n    content: PartialInlineContent<ISchema, SSchema>,\n    { updateSelection = false }: { updateSelection?: boolean } = {},\n  ) {\n    const nodes = inlineContentToNodes(content, this.pmSchema);\n\n    this.transact((tr) => {\n      insertContentAt(\n        tr,\n        {\n          from: tr.selection.from,\n          to: tr.selection.to,\n        },\n        nodes,\n        {\n          updateSelection,\n        },\n      );\n    });\n  }\n\n  /**\n   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.\n   */\n  public getActiveStyles() {\n    return this.transact((tr) => {\n      const styles: Styles<SSchema> = {};\n      const marks = tr.selection.$to.marks();\n\n      for (const mark of marks) {\n        const config = this.schema.styleSchema[mark.type.name];\n        if (!config) {\n          if (\n            // Links are not considered styles in blocknote\n            mark.type.name !== \"link\" &&\n            // \"blocknoteIgnore\" tagged marks (such as comments) are also not considered BlockNote \"styles\"\n            !mark.type.spec.blocknoteIgnore\n          ) {\n            // eslint-disable-next-line no-console\n            console.warn(\"mark not found in styleschema\", mark.type.name);\n          }\n\n          continue;\n        }\n        if (config.propSchema === \"boolean\") {\n          (styles as any)[config.type] = true;\n        } else {\n          (styles as any)[config.type] = mark.attrs.stringValue;\n        }\n      }\n\n      return styles;\n    });\n  }\n\n  /**\n   * Adds styles to the currently selected content.\n   * @param styles The styles to add.\n   */\n  public addStyles(styles: Styles<SSchema>) {\n    for (const [style, value] of Object.entries(styles)) {\n      const config = this.schema.styleSchema[style];\n      if (!config) {\n        throw new Error(`style ${style} not found in styleSchema`);\n      }\n      if (config.propSchema === \"boolean\") {\n        this._tiptapEditor.commands.setMark(style);\n      } else if (config.propSchema === \"string\") {\n        this._tiptapEditor.commands.setMark(style, { stringValue: value });\n      } else {\n        throw new UnreachableCaseError(config.propSchema);\n      }\n    }\n  }\n\n  /**\n   * Removes styles from the currently selected content.\n   * @param styles The styles to remove.\n   */\n  public removeStyles(styles: Styles<SSchema>) {\n    for (const style of Object.keys(styles)) {\n      this._tiptapEditor.commands.unsetMark(style);\n    }\n  }\n\n  /**\n   * Toggles styles on the currently selected content.\n   * @param styles The styles to toggle.\n   */\n  public toggleStyles(styles: Styles<SSchema>) {\n    for (const [style, value] of Object.entries(styles)) {\n      const config = this.schema.styleSchema[style];\n      if (!config) {\n        throw new Error(`style ${style} not found in styleSchema`);\n      }\n      if (config.propSchema === \"boolean\") {\n        this._tiptapEditor.commands.toggleMark(style);\n      } else if (config.propSchema === \"string\") {\n        this._tiptapEditor.commands.toggleMark(style, { stringValue: value });\n      } else {\n        throw new UnreachableCaseError(config.propSchema);\n      }\n    }\n  }\n\n  /**\n   * Gets the currently selected text.\n   */\n  public getSelectedText() {\n    return this.transact((tr) => {\n      return tr.doc.textBetween(tr.selection.from, tr.selection.to);\n    });\n  }\n\n  /**\n   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.\n   */\n  public getSelectedLinkUrl() {\n    return this._tiptapEditor.getAttributes(\"link\").href as string | undefined;\n  }\n\n  /**\n   * Creates a new link to replace the selected content.\n   * @param url The link URL.\n   * @param text The text to display the link with.\n   */\n  public createLink(url: string, text?: string) {\n    if (url === \"\") {\n      return;\n    }\n    const mark = this.pmSchema.mark(\"link\", { href: url });\n    this.transact((tr) => {\n      const { from, to } = tr.selection;\n\n      if (text) {\n        tr.insertText(text, from, to).addMark(from, from + text.length, mark);\n      } else {\n        tr.setSelection(TextSelection.create(tr.doc, to)).addMark(\n          from,\n          to,\n          mark,\n        );\n      }\n    });\n  }\n\n  /**\n   * Checks if the block containing the text cursor can be nested.\n   */\n  public canNestBlock() {\n    return canNestBlock(this);\n  }\n\n  /**\n   * Nests the block containing the text cursor into the block above it.\n   */\n  public nestBlock() {\n    nestBlock(this);\n  }\n\n  /**\n   * Checks if the block containing the text cursor is nested.\n   */\n  public canUnnestBlock() {\n    return canUnnestBlock(this);\n  }\n\n  /**\n   * Lifts the block containing the text cursor out of its parent.\n   */\n  public unnestBlock() {\n    unnestBlock(this);\n  }\n\n  /**\n   * Moves the selected blocks up. If the previous block has children, moves\n   * them to the end of its children. If there is no previous block, but the\n   * current blocks share a common parent, moves them out of & before it.\n   */\n  public moveBlocksUp() {\n    return moveBlocksUp(this);\n  }\n\n  /**\n   * Moves the selected blocks down. If the next block has children, moves\n   * them to the start of its children. If there is no next block, but the\n   * current blocks share a common parent, moves them out of & after it.\n   */\n  public moveBlocksDown() {\n    return moveBlocksDown(this);\n  }\n\n  /**\n   * Exports blocks into a simplified HTML string. To better conform to HTML standards, children of blocks which aren't list\n   * items are un-nested in the output HTML.\n   *\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  public async blocksToHTMLLossy(\n    blocks: PartialBlock<BSchema, ISchema, SSchema>[] = this.document,\n  ): Promise<string> {\n    const exporter = createExternalHTMLExporter(this.pmSchema, this);\n    return exporter.exportBlocks(blocks, {});\n  }\n\n  /**\n   * Serializes blocks into an HTML string in the format that would normally be rendered by the editor.\n   *\n   * Use this method if you want to server-side render HTML (for example, a blog post that has been edited in BlockNote)\n   * and serve it to users without loading the editor on the client (i.e.: displaying the blog post)\n   *\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  public async blocksToFullHTML(\n    blocks: PartialBlock<BSchema, ISchema, SSchema>[],\n  ): Promise<string> {\n    const exporter = createInternalHTMLSerializer(this.pmSchema, this);\n    return exporter.serializeBlocks(blocks, {});\n  }\n  /**\n   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and\n   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote\n   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.\n   * @param html The HTML string to parse blocks from.\n   * @returns The blocks parsed from the HTML string.\n   */\n  public async tryParseHTMLToBlocks(\n    html: string,\n  ): Promise<Block<BSchema, ISchema, SSchema>[]> {\n    return HTMLToBlocks(html, this.pmSchema);\n  }\n\n  /**\n   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of\n   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.\n   * @param blocks An array of blocks that should be serialized into Markdown.\n   * @returns The blocks, serialized as a Markdown string.\n   */\n  public async blocksToMarkdownLossy(\n    blocks: PartialBlock<BSchema, ISchema, SSchema>[] = this.document,\n  ): Promise<string> {\n    return blocksToMarkdown(blocks, this.pmSchema, this, {});\n  }\n\n  /**\n   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on\n   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it\n   * as text.\n   * @param markdown The Markdown string to parse blocks from.\n   * @returns The blocks parsed from the Markdown string.\n   */\n  public async tryParseMarkdownToBlocks(\n    markdown: string,\n  ): Promise<Block<BSchema, ISchema, SSchema>[]> {\n    return markdownToBlocks(markdown, this.pmSchema);\n  }\n\n  /**\n   * Updates the user info for the current user that's shown to other collaborators.\n   */\n  public updateCollaborationUserInfo(user: { name: string; color: string }) {\n    if (!this.options.collaboration) {\n      throw new Error(\n        \"Cannot update collaboration user info when collaboration is disabled.\",\n      );\n    }\n\n    (this.extensions[\"yCursorPlugin\"] as CursorPlugin).updateUser(user);\n  }\n\n  /**\n   * Registers a callback which will be called before any change is applied to the editor, allowing you to cancel the change.\n   */\n  public onBeforeChange(\n    /**\n     * If the callback returns `false`, the change will be canceled & not applied to the editor.\n     */\n    callback: (\n      editor: BlockNoteEditor<BSchema, ISchema, SSchema>,\n      context: {\n        getChanges: () => BlocksChanged<BSchema, ISchema, SSchema>;\n        tr: Transaction;\n      },\n    ) => boolean | void,\n  ): () => void {\n    if (this.headless) {\n      return () => {\n        // noop\n      };\n    }\n\n    return (this.extensions[\"blockChange\"] as BlockChangePlugin).subscribe(\n      (context) => callback(this, context),\n    );\n  }\n\n  /**\n   * A callback function that runs whenever the editor's contents change.\n   *\n   * @param callback The callback to execute.\n   * @returns A function to remove the callback.\n   */\n  public onChange(\n    callback: (\n      editor: BlockNoteEditor<BSchema, ISchema, SSchema>,\n      context: {\n        /**\n         * Returns the blocks that were inserted, updated, or deleted by the change that occurred.\n         */\n        getChanges(): BlocksChanged<BSchema, ISchema, SSchema>;\n      },\n    ) => void,\n  ) {\n    if (this.headless) {\n      // Note: would be nice if this is possible in headless mode as well\n      return;\n    }\n\n    const cb = ({\n      transaction,\n      appendedTransactions,\n    }: {\n      transaction: Transaction;\n      appendedTransactions: Transaction[];\n    }) => {\n      callback(this, {\n        getChanges: () =>\n          getBlocksChangedByTransaction(transaction, appendedTransactions),\n      });\n    };\n\n    this._tiptapEditor.on(\"v3-update\", cb);\n\n    return () => {\n      this._tiptapEditor.off(\"v3-update\", cb);\n    };\n  }\n\n  /**\n   * A callback function that runs whenever the text cursor position or selection changes.\n   *\n   * @param callback The callback to execute.\n   * @returns A function to remove the callback.\n   */\n  public onSelectionChange(\n    callback: (editor: BlockNoteEditor<BSchema, ISchema, SSchema>) => void,\n    includeSelectionChangedByRemote?: boolean,\n  ) {\n    if (this.headless) {\n      return;\n    }\n\n    const cb = (e: { transaction: Transaction }) => {\n      if (\n        e.transaction.getMeta(ySyncPluginKey) &&\n        !includeSelectionChangedByRemote\n      ) {\n        // selection changed because of a yjs sync (i.e.: other user was typing)\n        // we don't want to trigger the callback in this case\n        return;\n      }\n      callback(this);\n    };\n\n    this._tiptapEditor.on(\"selectionUpdate\", cb);\n\n    return () => {\n      this._tiptapEditor.off(\"selectionUpdate\", cb);\n    };\n  }\n\n  /**\n   * A callback function that runs when the editor has been initialized.\n   *\n   * This can be useful for plugins to initialize themselves after the editor has been initialized.\n   */\n  public onCreate(callback: () => void) {\n    this.on(\"create\", callback);\n\n    return () => {\n      this.off(\"create\", callback);\n    };\n  }\n\n  public getSelectionBoundingBox() {\n    if (!this.prosemirrorView) {\n      return undefined;\n    }\n\n    const { selection } = this.prosemirrorState;\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    if (isNodeSelection(selection)) {\n      const node = this.prosemirrorView.nodeDOM(from) as HTMLElement;\n      if (node) {\n        return node.getBoundingClientRect();\n      }\n    }\n\n    return posToDOMRect(this.prosemirrorView, from, to);\n  }\n\n  public get isEmpty() {\n    const doc = this.document;\n    // Note: only works for paragraphs as default blocks (but for now this is default in blocknote)\n    // checking prosemirror directly might be faster\n    return (\n      doc.length === 0 ||\n      (doc.length === 1 &&\n        doc[0].type === \"paragraph\" &&\n        (doc[0].content as any).length === 0)\n    );\n  }\n\n  public openSuggestionMenu(\n    triggerCharacter: string,\n    pluginState?: {\n      deleteTriggerCharacter?: boolean;\n      ignoreQueryLength?: boolean;\n    },\n  ) {\n    if (!this.prosemirrorView) {\n      return;\n    }\n\n    this.focus();\n    this.transact((tr) => {\n      if (pluginState?.deleteTriggerCharacter) {\n        tr.insertText(triggerCharacter);\n      }\n      tr.scrollIntoView().setMeta(this.suggestionMenus.plugins[0], {\n        triggerCharacter: triggerCharacter,\n        deleteTriggerCharacter: pluginState?.deleteTriggerCharacter || false,\n        ignoreQueryLength: pluginState?.ignoreQueryLength || false,\n      });\n    });\n  }\n\n  // `forceSelectionVisible` determines whether the editor selection is shows\n  // even when the editor is not focused. This is useful for e.g. creating new\n  // links, so the user still sees the affected content when an input field is\n  // focused.\n  // TODO: Reconsider naming?\n  public getForceSelectionVisible() {\n    return this.showSelectionPlugin.getEnabled();\n  }\n\n  public setForceSelectionVisible(forceSelectionVisible: boolean) {\n    this.showSelectionPlugin.setEnabled(forceSelectionVisible);\n  }\n\n  /**\n   * This will convert HTML into a format that is compatible with BlockNote.\n   */\n  private convertHtmlToBlockNoteHtml(html: string) {\n    const htmlNode = nestedListsToBlockNoteStructure(html.trim());\n    return htmlNode.innerHTML;\n  }\n\n  /**\n   * Paste HTML into the editor. Defaults to converting HTML to BlockNote HTML.\n   * @param html The HTML to paste.\n   * @param raw Whether to paste the HTML as is, or to convert it to BlockNote HTML.\n   */\n  public pasteHTML(html: string, raw = false) {\n    let htmlToPaste = html;\n    if (!raw) {\n      htmlToPaste = this.convertHtmlToBlockNoteHtml(html);\n    }\n    if (!htmlToPaste) {\n      return;\n    }\n    this.prosemirrorView?.pasteHTML(htmlToPaste);\n  }\n\n  /**\n   * Paste text into the editor. Defaults to interpreting text as markdown.\n   * @param text The text to paste.\n   */\n  public pasteText(text: string) {\n    return this.prosemirrorView?.pasteText(text);\n  }\n\n  /**\n   * Paste markdown into the editor.\n   * @param markdown The markdown to paste.\n   */\n  public async pasteMarkdown(markdown: string) {\n    return this.pasteHTML(await markdownToHTML(markdown));\n  }\n}\n","export const COLORS_DEFAULT = {\n  gray: {\n    text: \"#9b9a97\",\n    background: \"#ebeced\",\n  },\n  brown: {\n    text: \"#64473a\",\n    background: \"#e9e5e3\",\n  },\n  red: {\n    text: \"#e03e3e\",\n    background: \"#fbe4e4\",\n  },\n  orange: {\n    text: \"#d9730d\",\n    background: \"#f6e9d9\",\n  },\n  yellow: {\n    text: \"#dfab01\",\n    background: \"#fbf3db\",\n  },\n  green: {\n    text: \"#4d6461\",\n    background: \"#ddedea\",\n  },\n  blue: {\n    text: \"#0b6e99\",\n    background: \"#ddebf1\",\n  },\n  purple: {\n    text: \"#6940a5\",\n    background: \"#eae4f2\",\n  },\n  pink: {\n    text: \"#ad1a72\",\n    background: \"#f4dfeb\",\n  },\n};\n\nexport const COLORS_DARK_MODE_DEFAULT = {\n  gray: {\n    text: \"#bebdb8\",\n    background: \"#9b9a97\",\n  },\n  brown: {\n    text: \"#8e6552\",\n    background: \"#64473a\",\n  },\n  red: {\n    text: \"#ec4040\",\n    background: \"#be3434\",\n  },\n  orange: {\n    text: \"#e3790d\",\n    background: \"#b7600a\",\n  },\n  yellow: {\n    text: \"#dfab01\",\n    background: \"#b58b00\",\n  },\n  green: {\n    text: \"#6b8b87\",\n    background: \"#4d6461\",\n  },\n  blue: {\n    text: \"#0e87bc\",\n    background: \"#0b6e99\",\n  },\n  purple: {\n    text: \"#8552d7\",\n    background: \"#6940a5\",\n  },\n  pink: {\n    text: \"#da208f\",\n    background: \"#ad1a72\",\n  },\n};\n","import { BlockNoteSchema } from \"../editor/BlockNoteSchema.js\";\nimport { COLORS_DEFAULT } from \"../editor/defaultColors.js\";\nimport {\n  BlockFromConfig,\n  BlockSchema,\n  InlineContent,\n  InlineContentSchema,\n  StyleSchema,\n  StyledText,\n  Styles,\n} from \"../schema/index.js\";\n\nimport type {\n  BlockMapping,\n  InlineContentMapping,\n  StyleMapping,\n} from \"./mapping.js\";\n\nexport type ExporterOptions = {\n  /**\n   * A function that can be used to resolve files, images, etc.\n   * Exporters might need the binary contents of files like images,\n   * which might not always be available from the same origin as the main page.\n   * You can use this option to proxy requests through a server you control\n   * to avoid cross-origin (CORS) issues.\n   *\n   * @default uses a BlockNote hosted proxy (https://corsproxy.api.blocknotejs.org/)\n   * @param url - The URL of the file to resolve\n   * @returns A Promise that resolves to a string (the URL to use instead of the original)\n   * or a Blob (you can return the Blob directly if you have already fetched it)\n   */\n  resolveFileUrl?: (url: string) => Promise<string | Blob>;\n  /**\n   * Colors to use for background of blocks, font colors, and highlight colors\n   */\n  colors: typeof COLORS_DEFAULT;\n};\nexport abstract class Exporter<\n  B extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n  RB,\n  RI,\n  RS,\n  TS,\n> {\n  public constructor(\n    _schema: BlockNoteSchema<B, I, S>, // only used for type inference\n    protected readonly mappings: {\n      blockMapping: BlockMapping<B, I, S, RB, RI>;\n      inlineContentMapping: InlineContentMapping<I, S, RI, TS>;\n      styleMapping: StyleMapping<S, RS>;\n    },\n    public readonly options: ExporterOptions,\n  ) {}\n\n  public async resolveFile(url: string) {\n    if (!this.options?.resolveFileUrl) {\n      return (await fetch(url)).blob();\n    }\n    const ret = await this.options.resolveFileUrl(url);\n    if (ret instanceof Blob) {\n      return ret;\n    }\n    return (await fetch(ret)).blob();\n  }\n\n  public mapStyles(styles: Styles<S>) {\n    const stylesArray = Object.entries(styles).map(([key, value]) => {\n      const mappedStyle = this.mappings.styleMapping[key](value, this);\n      return mappedStyle;\n    });\n    return stylesArray;\n  }\n\n  public mapInlineContent(inlineContent: InlineContent<I, S>) {\n    return this.mappings.inlineContentMapping[inlineContent.type](\n      inlineContent,\n      this,\n    );\n  }\n\n  public transformInlineContent(inlineContentArray: InlineContent<I, S>[]) {\n    return inlineContentArray.map((ic) => this.mapInlineContent(ic));\n  }\n\n  public abstract transformStyledText(styledText: StyledText<S>): TS;\n\n  public async mapBlock(\n    block: BlockFromConfig<B[keyof B], I, S>,\n    nestingLevel: number,\n    numberedListIndex: number,\n    children?: Array<Awaited<RB>>,\n  ) {\n    return this.mappings.blockMapping[block.type](\n      block,\n      this,\n      nestingLevel,\n      numberedListIndex,\n      children,\n    );\n  }\n}\n","import { BlockNoteSchema } from \"../editor/BlockNoteSchema.js\";\nimport {\n  BlockFromConfigNoChildren,\n  BlockSchema,\n  InlineContentFromConfig,\n  InlineContentSchema,\n  StyleSchema,\n  Styles,\n} from \"../schema/index.js\";\nimport type { Exporter } from \"./Exporter.js\";\n\n/**\n * Defines a mapping from all block types with a schema to a result type `R`.\n */\nexport type BlockMapping<\n  B extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n  RB,\n  RI,\n> = {\n  [K in keyof B]: (\n    block: BlockFromConfigNoChildren<B[K], I, S>,\n    // we don't know the exact types that are supported by the exporter at this point,\n    // because the mapping only knows about converting certain types (which might be a subset of the supported types)\n    // this is why there are many `any` types here (same for types below)\n    exporter: Exporter<any, any, any, RB, RI, any, any>,\n    nestingLevel: number,\n    numberedListIndex?: number,\n    children?: Array<Awaited<RB>>,\n  ) => RB | Promise<RB>;\n};\n\n/**\n * Defines a mapping from all inline content types with a schema to a result type R.\n */\nexport type InlineContentMapping<\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n  RI,\n  TS,\n> = {\n  [K in keyof I]: (\n    inlineContent: InlineContentFromConfig<I[K], S>,\n    exporter: Exporter<any, I, S, any, RI, any, TS>,\n  ) => RI;\n};\n\n/**\n * Defines a mapping from all style types with a schema to a result type R.\n */\nexport type StyleMapping<S extends StyleSchema, RS> = {\n  [K in keyof S]: (\n    style: Styles<S>[K],\n    exporter: Exporter<any, any, any, any, any, RS, any>,\n  ) => RS;\n};\n\n/**\n * The mapping factory is a utility function to easily create mappings for\n * a BlockNoteSchema. Using the factory makes it easier to get typescript code completion etc.\n */\nexport function mappingFactory<\n  B extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(_schema: BlockNoteSchema<B, I, S>) {\n  return {\n    createBlockMapping: <R, RI>(mapping: BlockMapping<B, I, S, R, RI>) =>\n      mapping,\n    createInlineContentMapping: <R, RS>(\n      mapping: InlineContentMapping<I, S, R, RS>,\n    ) => mapping,\n    createStyleMapping: <R>(mapping: StyleMapping<S, R>) => mapping,\n  };\n}\n","import type { Emoji, EmojiMartData } from \"@emoji-mart/data\";\n\nimport { checkDefaultInlineContentTypeInSchema } from \"../../blocks/defaultBlockTypeGuards.js\";\nimport { BlockNoteEditor } from \"../../editor/BlockNoteEditor.js\";\nimport {\n  BlockSchema,\n  InlineContentSchema,\n  StyleSchema,\n} from \"../../schema/index.js\";\nimport { DefaultGridSuggestionItem } from \"./DefaultGridSuggestionItem.js\";\n\n// Temporary fix for https://github.com/missive/emoji-mart/pull/929\nlet emojiLoadingPromise:\n  | Promise<{\n      emojiMart: typeof import(\"emoji-mart\");\n      emojiData: EmojiMartData;\n    }>\n  | undefined;\n\nasync function loadEmojiMart() {\n  if (emojiLoadingPromise) {\n    return emojiLoadingPromise;\n  }\n\n  emojiLoadingPromise = (async () => {\n    // load dynamically because emoji-mart doesn't specify type: module and breaks in nodejs\n    const [emojiMartModule, emojiDataModule] = await Promise.all([\n      import(\"emoji-mart\"),\n      // use a dynamic import to encourage bundle-splitting\n      // and a smaller initial client bundle size\n      import(\"@emoji-mart/data\"),\n    ]);\n\n    const emojiMart =\n      \"default\" in emojiMartModule ? emojiMartModule.default : emojiMartModule;\n    const emojiData =\n      \"default\" in emojiDataModule\n        ? (emojiDataModule.default as EmojiMartData)\n        : (emojiDataModule as EmojiMartData);\n\n    await emojiMart.init({ data: emojiData });\n\n    return { emojiMart, emojiData };\n  })();\n\n  return emojiLoadingPromise;\n}\n\nexport async function getDefaultEmojiPickerItems<\n  BSchema extends BlockSchema,\n  I extends InlineContentSchema,\n  S extends StyleSchema,\n>(\n  editor: BlockNoteEditor<BSchema, I, S>,\n  query: string,\n): Promise<DefaultGridSuggestionItem[]> {\n  if (!checkDefaultInlineContentTypeInSchema(\"text\", editor)) {\n    return [];\n  }\n\n  const { emojiData, emojiMart } = await loadEmojiMart();\n\n  const emojisToShow =\n    query.trim() === \"\"\n      ? Object.values(emojiData.emojis)\n      : ((await emojiMart!.SearchIndex.search(query)) as Emoji[]);\n\n  return emojisToShow.map((emoji) => ({\n    id: emoji.skins[0].native,\n    onItemClick: () => editor.insertInlineContent(emoji.skins[0].native + \" \"),\n  }));\n}\n","/**\n * Combines items by group. This can be used to combine multiple slash menu item arrays,\n * while making sure that items from the same group are adjacent to each other.\n */\nexport function combineByGroup<T extends { group?: string }>(\n  items: T[],\n  ...additionalItemsArray: {\n    group?: string;\n  }[][]\n) {\n  const combinedItems = [...items];\n  for (const additionalItems of additionalItemsArray) {\n    for (const additionalItem of additionalItems) {\n      const lastItemWithSameGroup = combinedItems.findLastIndex(\n        (item) => item.group === additionalItem.group,\n      );\n      if (lastItemWithSameGroup === -1) {\n        combinedItems.push(additionalItem as T);\n      } else {\n        combinedItems.splice(lastItemWithSameGroup + 1, 0, additionalItem as T);\n      }\n    }\n  }\n  return combinedItems;\n}\n"],"names":["removeDuplicates","array","by","seen","item","key","findDuplicates","items","filtered","el","index","UniqueID","Extension","testOptions","v4","element","attributes","defaultIdAttributes","dragSourceElement","transformPasted","Plugin","PluginKey","transactions","oldState","newState","docChanges","transaction","filterTransactions","tr","_a","_b","types","attributeName","generateID","transform","combineTransactionSteps","mapping","getChangedRanges","newRange","newNodes","findChildrenInRange","node","newIds","id","duplicatedNewIds","pos","initialDoc","jsonNode","deleted","view","handleDragstart","event","slice","removeId","fragment","list","nodeWithoutId","Fragment","Slice","isLinkInlineContent","content","isPartialLinkInlineContent","isStyledTextInlineContent","mapTableCell","isTableCell","isPartialTableCell","_c","_d","_e","getColspan","cell","getRowspan","UnreachableCaseError","val","assertEmpty","obj","throwError","dataTest","rest","isAppleOS","formatKeyboardShortcut","shortcut","ctrlText","mergeCSSClasses","classes","c","isSafari","createDefaultBlockDOMOutputSpec","blockName","htmlTag","blockContentHTMLAttributes","inlineContentHTMLAttributes","blockContent","attribute","value","inlineContent","defaultBlockToHTML","block","editor","blockToNode","toDOM","renderSpec","mergeParagraphs","paragraphs","firstParagraph","i","paragraph","defaultProps","inheritedProps","camelToDataKebab","str","filenameFromURL","url","parts","propsToAttributes","propSchema","tiptapAttributes","name","_spec","spec","asNumber","getBlockFromPos","getPos","tipTapEditor","type","blockIdentifier","wrapInBlockStructure","blockType","blockProps","isFileBlock","domAttributes","attr","prop","defaultValue","createStronglyTypedTiptapNode","config","Node","createInternalBlockSpec","implementation","createBlockSpecFromStronglyTypedTiptapNode","requiredExtensions","getBlockSchemaFromSpecs","specs","applyNonSelectableBlockFix","nodeView","getParseRules","customParseFunction","rules","props","createBlockSpec","blockConfig","blockImplementation","HTMLAttributes","div","blockContentDOMAttributes","output","getNearestBlockPos","doc","$pos","depth","allBlockContainerPositions","resolvedPos","position","getBlockInfoWithManualOffset","bnBlockBeforePosOffset","bnBlockNode","bnBlockBeforePos","bnBlockAfterPos","bnBlock","blockGroup","offset","blockContentNode","blockContentBeforePos","blockContentAfterPos","blockGroupNode","blockGroupBeforePos","blockGroupAfterPos","getBlockInfo","posInfo","getBlockInfoFromResolvedPos","getBlockInfoFromSelection","state","getBlockInfoFromTransaction","getPmSchema","trOrNode","getBlockNoteEditor","schema","getBlockNoteSchema","getBlockSchema","getInlineContentSchema","getStyleSchema","getBlockCache","contentNodeToTableContent","contentNode","inlineContentSchema","styleSchema","ret","headerMatrix","rowNode","_offset","rowIndex","row","cellNode","colWidth","cellIndex","child","contentNodeToInlineContent","acc","contentPartial","last","first","isHeader","currentContent","nodeToCustomInlineContent","styles","linkMark","mark","icConfig","nodeToBlock","blockSchema","blockCache","cachedBlock","blockInfo","blockSpec","children","docToBlocks","blocks","prosemirrorSliceToSlicedBlocks","processNode","openStart","openEnd","blockCutAtStart","blockCutAtEnd","blockContainer","isFirstBlock","isLastBlock","childGroup","childBlocks","addInlineContentAttributes","inlineContentType","inlineContentProps","addInlineContentKeyboardShortcuts","createInternalInlineContentSpec","createInlineContentSpecFromTipTapNode","getInlineContentSchemaFromSpecs","getInlineContentParseRules","htmlElement","createInlineContentSpec","inlineContentConfig","inlineContentImplementation","update","inlineContentToNodes","stylePropsToAttributes","addStyleAttributes","styleType","styleValue","createInternalStyleSpec","createStyleSpecFromTipTapMark","getStyleSchemaFromSpecs","getStyleParseRules","createStyleSpec","styleConfig","styleImplementation","Mark","renderResult","getTableCellOccupancyGrid","height","width","getDimensionsOfTable","grid","findNextAvailable","col","j","rowspan","colspan","startRow","startCol","getTableRowsFromOccupancyGrid","occupancyGrid","getAbsoluteTableCells","relativeCellIndices","r","rowWidth","getRelativeTableCells","absoluteCellIndices","occupancyCell","getCellsAtRowHandle","relativeRowIndex","absoluteRow","cells","_v","a","getCellsAtColumnHandle","relativeColumnIndex","absoluteCol","moveColumn","fromColIndex","toColIndex","absoluteSourceCol","absoluteTargetCol","sourceCell","moveRow","fromRowIndex","toRowIndex","absoluteSourceRow","absoluteTargetRow","sourceRow","isCellEmpty","s","cropEmptyRowsOrColumns","removeEmpty","emptyColsOnRight","cellsToRemove","emptyRowsOnBottom","rowsToRemove","addRowsOrColumns","addType","numToAdd","newRow","_","colIndex","canRowBeDraggedInto","draggingIndex","targetRowIndex","targetCells","endRowIndex","startRowIndex","canColumnBeDraggedInto","targetColumnIndex","endColumnIndex","startColumnIndex","areInSameColumn","from","to","anchorAbsoluteCellIndices","headAbsoluteCellIndices","styledTextToNodes","styledText","marks","style","text","linkToNodes","link","styledTextArrayToNodes","nodes","blockOrInlineContentToContentNode","tableContentToNodes","tableContent","rowNodes","headerRows","headerCols","columnWidths","columnNodes","isHeaderRow","isHeaderCol","attrs","absoluteCellIndex","colwidth","groupNode","getParentBlockId","parent","isNodeBlock","getNodeById","targetNode","posBeforeNode","areBlocksDifferentExcludingChildren","block1","block2","determineChangeSource","collectAllBlocks","pmSchema","parentId","getBlocksChangedByTransaction","appendedTransactions","source","combinedTransaction","prevBlocks","nextBlocks","changes","prev","next","insertBlocks","blocksToInsert","referenceBlock","placement","nodesToInsert","ReplaceStep","removeAndInsertBlocks","blocksToRemove","idsOfBlocksToRemove","removedBlocks","idOfFirstBlock","removedSize","oldDocSize","newDocSize","notFoundIds","updateBlockCommand","posBeforeBlock","dispatch","updateBlockTr","replaceFromPos","replaceToPos","oldNodeType","newNodeType","newBnBlockNodeType","replaceFromOffset","replaceToOffset","updateChildren","updateBlockContentNode","existingBlock","start","end","contentDepth","startDepth","endDepth","childNodes","updateBlock","blockToUpdate","blockContainerNode","addAttributesAndRemoveClasses","className","serializeInlineContentExternalHTML","serializer","options","dom","serializeBlock","orderedListItemBlockTypes","unorderedListItemBlockTypes","BC_NODE","bc","elementFragment","blockContentDataAttributes","ic","listType","li","childFragment","serializeBlocksToFragment","_f","_g","_h","serializeBlocksExternalHTML","createExternalHTMLExporter","DOMSerializer","html","domFragment","serializeInlineContentInternalHTML","listIndex","serializeBlocks","serializeBlocksInternalHTML","blockDOM","BG_NODE","bg","createInternalHTMLSerializer","parseFigureElement","figureElement","targetTag","targetElement","captionElement","caption","createAddFileButton","buttonText","buttonIcon","addFileButton","addFileButtonIcon","addFileButtonText","addFileButtonMouseDownHandler","addFileButtonClickHandler","FILE_ICON_SVG","createFileNameWithIcon","file","icon","fileName","createFileBlockWrapper","wrapper","destroyUploadStartHandler","blockId","loading","fileNameWithIcon","createFigureWithCaption","figure","createLinkWithCaption","fileCaption","parseAudioElement","audioElement","FILE_AUDIO_ICON_SVG","audioPropSchema","audioBlockConfig","audioRender","audio","downloadUrl","audioParse","parsedFigure","audioToExternalHTML","AudioBlock","shikiParserSymbol","shikiHighlighterPromiseSymbol","defaultCodeBlockPropSchema","CodeBlockContent","inputElement","language","dataLanguage","languages","getLanguageId","pre","contentDOM","select","selectWrapper","handleLanguageChange","option","newNode","globalThisForShiki","highlighter","parser","hasWarned","lazyParser","parserOptions","createdHighlighter","createParser","createHighlightPlugin","InputRule","range","match","$start","languageName","TextSelection","selection","$from","isTextSelection","isAtEnd","endsWithDoubleNewline","CodeBlock","aliases","BackgroundColorMark","BackgroundColor","TextColorMark","TextColor","parseEmbedElement","embedElement","filePropSchema","fileBlockConfig","fileRender","fileParse","fileToExternalHTML","fileSrcLink","FileBlock","defaultToggledState","isToggled","createToggleWrapper","renderedElement","toggledState","toggleWrapper","toggleButton","toggleButtonMouseDown","toggleButtonOnClick","toggleAddBlockButton","toggleAddBlockButtonMouseDown","toggleAddBlockButtonOnClick","updatedBlock","childCount","onEditorChange","newChildCount","mutation","HEADING_LEVELS","headingPropSchema","HeadingBlockContent","level","chain","Heading","createResizableFileBlockWrapper","resizeHandlesContainerElement","destroy","leftResizeHandle","rightResizeHandle","resizeParams","windowMouseMoveHandler","newWidth","windowMouseUpHandler","wrapperMouseEnterHandler","wrapperMouseLeaveHandler","leftResizeHandleMouseDownHandler","rightResizeHandleMouseDownHandler","parseImageElement","imageElement","previewWidth","FILE_IMAGE_ICON_SVG","imagePropSchema","imageBlockConfig","imageRender","imageWrapper","image","imageParse","imageToExternalHTML","ImageBlock","splitBlockCommand","posInBlock","keepType","keepProps","nearestBlockContainerPos","info","handleEnter","selectionEmpty","commands","toggleListItemPropSchema","ToggleListItemBlockContent","ToggleListItem","getListItemContent","_node","DOMParser","clonedNodeDiv","listItemsFirstChild","listItemNode","remainingListItemChildren","listItemsChildren","bulletListItemPropSchema","BulletListItemBlockContent","BulletListItem","checkListItemPropSchema","checkListItemBlockContent","checkbox","checkboxWrapper","changeHandler","beforeBlockContainerPos","label","CheckListItem","PLUGIN_KEY","NumberedListIndexingPlugin","_transactions","_oldState","modified","newIndex","prevBlock","prevBlockInfo","prevBlockIndex","isFirst","numberedListItemPropSchema","NumberedListItemBlockContent","startIndex","NumberedListItem","paragraphPropSchema","ParagraphBlockContent","Paragraph","quotePropSchema","QuoteBlockContent","clone","Quote","RESIZE_MIN_WIDTH","EMPTY_CELL_WIDTH","EMPTY_CELL_HEIGHT","TableExtension","columnResizing","tableEditing","selectionIsEmpty","selectionIsAtStartOfNode","selectionIsInTableParagraphNode","goToNextCell","extension","context","callOrReturn","getExtensionField","tablePropSchema","TableBlockContent","BlockNoteTableView","TableView","cellMinWidth","tableWrapper","tableWrapperInner","floatingContainer","record","TableParagraph","TableRow","mergeAttributes","parseTableContent","parsedContent","extractedContent","Table","TableHeader","TableCell","parseVideoElement","videoElement","FILE_VIDEO_ICON_SVG","videoPropSchema","videoBlockConfig","videoRender","videoWrapper","video","videoParse","videoToExternalHTML","VideoBlock","defaultBlockSpecs","defaultBlockSchema","defaultStyleSpecs","Bold","Italic","Underline","Strike","Code","defaultStyleSchema","defaultInlineContentSpecs","defaultInlineContentSchema","checkDefaultBlockTypeInSchema","checkBlockTypeInSchema","checkDefaultInlineContentTypeInSchema","checkInlineContentTypeInSchema","checkBlockIsDefaultType","checkBlockIsFileBlock","checkBlockIsFileBlockWithPreview","checkBlockIsFileBlockWithPlaceholder","checkBlockTypeHasDefaultProp","checkBlockHasDefaultProp","isTableCellSelection","CellSelection","uploadToTmpFilesDotOrg_DEV_ONLY","body","setSelectionToNextContentEditableBlock","contentType","insertOrUpdateBlock","currentBlock","newBlock","getDefaultSlashMenuItems","insertedBlock","filterSuggestionItems","query","title","alias","removeUndefined","BlockNoteSchema","opts","__publicField","pageBreakConfig","pageBreakRender","pageBreak","pageBreakParse","pageBreakToExternalHTML","PageBreak","pageBreakSchema","withPageBreak","checkPageBreakBlocksInSchema","getPageBreakSlashMenuItems","getBlockSelectionData","anchorBlockPosInfo","NodeSelection","headBlockPosInfo","updateBlockSelectionFromData","data","anchorBlockPos","headBlockPos","flattenColumns","column","moveSelectedBlocksAndSelection","selectionData","checkPlacementIsValid","parentBlock","getMoveUpPlacement","referenceBlockParent","getMoveDownPlacement","nextBlock","moveBlocksUp","moveUpPlacement","moveBlocksDown","moveDownPlacement","sinkListItem","itemType","groupType","$to","nodeBefore","nestedBefore","inner","before","after","ReplaceAroundStep","nestBlock","unnestBlock","canNestBlock","canUnnestBlock","getBlock","getPrevBlock","nodeToConvert","getNextBlock","getParentBlock","$posBeforeNode","parentNode","grandparentNode","insertContentAt","isOnlyTextContent","isOnlyBlockContent","selectionToInsertionEnd","getSelection","$startBlockBeforePos","$endBlockBeforePos","indexToBlock","sharedDepth","endIndex","startIndexAtDepth","childCountAtDepth","setSelection","startBlock","endBlock","startBlockId","endBlockId","anchorPosInfo","headPosInfo","anchorBlockInfo","headBlockInfo","anchorBlockConfig","headBlockConfig","startPos","endPos","tableMap","TableMap","lastCellPos","lastCellNodeSize","getSelectionCutBlocks","selectionInfo","getTextCursorPosition","prevNode","nextNode","setTextCursorPosition","targetBlock","esmDependencies","initializeESMDependencies","vals","removeUnderlines","removeUnderlinesHelper","tree","numChildElements","numElementsAdded","addSpacesToCheckboxes","deps","helper","nextChild","cleanHTMLToMarkdown","cleanHTMLString","blocksToMarkdown","externalHTML","getChildIndex","isWhitespaceNode","liftNestedListsToParent","parentListItem","siblingsAfter","sibling","siblingContainer","createGroups","listItem","_detachedDoc","detachedDoc","nestedListsToBlockNoteStructure","elementOrHTML","HTMLToBlocks","htmlNode","code","properties","result","markdownToHTML","markdown","markdownToBlocks","htmlString","acceptedMIMETypes","checkFileExtensionsMatch","fileExtension1","fileExtension2","checkMIMETypesMatch","mimeType1","mimeType2","types1","types2","insertedBlockId","handleFileInsertion","dataTransfer","format","mimeType","fileBlockConfigs","fileBlockType","isFileExtension","fileBlock","coords","blockElement","blockRect","updateData","updatedFileBlock","createDropFileExtension","_view","h1","bold","ul","ol","hr","fences","blockquote","tableHeader","tableDivider","tableRow","isMarkdown","src","handleVSCodePaste","vscode","vscodeData","defaultPasteHandler","prioritizeMarkdownOverHTML","plainTextAsMarkdown","plainText","createPasteFromClipboardExtension","pasteHandler","fragmentToBlocks","fragmentToExternalHTML","selectedFragment","isWithinBlockContent","isWithinTable","fragmentWithoutParents","externalHTMLExporter","selectedFragmentToHTML","clipboardHTML","checkIfSelectionInNonEditableBlock","copyToClipboard","createCopyToClipboardExtension","BackgroundColorExtension","EventEmitter","fn","args","callbacks","callback","BlockNoteExtension","_args","plugin","BlockChangePlugin","cb","_CursorPlugin","collaboration","user","clientID","cursorData","cursorElement","cursor","updated","yCursorPlugin","defaultSelectionBuilder","bgColor","color","g","b","caretElement","labelElement","CursorPlugin","SyncPlugin","ySyncPlugin","UndoPlugin","yUndoPlugin","CommentMark","UserStore","resolveUsers","userIds","missingUsers","users","userId","SET_SELECTED_THREAD_ID","getUpdatedThreadPositions","markType","threadPositions","thisThreadId","currentPosition","CommentsPlugin","threadStore","threads","markThreadId","thread","isOrphan","trimmedFrom","trimmedTo","self","DecorationSet","action","decorations","selectedThreadPosition","Decoration","commentMark","threadId","scrollToThread","pmSelection","ystate","ySyncPluginKey","getRelativeSelection","FilePanelView","pluginKey","pmView","emitUpdate","prevState","pluginState","prevPluginState","isOpening","isClosing","filePanelPluginKey","FilePanelProsemirrorPlugin","editorView","FormattingToolbarView","empty","isEmptyTextBlock","isNodeSelection","focusedElement","editorWrapper","e","composing","isSame","ranges","shouldShow","jsdom","nextState","posToDOMRect","formattingToolbarPluginKey","FormattingToolbarProsemirrorPlugin","HardBreak","getParentBlockInfo","beforePos","parentBeforePos","getPrevBlockInfo","indexInParent","prevBlockBeforePos","getBottomNestedBlockInfo","group","newPos","canMerge","nextBlockInfo","mergeBlocks","childBlocksStart","childBlocksEnd","childBlocksRange","mergeBlocksCommand","posBetweenBlocks","bottomNestedBlockInfo","KeyboardShortcutsExtension","handleBackspace","selectionAtBlockStart","isParagraph","parentBlockInfo","columnList","shouldRemoveColumn","shouldRemoveColumnList","isFirstColumn","blockToMove","chainedCommands","lastCellParagraphEndPos","nonEditableBlockContentStartPos","blockContentStartPos","bottomBlock","handleDelete","childContainer","blockAtDocEnd","selectionAtBlockEnd","oldDepth","newDepth","withShift","blockEmpty","blockIndented","blockHardBreakShortcut","m","newBlockInsertionPos","newBlockContentPos","LinkToolbarView","hoveredLinkElement","posInHoveredLinkMark","resolvedPosInHoveredLinkMark","marksAtPos","getMarkRange","fromMouseOver","prevLinkMark","linkToolbarPluginKey","LinkToolbarProsemirrorPlugin","VALID_LINK_PROTOCOLS","DEFAULT_LINK_PROTOCOL","NodeSelectionKeyboardPlugin","PlaceholderPlugin","placeholders","uniqueEditorSelector","styleEl","nonce","styleSheet","getSelector","additionalSelectors","defaultPlaceholder","emptyPlaceholder","placeholder","blockTypeSelector","onlyBlockSelector","mustBeFocusedSelector","decs","nodeAttributes","PreviousBlockTypePlugin","timeout","_editorView","_prevState","currentTransactionOriginalOldBlockAttrs","oldNodes","findChildren","oldNodesById","oldNode","oldContentNode","newContentNode","newAttrs","oldAttrs","prevAttrs","decorationAttrs","nodeAttr","decoration","ShowSelectionPlugin","dec","enabled","getDraggableBlockFromElement","MultipleNodeSelection","Selection","$anchor","$head","_pos","fromResult","toResult","dragImageElement","blockPositionsFromSelection","beforeFirstBlockPos","afterLastBlockPos","selectionStartInBlockContent","selectionEndInBlockContent","minDepth","startFirstBlockPos","endLastBlockPos","setDragImage","parentClone","getElementIndex","parentElement","firstSelectedBlockIndex","lastSelectedBlockIndex","unsetDragImage","iframes","iframe","inheritedClasses","rootEl","dragStart","draggedBlockInSelection","multipleBlocksSelected","selectedSlice","DISTANCE_TO_CONSIDER_EDITOR_BOUNDS","getBlockFromCoords","adjustForColumns","elements","getBlockFromMousePos","mousePos","editorBoundingBox","referenceBlocksBoundingBox","SideMenuView","closestEditor","blockContentBoundingBox","editors","minDistance","rect","distanceX","distanceY","distance","dragEventContext","evt","textContentIsBeingDragged","sideMenuIsBeingDragged","isDragOrigin","isDropPoint","isDropWithinEditorBounds","_event","editorOuterBoundingBox","cursorWithinEditor","dropPointBoundingBox","sideMenuPluginKey","SideMenuProsemirrorPlugin","editorToMapping","getMapping","Mapping","trackPosition","side","ySyncPluginState","trackedMapLength","relativePosition","absolutePositionToRelativePosition","curYSyncPluginState","relativePositionToAbsolutePosition","findBlock","findParentNode","SuggestionMenuView","decorationNode","suggestionMenuPluginKey","menuName","started","stopped","SuggestionMenuProseMirrorPlugin","triggerCharacter","triggerCharacters","suggestionPluginTransactionMeta","trackedPosition","snippet","suggestionPluginState","blockNode","createSuggestionMenu","SuggestionAddMark","inline","SuggestionDeleteMark","SuggestionModificationMark","setHiddenDragImage","unsetHiddenDragImage","domCellAround","target","currentTarget","hideElements","selector","elementsToHide","TableHandlesView","tableRect","blockEl","tableBlock","pmNodeInfo","widgetContainer","belowTable","toRightOfTable","hideHandles","cellRect","boundedMouseCoords","tableCellElements","tableCellElement","emitStateUpdate","oldIndex","dispatchDecorationsTransaction","tableHandlesPluginKey","draggingState","newTable","columnWidth","rowCount","colCount","tableBody","TableHandlesProsemirrorPlugin","relativeStartCell","relativeEndCell","tableResolvedPos","startRowResolvedPos","startCellResolvedPos","endRowResolvedPos","endCellResolvedPos","direction","beforeState","addRowBefore","addRowAfter","addColumnBefore","addColumnAfter","deleteRow","deleteColumn","cellsToMerge","mergeCells","relativeCellToSplit","splitCell","$fromCell","$toCell","$fromRow","$toRow","$table","isSelectingTableCells","cellSelection","originalIndex","draggedCellOrientation","rowResolvedPos","cellResolvedPos","decorationPos","widget","TextAlignmentExtension","TextColorExtension","TrailingNode","__","shouldInsertNodeAtEnd","endPosition","_state","lastNode","lastContentNode","BlockAttributes","BlockContainer","HTMLAttr","blockOuter","blockHTMLAttributes","BlockGroup","blockGroupHTMLAttributes","Doc","ForkYDocPlugin","ytype","otherYdoc","ydoc","rootKey","ytypeItem","otherStructs","itemIndex","Y","originalFragment","forkedFragment","yUndoPluginKey","yCursorPluginKey","keepChanges","undoStack","getBlockNoteExtensions","tiptapExtensions","getTipTapExtensions","ext","disableExtensions","LINKIFY_INITIALIZED","extensions","Gapcursor","Text","Link","styleSpec","inlineContentSpec","History","removeChild","wrapTableRows","f","newItems","prevTable","shouldApplyFix","nestedChild","container","nodeHasSingleChild","nodeHasInlineContent","nodeHasTableContent","_BlockNoteTipTapEditor","TiptapEditor","blockNoteEditor","contentComponent","cache","oldCreateAndFill","pmNodes","createDocument","EditorState","selectionHasChanged","focus","blur","markViews","EditorView","oldSetTimeout","BlockNoteTipTapEditor","blockNoteTipTapOptions","BlockNoteEditor","anyOpts","en","_i","newOptions","dropCursor","_j","instance","uploadFile","collaborationEnabled","initialContent","TipTapNode","tiptapOptions","_k","_m","_l","_n","_p","_o","getSchema","command","activeTr","reverse","traverseBlockArray","blockArray","editable","undoCommand","undo","redoCommand","redo","updateSelection","includeSelectionChangedByRemote","forceSelectionVisible","raw","htmlToPaste","COLORS_DEFAULT","COLORS_DARK_MODE_DEFAULT","Exporter","_schema","mappings","inlineContentArray","nestingLevel","numberedListIndex","mappingFactory","emojiLoadingPromise","loadEmojiMart","emojiMartModule","emojiDataModule","emojiMart","emojiData","getDefaultEmojiPickerItems","emoji","combineByGroup","additionalItemsArray","combinedItems","additionalItems","additionalItem","lastItemWithSameGroup"],"mappings":"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"}